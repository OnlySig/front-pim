{"ast":null,"code":"import { RelationCountAttribute } from \"./RelationCountAttribute\";\nexport class RelationCountMetadataToAttributeTransformer {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(expressionMap) {\n    this.expressionMap = expressionMap;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n\n  transform() {\n    // by example:\n    // post has relation count:\n    // @RelationCount(post => post.categories) categoryCount\n    // category has relation count\n    // @RelationCount(category => category.images) imageCount\n    // we load post and join category\n    // we expect post.categoryCount and post.category.imageCount to have relation counts\n    // first create relation count attributes for all relation count metadatas of the main selected object (post from example)\n    if (this.expressionMap.mainAlias) {\n      this.expressionMap.mainAlias.metadata.relationCounts.forEach(relationCount => {\n        const attribute = this.metadataToAttribute(this.expressionMap.mainAlias.name, relationCount);\n        this.expressionMap.relationCountAttributes.push(attribute);\n      });\n    } // second create relation count attributes for all relation count metadatas of all joined objects (category from example)\n\n\n    this.expressionMap.joinAttributes.forEach(join => {\n      // ensure this join has a metadata, because relation count can only work for real orm entities\n      if (!join.metadata || join.metadata.isJunction) return;\n      join.metadata.relationCounts.forEach(relationCount => {\n        const attribute = this.metadataToAttribute(join.alias.name, relationCount);\n        this.expressionMap.relationCountAttributes.push(attribute);\n      });\n    });\n  } // -------------------------------------------------------------------------\n  // Private Methods\n  // -------------------------------------------------------------------------\n\n\n  metadataToAttribute(parentAliasName, relationCount) {\n    return new RelationCountAttribute(this.expressionMap, {\n      relationName: parentAliasName + \".\" + relationCount.relation.propertyName,\n      mapToProperty: parentAliasName + \".\" + relationCount.propertyName,\n      alias: relationCount.alias,\n      queryBuilderFactory: relationCount.queryBuilderFactory\n    });\n  }\n\n}","map":{"version":3,"mappings":"AAEA,SAASA,sBAAT,QAAuC,0BAAvC;AAEA,OAAM,MAAOC,2CAAP,CAAkD;EACpD;EACA;EACA;EAEAC,YAAsBC,aAAtB,EAAuD;IAAjC;EAAqC,CALP,CAOpD;EACA;EACA;;;EAEAC,SAAS;IACL;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA,IAAI,KAAKD,aAAL,CAAmBE,SAAvB,EAAkC;MAC9B,KAAKF,aAAL,CAAmBE,SAAnB,CAA6BC,QAA7B,CAAsCC,cAAtC,CAAqDC,OAArD,CACKC,aAAD,IAAkB;QACd,MAAMC,SAAS,GAAG,KAAKC,mBAAL,CACd,KAAKR,aAAL,CAAmBE,SAAnB,CAA8BO,IADhB,EAEdH,aAFc,CAAlB;QAIA,KAAKN,aAAL,CAAmBU,uBAAnB,CAA2CC,IAA3C,CAAgDJ,SAAhD;MACH,CAPL;IASH,CApBI,CAsBL;;;IACA,KAAKP,aAAL,CAAmBY,cAAnB,CAAkCP,OAAlC,CAA2CQ,IAAD,IAAS;MAC/C;MACA,IAAI,CAACA,IAAI,CAACV,QAAN,IAAkBU,IAAI,CAACV,QAAL,CAAcW,UAApC,EAAgD;MAEhDD,IAAI,CAACV,QAAL,CAAcC,cAAd,CAA6BC,OAA7B,CAAsCC,aAAD,IAAkB;QACnD,MAAMC,SAAS,GAAG,KAAKC,mBAAL,CACdK,IAAI,CAACE,KAAL,CAAWN,IADG,EAEdH,aAFc,CAAlB;QAIA,KAAKN,aAAL,CAAmBU,uBAAnB,CAA2CC,IAA3C,CAAgDJ,SAAhD;MACH,CAND;IAOH,CAXD;EAYH,CA9CmD,CAgDpD;EACA;EACA;;;EAEQC,mBAAmB,CACvBQ,eADuB,EAEvBV,aAFuB,EAEa;IAEpC,OAAO,IAAIT,sBAAJ,CAA2B,KAAKG,aAAhC,EAA+C;MAClDiB,YAAY,EACRD,eAAe,GAAG,GAAlB,GAAwBV,aAAa,CAACY,QAAd,CAAuBC,YAFD;MAGlDC,aAAa,EAAEJ,eAAe,GAAG,GAAlB,GAAwBV,aAAa,CAACa,YAHH;MAIlDJ,KAAK,EAAET,aAAa,CAACS,KAJ6B;MAKlDM,mBAAmB,EAAEf,aAAa,CAACe;IALe,CAA/C,CAAP;EAOH;;AA/DmD","names":["RelationCountAttribute","RelationCountMetadataToAttributeTransformer","constructor","expressionMap","transform","mainAlias","metadata","relationCounts","forEach","relationCount","attribute","metadataToAttribute","name","relationCountAttributes","push","joinAttributes","join","isJunction","alias","parentAliasName","relationName","relation","propertyName","mapToProperty","queryBuilderFactory"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\query-builder\\relation-count\\RelationCountMetadataToAttributeTransformer.ts"],"sourcesContent":["import { QueryExpressionMap } from \"../QueryExpressionMap\"\nimport { RelationCountMetadata } from \"../../metadata/RelationCountMetadata\"\nimport { RelationCountAttribute } from \"./RelationCountAttribute\"\n\nexport class RelationCountMetadataToAttributeTransformer {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected expressionMap: QueryExpressionMap) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform() {\n        // by example:\n        // post has relation count:\n        // @RelationCount(post => post.categories) categoryCount\n        // category has relation count\n        // @RelationCount(category => category.images) imageCount\n        // we load post and join category\n        // we expect post.categoryCount and post.category.imageCount to have relation counts\n\n        // first create relation count attributes for all relation count metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationCounts.forEach(\n                (relationCount) => {\n                    const attribute = this.metadataToAttribute(\n                        this.expressionMap.mainAlias!.name,\n                        relationCount,\n                    )\n                    this.expressionMap.relationCountAttributes.push(attribute)\n                },\n            )\n        }\n\n        // second create relation count attributes for all relation count metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach((join) => {\n            // ensure this join has a metadata, because relation count can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction) return\n\n            join.metadata.relationCounts.forEach((relationCount) => {\n                const attribute = this.metadataToAttribute(\n                    join.alias.name,\n                    relationCount,\n                )\n                this.expressionMap.relationCountAttributes.push(attribute)\n            })\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private metadataToAttribute(\n        parentAliasName: string,\n        relationCount: RelationCountMetadata,\n    ): RelationCountAttribute {\n        return new RelationCountAttribute(this.expressionMap, {\n            relationName:\n                parentAliasName + \".\" + relationCount.relation.propertyName, // category.images\n            mapToProperty: parentAliasName + \".\" + relationCount.propertyName, // category.imageIds\n            alias: relationCount.alias,\n            queryBuilderFactory: relationCount.queryBuilderFactory,\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}