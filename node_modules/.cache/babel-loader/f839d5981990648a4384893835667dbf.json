{"ast":null,"code":"import { TypeORMError } from \"./TypeORMError\";\nexport class MetadataAlreadyExistsError extends TypeORMError {\n  constructor(metadataType, constructor, propertyName) {\n    super(metadataType + \" metadata already exists for the class constructor \" + JSON.stringify(constructor) + (propertyName ? \" on property \" + propertyName : \". If you previously renamed or moved entity class, make sure\" + \" that compiled version of old entity class source wasn't left in the compiler output directory.\"));\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AAEA,OAAM,MAAOC,0BAAP,SAA0CD,YAA1C,CAAsD;EACxDE,YACIC,YADJ,EAEID,WAFJ,EAGIE,YAHJ,EAGyB;IAErB,MACID,YAAY,GACR,qDADJ,GAEIE,IAAI,CAACC,SAAL,CAAeJ,WAAf,CAFJ,IAGKE,YAAY,GACP,kBAAkBA,YADX,GAEP,iEACA,iGANV,CADJ;EASH;;AAfuD","names":["TypeORMError","MetadataAlreadyExistsError","constructor","metadataType","propertyName","JSON","stringify"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\error\\MetadataAlreadyExistsError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\nexport class MetadataAlreadyExistsError extends TypeORMError {\n    constructor(\n        metadataType: string,\n        constructor: Function,\n        propertyName?: string,\n    ) {\n        super(\n            metadataType +\n                \" metadata already exists for the class constructor \" +\n                JSON.stringify(constructor) +\n                (propertyName\n                    ? \" on property \" + propertyName\n                    : \". If you previously renamed or moved entity class, make sure\" +\n                      \" that compiled version of old entity class source wasn't left in the compiler output directory.\"),\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}