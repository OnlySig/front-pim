{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n */\n\nexport function PrimaryGeneratedColumn(strategyOrOptions, maybeOptions) {\n  // normalize parameters\n  const options = {};\n  let strategy;\n\n  if (strategyOrOptions) {\n    if (typeof strategyOrOptions === \"string\") strategy = strategyOrOptions;\n\n    if (ObjectUtils.isObject(strategyOrOptions)) {\n      strategy = \"increment\";\n      Object.assign(options, strategyOrOptions);\n    }\n  } else {\n    strategy = \"increment\";\n  }\n\n  if (ObjectUtils.isObject(maybeOptions)) Object.assign(options, maybeOptions);\n  return function (object, propertyName) {\n    // if column type is not explicitly set then determine it based on generation strategy\n    if (!options.type) {\n      if (strategy === \"increment\" || strategy === \"identity\") {\n        options.type = Number;\n      } else if (strategy === \"uuid\") {\n        options.type = \"uuid\";\n      } else if (strategy === \"rowid\") {\n        options.type = \"int\";\n      }\n    } // explicitly set a primary and generated to column options\n\n\n    options.primary = true; // register column metadata args\n\n    getMetadataArgsStorage().columns.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      mode: \"regular\",\n      options: options\n    }); // register generated metadata args\n\n    getMetadataArgsStorage().generations.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      strategy: strategy\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,sBAAT,QAAuC,eAAvC;AAMA,SAASC,WAAT,QAA4B,wBAA5B;AA2CA;;;;;;AAKA,OAAM,SAAUC,sBAAV,CACFC,iBADE,EASFC,YATE,EAYyC;EAE3C;EACA,MAAMC,OAAO,GAAkB,EAA/B;EACA,IAAIC,QAAJ;;EACA,IAAIH,iBAAJ,EAAuB;IACnB,IAAI,OAAOA,iBAAP,KAA6B,QAAjC,EACIG,QAAQ,GAAGH,iBAAX;;IAMJ,IAAIF,WAAW,CAACM,QAAZ,CAAqBJ,iBAArB,CAAJ,EAA6C;MACzCG,QAAQ,GAAG,WAAX;MACAE,MAAM,CAACC,MAAP,CAAcJ,OAAd,EAAuBF,iBAAvB;IACH;EACJ,CAZD,MAYO;IACHG,QAAQ,GAAG,WAAX;EACH;;EACD,IAAIL,WAAW,CAACM,QAAZ,CAAqBH,YAArB,CAAJ,EAAwCI,MAAM,CAACC,MAAP,CAAcJ,OAAd,EAAuBD,YAAvB;EAExC,OAAO,UAAUM,MAAV,EAA0BC,YAA1B,EAA8C;IACjD;IACA,IAAI,CAACN,OAAO,CAACO,IAAb,EAAmB;MACf,IAAIN,QAAQ,KAAK,WAAb,IAA4BA,QAAQ,KAAK,UAA7C,EAAyD;QACrDD,OAAO,CAACO,IAAR,GAAeC,MAAf;MACH,CAFD,MAEO,IAAIP,QAAQ,KAAK,MAAjB,EAAyB;QAC5BD,OAAO,CAACO,IAAR,GAAe,MAAf;MACH,CAFM,MAEA,IAAIN,QAAQ,KAAK,OAAjB,EAA0B;QAC7BD,OAAO,CAACO,IAAR,GAAe,KAAf;MACH;IACJ,CAVgD,CAYjD;;;IACAP,OAAO,CAACS,OAAR,GAAkB,IAAlB,CAbiD,CAejD;;IACAd,sBAAsB,GAAGe,OAAzB,CAAiCC,IAAjC,CAAsC;MAClCC,MAAM,EAAEP,MAAM,CAACQ,WADmB;MAElCP,YAAY,EAAEA,YAFoB;MAGlCQ,IAAI,EAAE,SAH4B;MAIlCd,OAAO,EAAEA;IAJyB,CAAtC,EAhBiD,CAuBjD;;IACAL,sBAAsB,GAAGoB,WAAzB,CAAqCJ,IAArC,CAA0C;MACtCC,MAAM,EAAEP,MAAM,CAACQ,WADuB;MAEtCP,YAAY,EAAEA,YAFwB;MAGtCL,QAAQ,EAAEA;IAH4B,CAA1C;EAKH,CA7BD;AA8BH","names":["getMetadataArgsStorage","ObjectUtils","PrimaryGeneratedColumn","strategyOrOptions","maybeOptions","options","strategy","isObject","Object","assign","object","propertyName","type","Number","primary","columns","push","target","constructor","mode","generations"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\decorator\\columns\\PrimaryGeneratedColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { PrimaryGeneratedColumnNumericOptions } from \"../options/PrimaryGeneratedColumnNumericOptions\"\nimport { PrimaryGeneratedColumnUUIDOptions } from \"../options/PrimaryGeneratedColumnUUIDOptions\"\nimport { GeneratedMetadataArgs } from \"../../metadata-args/GeneratedMetadataArgs\"\nimport { ColumnOptions } from \"../options/ColumnOptions\"\nimport { PrimaryGeneratedColumnIdentityOptions } from \"../options/PrimaryGeneratedColumnIdentityOptions\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(\n    options: PrimaryGeneratedColumnNumericOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(\n    strategy: \"increment\",\n    options?: PrimaryGeneratedColumnNumericOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(\n    strategy: \"uuid\",\n    options?: PrimaryGeneratedColumnUUIDOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(\n    strategy: \"rowid\",\n    options?: PrimaryGeneratedColumnUUIDOptions,\n): PropertyDecorator\n\nexport function PrimaryGeneratedColumn(\n    strategy: \"identity\",\n    options?: PrimaryGeneratedColumnIdentityOptions,\n): PropertyDecorator\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n */\nexport function PrimaryGeneratedColumn(\n    strategyOrOptions?:\n        | \"increment\"\n        | \"uuid\"\n        | \"rowid\"\n        | \"identity\"\n        | PrimaryGeneratedColumnNumericOptions\n        | PrimaryGeneratedColumnUUIDOptions\n        | PrimaryGeneratedColumnIdentityOptions,\n    maybeOptions?:\n        | PrimaryGeneratedColumnNumericOptions\n        | PrimaryGeneratedColumnUUIDOptions\n        | PrimaryGeneratedColumnIdentityOptions,\n): PropertyDecorator {\n    // normalize parameters\n    const options: ColumnOptions = {}\n    let strategy: \"increment\" | \"uuid\" | \"rowid\" | \"identity\"\n    if (strategyOrOptions) {\n        if (typeof strategyOrOptions === \"string\")\n            strategy = strategyOrOptions as\n                | \"increment\"\n                | \"uuid\"\n                | \"rowid\"\n                | \"identity\"\n\n        if (ObjectUtils.isObject(strategyOrOptions)) {\n            strategy = \"increment\"\n            Object.assign(options, strategyOrOptions)\n        }\n    } else {\n        strategy = \"increment\"\n    }\n    if (ObjectUtils.isObject(maybeOptions)) Object.assign(options, maybeOptions)\n\n    return function (object: Object, propertyName: string) {\n        // if column type is not explicitly set then determine it based on generation strategy\n        if (!options.type) {\n            if (strategy === \"increment\" || strategy === \"identity\") {\n                options.type = Number\n            } else if (strategy === \"uuid\") {\n                options.type = \"uuid\"\n            } else if (strategy === \"rowid\") {\n                options.type = \"int\"\n            }\n        }\n\n        // explicitly set a primary and generated to column options\n        options.primary = true\n\n        // register column metadata args\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options,\n        })\n\n        // register generated metadata args\n        getMetadataArgsStorage().generations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            strategy: strategy,\n        } as GeneratedMetadataArgs)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}