{"ast":null,"code":"import { MetadataUtils } from \"../metadata-builder/MetadataUtils\";\n/**\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\n * Each metadata args represents some specifications of what it represents.\n * MetadataArgs used to create a real Metadata objects.\n */\n\nexport class MetadataArgsStorage {\n  constructor() {\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n    this.tables = [];\n    this.trees = [];\n    this.entityRepositories = [];\n    this.transactionEntityManagers = [];\n    this.transactionRepositories = [];\n    this.namingStrategies = [];\n    this.entitySubscribers = [];\n    this.indices = [];\n    this.uniques = [];\n    this.checks = [];\n    this.exclusions = [];\n    this.columns = [];\n    this.generations = [];\n    this.relations = [];\n    this.joinColumns = [];\n    this.joinTables = [];\n    this.entityListeners = [];\n    this.relationCounts = [];\n    this.relationIds = [];\n    this.embeddeds = [];\n    this.inheritances = [];\n    this.discriminatorValues = [];\n  }\n\n  filterTables(target) {\n    return this.filterByTarget(this.tables, target);\n  }\n\n  filterColumns(target) {\n    return this.filterByTargetAndWithoutDuplicateProperties(this.columns, target);\n  }\n\n  findGenerated(target, propertyName) {\n    return this.generations.find(generated => {\n      return (Array.isArray(target) ? target.indexOf(generated.target) !== -1 : generated.target === target) && generated.propertyName === propertyName;\n    });\n  }\n\n  findTree(target) {\n    return this.trees.find(tree => {\n      return Array.isArray(target) ? target.indexOf(tree.target) !== -1 : tree.target === target;\n    });\n  }\n\n  filterRelations(target) {\n    return this.filterByTargetAndWithoutDuplicateRelationProperties(this.relations, target);\n  }\n\n  filterRelationIds(target) {\n    return this.filterByTargetAndWithoutDuplicateProperties(this.relationIds, target);\n  }\n\n  filterRelationCounts(target) {\n    return this.filterByTargetAndWithoutDuplicateProperties(this.relationCounts, target);\n  }\n\n  filterIndices(target) {\n    // todo: implement parent-entity overrides?\n    return this.indices.filter(index => {\n      return Array.isArray(target) ? target.indexOf(index.target) !== -1 : index.target === target;\n    });\n  }\n\n  filterUniques(target) {\n    return this.uniques.filter(unique => {\n      return Array.isArray(target) ? target.indexOf(unique.target) !== -1 : unique.target === target;\n    });\n  }\n\n  filterChecks(target) {\n    return this.checks.filter(check => {\n      return Array.isArray(target) ? target.indexOf(check.target) !== -1 : check.target === target;\n    });\n  }\n\n  filterExclusions(target) {\n    return this.exclusions.filter(exclusion => {\n      return Array.isArray(target) ? target.indexOf(exclusion.target) !== -1 : exclusion.target === target;\n    });\n  }\n\n  filterListeners(target) {\n    return this.filterByTarget(this.entityListeners, target);\n  }\n\n  filterEmbeddeds(target) {\n    return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(this.embeddeds, target);\n  }\n\n  findJoinTable(target, propertyName) {\n    return this.joinTables.find(joinTable => {\n      return joinTable.target === target && joinTable.propertyName === propertyName;\n    });\n  }\n\n  filterJoinColumns(target, propertyName) {\n    // todo: implement parent-entity overrides?\n    return this.joinColumns.filter(joinColumn => {\n      return joinColumn.target === target && joinColumn.propertyName === propertyName;\n    });\n  }\n\n  filterSubscribers(target) {\n    return this.filterByTarget(this.entitySubscribers, target);\n  }\n\n  filterNamingStrategies(target) {\n    return this.filterByTarget(this.namingStrategies, target);\n  }\n\n  filterTransactionEntityManagers(target, propertyName) {\n    return this.transactionEntityManagers.filter(transactionEm => {\n      return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n    });\n  }\n\n  filterTransactionRepository(target, propertyName) {\n    return this.transactionRepositories.filter(transactionEm => {\n      return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n    });\n  }\n\n  filterSingleTableChildren(target) {\n    return this.tables.filter(table => {\n      return typeof table.target === \"function\" && typeof target === \"function\" && MetadataUtils.isInherited(table.target, target) && table.type === \"entity-child\";\n    });\n  }\n\n  findInheritanceType(target) {\n    return this.inheritances.find(inheritance => inheritance.target === target);\n  }\n\n  findDiscriminatorValue(target) {\n    return this.discriminatorValues.find(discriminatorValue => discriminatorValue.target === target);\n  } // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Filters given array by a given target or targets.\n   */\n\n\n  filterByTarget(array, target) {\n    return array.filter(table => {\n      return Array.isArray(target) ? target.indexOf(table.target) !== -1 : table.target === target;\n    });\n  }\n  /**\n   * Filters given array by a given target or targets and prevents duplicate property names.\n   */\n\n\n  filterByTargetAndWithoutDuplicateProperties(array, target) {\n    const newArray = [];\n    array.forEach(item => {\n      const sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n\n      if (sameTarget) {\n        if (!newArray.find(newItem => newItem.propertyName === item.propertyName)) newArray.push(item);\n      }\n    });\n    return newArray;\n  }\n  /**\n   * Filters given array by a given target or targets and prevents duplicate relation property names.\n   */\n\n\n  filterByTargetAndWithoutDuplicateRelationProperties(array, target) {\n    const newArray = [];\n    array.forEach(item => {\n      const sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n\n      if (sameTarget) {\n        const existingIndex = newArray.findIndex(newItem => newItem.propertyName === item.propertyName);\n\n        if (Array.isArray(target) && existingIndex !== -1 && target.indexOf(item.target) < target.indexOf(newArray[existingIndex].target)) {\n          const clone = Object.create(newArray[existingIndex]);\n          clone.type = item.type;\n          newArray[existingIndex] = clone;\n        } else if (existingIndex === -1) {\n          newArray.push(item);\n        }\n      }\n    });\n    return newArray;\n  }\n  /**\n   * Filters given array by a given target or targets and prevents duplicate embedded property names.\n   */\n\n\n  filterByTargetAndWithoutDuplicateEmbeddedProperties(array, target) {\n    const newArray = [];\n    array.forEach(item => {\n      const sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n\n      if (sameTarget) {\n        const isDuplicateEmbeddedProperty = newArray.find(newItem => newItem.prefix === item.prefix && newItem.propertyName === item.propertyName);\n        if (!isDuplicateEmbeddedProperty) newArray.push(item);\n      }\n    });\n    return newArray;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["MetadataUtils","MetadataArgsStorage","constructor","filterTables","target","filterByTarget","tables","filterColumns","filterByTargetAndWithoutDuplicateProperties","columns","findGenerated","propertyName","generations","find","generated","Array","isArray","indexOf","findTree","trees","tree","filterRelations","filterByTargetAndWithoutDuplicateRelationProperties","relations","filterRelationIds","relationIds","filterRelationCounts","relationCounts","filterIndices","indices","filter","index","filterUniques","uniques","unique","filterChecks","checks","check","filterExclusions","exclusions","exclusion","filterListeners","entityListeners","filterEmbeddeds","filterByTargetAndWithoutDuplicateEmbeddedProperties","embeddeds","findJoinTable","joinTables","joinTable","filterJoinColumns","joinColumns","joinColumn","filterSubscribers","entitySubscribers","filterNamingStrategies","namingStrategies","filterTransactionEntityManagers","transactionEntityManagers","transactionEm","methodName","filterTransactionRepository","transactionRepositories","filterSingleTableChildren","table","isInherited","type","findInheritanceType","inheritances","inheritance","findDiscriminatorValue","discriminatorValues","discriminatorValue","array","newArray","forEach","item","sameTarget","newItem","push","existingIndex","findIndex","clone","Object","create","isDuplicateEmbeddedProperty","prefix"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\metadata-args\\MetadataArgsStorage.ts"],"sourcesContent":["import { RelationMetadataArgs } from \"./RelationMetadataArgs\"\nimport { ColumnMetadataArgs } from \"./ColumnMetadataArgs\"\nimport { RelationCountMetadataArgs } from \"./RelationCountMetadataArgs\"\nimport { IndexMetadataArgs } from \"./IndexMetadataArgs\"\nimport { EntityListenerMetadataArgs } from \"./EntityListenerMetadataArgs\"\nimport { TableMetadataArgs } from \"./TableMetadataArgs\"\nimport { NamingStrategyMetadataArgs } from \"./NamingStrategyMetadataArgs\"\nimport { JoinTableMetadataArgs } from \"./JoinTableMetadataArgs\"\nimport { JoinColumnMetadataArgs } from \"./JoinColumnMetadataArgs\"\nimport { EmbeddedMetadataArgs } from \"./EmbeddedMetadataArgs\"\nimport { EntitySubscriberMetadataArgs } from \"./EntitySubscriberMetadataArgs\"\nimport { RelationIdMetadataArgs } from \"./RelationIdMetadataArgs\"\nimport { InheritanceMetadataArgs } from \"./InheritanceMetadataArgs\"\nimport { DiscriminatorValueMetadataArgs } from \"./DiscriminatorValueMetadataArgs\"\nimport { EntityRepositoryMetadataArgs } from \"./EntityRepositoryMetadataArgs\"\nimport { TransactionEntityMetadataArgs } from \"./TransactionEntityMetadataArgs\"\nimport { TransactionRepositoryMetadataArgs } from \"./TransactionRepositoryMetadataArgs\"\nimport { MetadataUtils } from \"../metadata-builder/MetadataUtils\"\nimport { GeneratedMetadataArgs } from \"./GeneratedMetadataArgs\"\nimport { TreeMetadataArgs } from \"./TreeMetadataArgs\"\nimport { UniqueMetadataArgs } from \"./UniqueMetadataArgs\"\nimport { CheckMetadataArgs } from \"./CheckMetadataArgs\"\nimport { ExclusionMetadataArgs } from \"./ExclusionMetadataArgs\"\n\n/**\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\n * Each metadata args represents some specifications of what it represents.\n * MetadataArgs used to create a real Metadata objects.\n */\nexport class MetadataArgsStorage {\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    readonly tables: TableMetadataArgs[] = []\n    readonly trees: TreeMetadataArgs[] = []\n    readonly entityRepositories: EntityRepositoryMetadataArgs[] = []\n    readonly transactionEntityManagers: TransactionEntityMetadataArgs[] = []\n    readonly transactionRepositories: TransactionRepositoryMetadataArgs[] = []\n    readonly namingStrategies: NamingStrategyMetadataArgs[] = []\n    readonly entitySubscribers: EntitySubscriberMetadataArgs[] = []\n    readonly indices: IndexMetadataArgs[] = []\n    readonly uniques: UniqueMetadataArgs[] = []\n    readonly checks: CheckMetadataArgs[] = []\n    readonly exclusions: ExclusionMetadataArgs[] = []\n    readonly columns: ColumnMetadataArgs[] = []\n    readonly generations: GeneratedMetadataArgs[] = []\n    readonly relations: RelationMetadataArgs[] = []\n    readonly joinColumns: JoinColumnMetadataArgs[] = []\n    readonly joinTables: JoinTableMetadataArgs[] = []\n    readonly entityListeners: EntityListenerMetadataArgs[] = []\n    readonly relationCounts: RelationCountMetadataArgs[] = []\n    readonly relationIds: RelationIdMetadataArgs[] = []\n    readonly embeddeds: EmbeddedMetadataArgs[] = []\n    readonly inheritances: InheritanceMetadataArgs[] = []\n    readonly discriminatorValues: DiscriminatorValueMetadataArgs[] = []\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    filterTables(target: Function | string): TableMetadataArgs[]\n    filterTables(target: (Function | string)[]): TableMetadataArgs[]\n    filterTables(\n        target: (Function | string) | (Function | string)[],\n    ): TableMetadataArgs[] {\n        return this.filterByTarget(this.tables, target)\n    }\n\n    filterColumns(target: Function | string): ColumnMetadataArgs[]\n    filterColumns(target: (Function | string)[]): ColumnMetadataArgs[]\n    filterColumns(\n        target: (Function | string) | (Function | string)[],\n    ): ColumnMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(\n            this.columns,\n            target,\n        )\n    }\n\n    findGenerated(\n        target: Function | string,\n        propertyName: string,\n    ): GeneratedMetadataArgs | undefined\n    findGenerated(\n        target: (Function | string)[],\n        propertyName: string,\n    ): GeneratedMetadataArgs | undefined\n    findGenerated(\n        target: (Function | string) | (Function | string)[],\n        propertyName: string,\n    ): GeneratedMetadataArgs | undefined {\n        return this.generations.find((generated) => {\n            return (\n                (Array.isArray(target)\n                    ? target.indexOf(generated.target) !== -1\n                    : generated.target === target) &&\n                generated.propertyName === propertyName\n            )\n        })\n    }\n\n    findTree(\n        target: (Function | string) | (Function | string)[],\n    ): TreeMetadataArgs | undefined {\n        return this.trees.find((tree) => {\n            return Array.isArray(target)\n                ? target.indexOf(tree.target) !== -1\n                : tree.target === target\n        })\n    }\n\n    filterRelations(target: Function | string): RelationMetadataArgs[]\n    filterRelations(target: (Function | string)[]): RelationMetadataArgs[]\n    filterRelations(\n        target: (Function | string) | (Function | string)[],\n    ): RelationMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateRelationProperties(\n            this.relations,\n            target,\n        )\n    }\n\n    filterRelationIds(target: Function | string): RelationIdMetadataArgs[]\n    filterRelationIds(target: (Function | string)[]): RelationIdMetadataArgs[]\n    filterRelationIds(\n        target: (Function | string) | (Function | string)[],\n    ): RelationIdMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(\n            this.relationIds,\n            target,\n        )\n    }\n\n    filterRelationCounts(target: Function | string): RelationCountMetadataArgs[]\n    filterRelationCounts(\n        target: (Function | string)[],\n    ): RelationCountMetadataArgs[]\n    filterRelationCounts(\n        target: (Function | string) | (Function | string)[],\n    ): RelationCountMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(\n            this.relationCounts,\n            target,\n        )\n    }\n\n    filterIndices(target: Function | string): IndexMetadataArgs[]\n    filterIndices(target: (Function | string)[]): IndexMetadataArgs[]\n    filterIndices(\n        target: (Function | string) | (Function | string)[],\n    ): IndexMetadataArgs[] {\n        // todo: implement parent-entity overrides?\n        return this.indices.filter((index) => {\n            return Array.isArray(target)\n                ? target.indexOf(index.target) !== -1\n                : index.target === target\n        })\n    }\n\n    filterUniques(target: Function | string): UniqueMetadataArgs[]\n    filterUniques(target: (Function | string)[]): UniqueMetadataArgs[]\n    filterUniques(\n        target: (Function | string) | (Function | string)[],\n    ): UniqueMetadataArgs[] {\n        return this.uniques.filter((unique) => {\n            return Array.isArray(target)\n                ? target.indexOf(unique.target) !== -1\n                : unique.target === target\n        })\n    }\n\n    filterChecks(target: Function | string): CheckMetadataArgs[]\n    filterChecks(target: (Function | string)[]): CheckMetadataArgs[]\n    filterChecks(\n        target: (Function | string) | (Function | string)[],\n    ): CheckMetadataArgs[] {\n        return this.checks.filter((check) => {\n            return Array.isArray(target)\n                ? target.indexOf(check.target) !== -1\n                : check.target === target\n        })\n    }\n\n    filterExclusions(target: Function | string): ExclusionMetadataArgs[]\n    filterExclusions(target: (Function | string)[]): ExclusionMetadataArgs[]\n    filterExclusions(\n        target: (Function | string) | (Function | string)[],\n    ): ExclusionMetadataArgs[] {\n        return this.exclusions.filter((exclusion) => {\n            return Array.isArray(target)\n                ? target.indexOf(exclusion.target) !== -1\n                : exclusion.target === target\n        })\n    }\n\n    filterListeners(target: Function | string): EntityListenerMetadataArgs[]\n    filterListeners(target: (Function | string)[]): EntityListenerMetadataArgs[]\n    filterListeners(\n        target: (Function | string) | (Function | string)[],\n    ): EntityListenerMetadataArgs[] {\n        return this.filterByTarget(this.entityListeners, target)\n    }\n\n    filterEmbeddeds(target: Function | string): EmbeddedMetadataArgs[]\n    filterEmbeddeds(target: (Function | string)[]): EmbeddedMetadataArgs[]\n    filterEmbeddeds(\n        target: (Function | string) | (Function | string)[],\n    ): EmbeddedMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(\n            this.embeddeds,\n            target,\n        )\n    }\n\n    findJoinTable(\n        target: Function | string,\n        propertyName: string,\n    ): JoinTableMetadataArgs | undefined {\n        return this.joinTables.find((joinTable) => {\n            return (\n                joinTable.target === target &&\n                joinTable.propertyName === propertyName\n            )\n        })\n    }\n\n    filterJoinColumns(\n        target: Function | string,\n        propertyName: string,\n    ): JoinColumnMetadataArgs[] {\n        // todo: implement parent-entity overrides?\n        return this.joinColumns.filter((joinColumn) => {\n            return (\n                joinColumn.target === target &&\n                joinColumn.propertyName === propertyName\n            )\n        })\n    }\n\n    filterSubscribers(target: Function | string): EntitySubscriberMetadataArgs[]\n    filterSubscribers(\n        target: (Function | string)[],\n    ): EntitySubscriberMetadataArgs[]\n    filterSubscribers(\n        target: (Function | string) | (Function | string)[],\n    ): EntitySubscriberMetadataArgs[] {\n        return this.filterByTarget(this.entitySubscribers, target)\n    }\n\n    filterNamingStrategies(\n        target: Function | string,\n    ): NamingStrategyMetadataArgs[]\n    filterNamingStrategies(\n        target: (Function | string)[],\n    ): NamingStrategyMetadataArgs[]\n    filterNamingStrategies(\n        target: (Function | string) | (Function | string)[],\n    ): NamingStrategyMetadataArgs[] {\n        return this.filterByTarget(this.namingStrategies, target)\n    }\n\n    filterTransactionEntityManagers(\n        target: Function | string,\n        propertyName: string,\n    ): TransactionEntityMetadataArgs[] {\n        return this.transactionEntityManagers.filter((transactionEm) => {\n            return (\n                (Array.isArray(target)\n                    ? target.indexOf(transactionEm.target) !== -1\n                    : transactionEm.target === target) &&\n                transactionEm.methodName === propertyName\n            )\n        })\n    }\n\n    filterTransactionRepository(\n        target: Function | string,\n        propertyName: string,\n    ): TransactionRepositoryMetadataArgs[] {\n        return this.transactionRepositories.filter((transactionEm) => {\n            return (\n                (Array.isArray(target)\n                    ? target.indexOf(transactionEm.target) !== -1\n                    : transactionEm.target === target) &&\n                transactionEm.methodName === propertyName\n            )\n        })\n    }\n\n    filterSingleTableChildren(target: Function | string): TableMetadataArgs[] {\n        return this.tables.filter((table) => {\n            return (\n                typeof table.target === \"function\" &&\n                typeof target === \"function\" &&\n                MetadataUtils.isInherited(table.target, target) &&\n                table.type === \"entity-child\"\n            )\n        })\n    }\n\n    findInheritanceType(\n        target: Function | string,\n    ): InheritanceMetadataArgs | undefined {\n        return this.inheritances.find(\n            (inheritance) => inheritance.target === target,\n        )\n    }\n\n    findDiscriminatorValue(\n        target: Function | string,\n    ): DiscriminatorValueMetadataArgs | undefined {\n        return this.discriminatorValues.find(\n            (discriminatorValue) => discriminatorValue.target === target,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Filters given array by a given target or targets.\n     */\n    protected filterByTarget<T extends { target: Function | string }>(\n        array: T[],\n        target: (Function | string) | (Function | string)[],\n    ): T[] {\n        return array.filter((table) => {\n            return Array.isArray(target)\n                ? target.indexOf(table.target) !== -1\n                : table.target === target\n        })\n    }\n\n    /**\n     * Filters given array by a given target or targets and prevents duplicate property names.\n     */\n    protected filterByTargetAndWithoutDuplicateProperties<\n        T extends { target: Function | string; propertyName: string },\n    >(array: T[], target: (Function | string) | (Function | string)[]): T[] {\n        const newArray: T[] = []\n        array.forEach((item) => {\n            const sameTarget = Array.isArray(target)\n                ? target.indexOf(item.target) !== -1\n                : item.target === target\n            if (sameTarget) {\n                if (\n                    !newArray.find(\n                        (newItem) => newItem.propertyName === item.propertyName,\n                    )\n                )\n                    newArray.push(item)\n            }\n        })\n        return newArray\n    }\n\n    /**\n     * Filters given array by a given target or targets and prevents duplicate relation property names.\n     */\n    protected filterByTargetAndWithoutDuplicateRelationProperties<\n        T extends RelationMetadataArgs,\n    >(array: T[], target: (Function | string) | (Function | string)[]): T[] {\n        const newArray: T[] = []\n        array.forEach((item) => {\n            const sameTarget = Array.isArray(target)\n                ? target.indexOf(item.target) !== -1\n                : item.target === target\n            if (sameTarget) {\n                const existingIndex = newArray.findIndex(\n                    (newItem) => newItem.propertyName === item.propertyName,\n                )\n                if (\n                    Array.isArray(target) &&\n                    existingIndex !== -1 &&\n                    target.indexOf(item.target) <\n                        target.indexOf(newArray[existingIndex].target)\n                ) {\n                    const clone = Object.create(newArray[existingIndex])\n                    clone.type = item.type\n                    newArray[existingIndex] = clone\n                } else if (existingIndex === -1) {\n                    newArray.push(item)\n                }\n            }\n        })\n        return newArray\n    }\n\n    /**\n     * Filters given array by a given target or targets and prevents duplicate embedded property names.\n     */\n    protected filterByTargetAndWithoutDuplicateEmbeddedProperties<\n        T extends EmbeddedMetadataArgs,\n    >(array: T[], target: (Function | string) | (Function | string)[]): T[] {\n        const newArray: T[] = []\n        array.forEach((item) => {\n            const sameTarget = Array.isArray(target)\n                ? target.indexOf(item.target) !== -1\n                : item.target === target\n            if (sameTarget) {\n                const isDuplicateEmbeddedProperty = newArray.find(\n                    (newItem: EmbeddedMetadataArgs): boolean =>\n                        newItem.prefix === item.prefix &&\n                        newItem.propertyName === item.propertyName,\n                )\n                if (!isDuplicateEmbeddedProperty) newArray.push(item)\n            }\n        })\n        return newArray\n    }\n}\n"]},"metadata":{},"sourceType":"module"}