{"ast":null,"code":"import { EntityNotFoundError } from \"../error/EntityNotFoundError\";\nimport { QueryRunnerProviderAlreadyReleasedError } from \"../error/QueryRunnerProviderAlreadyReleasedError\";\nimport { NoNeedToReleaseEntityManagerError } from \"../error/NoNeedToReleaseEntityManagerError\";\nimport { MongoRepository } from \"../repository/MongoRepository\";\nimport { TreeRepository } from \"../repository/TreeRepository\";\nimport { Repository } from \"../repository/Repository\";\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\";\nimport { PlainObjectToNewEntityTransformer } from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\";\nimport { PlainObjectToDatabaseEntityTransformer } from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\";\nimport { CustomRepositoryCannotInheritRepositoryError, CustomRepositoryNotFoundError, TreeRepositoryNotSupportedError, TypeORMError } from \"../error\";\nimport { AbstractRepository } from \"../repository/AbstractRepository\";\nimport { EntityPersistExecutor } from \"../persistence/EntityPersistExecutor\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { getMetadataArgsStorage } from \"../globals\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\n\nexport class EntityManager {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection, queryRunner) {\n    this[\"@instanceof\"] = Symbol.for(\"EntityManager\"); // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Once created and then reused by repositories.\n     */\n\n    this.repositories = [];\n    /**\n     * Once created and then reused by repositories.\n     */\n\n    this.treeRepositories = [];\n    /**\n     * Plain to object transformer used in create and merge operations.\n     */\n\n    this.plainObjectToEntityTransformer = new PlainObjectToNewEntityTransformer();\n    this.connection = connection;\n\n    if (queryRunner) {\n      this.queryRunner = queryRunner; // dynamic: this.queryRunner = manager;\n\n      ObjectUtils.assign(this.queryRunner, {\n        manager: this\n      });\n    }\n  }\n  /**\n   * Wraps given function execution (and all operations made there) in a transaction.\n   * All database operations must be executed using provided entity manager.\n   */\n\n\n  async transaction(isolationOrRunInTransaction, runInTransactionParam) {\n    const isolation = typeof isolationOrRunInTransaction === \"string\" ? isolationOrRunInTransaction : undefined;\n    const runInTransaction = typeof isolationOrRunInTransaction === \"function\" ? isolationOrRunInTransaction : runInTransactionParam;\n\n    if (!runInTransaction) {\n      throw new TypeORMError(`Transaction method requires callback in second parameter if isolation level is supplied.`);\n    }\n\n    if (this.queryRunner && this.queryRunner.isReleased) throw new QueryRunnerProviderAlreadyReleasedError(); // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n    // if its not defined we create a new query runner - single connection where we'll execute all our operations\n\n    const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n\n    try {\n      await queryRunner.startTransaction(isolation);\n      const result = await runInTransaction(queryRunner.manager);\n      await queryRunner.commitTransaction();\n      return result;\n    } catch (err) {\n      try {\n        // we throw original error even if rollback thrown an error\n        await queryRunner.rollbackTransaction();\n      } catch (rollbackError) {}\n\n      throw err;\n    } finally {\n      if (!this.queryRunner) // if we used a new query runner provider then release it\n        await queryRunner.release();\n    }\n  }\n  /**\n   * Executes raw SQL query and returns raw database results.\n   */\n\n\n  async query(query, parameters) {\n    return this.connection.query(query, parameters, this.queryRunner);\n  }\n  /**\n   * Creates a new query builder that can be used to build a SQL query.\n   */\n\n\n  createQueryBuilder(entityClass, alias, queryRunner) {\n    if (alias) {\n      return this.connection.createQueryBuilder(entityClass, alias, queryRunner || this.queryRunner);\n    } else {\n      return this.connection.createQueryBuilder(entityClass || queryRunner || this.queryRunner);\n    }\n  }\n  /**\n   * Checks if entity has an id by its Function type or schema name.\n   */\n\n\n  hasId(targetOrEntity, maybeEntity) {\n    const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n    const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n    const metadata = this.connection.getMetadata(target);\n    return metadata.hasId(entity);\n  }\n  /**\n   * Gets entity mixed id.\n   */\n\n\n  getId(targetOrEntity, maybeEntity) {\n    const target = arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor;\n    const entity = arguments.length === 2 ? maybeEntity : targetOrEntity;\n    const metadata = this.connection.getMetadata(target);\n    return metadata.getEntityIdMixedMap(entity);\n  }\n  /**\n   * Creates a new entity instance or instances.\n   * Can copy properties from the given object into new entities.\n   */\n\n\n  create(entityClass, plainObjectOrObjects) {\n    const metadata = this.connection.getMetadata(entityClass);\n    if (!plainObjectOrObjects) return metadata.create(this.queryRunner);\n    if (Array.isArray(plainObjectOrObjects)) return plainObjectOrObjects.map(plainEntityLike => this.create(entityClass, plainEntityLike));\n    const mergeIntoEntity = metadata.create(this.queryRunner);\n    this.plainObjectToEntityTransformer.transform(mergeIntoEntity, plainObjectOrObjects, metadata, true);\n    return mergeIntoEntity;\n  }\n  /**\n   * Merges two entities into one new entity.\n   */\n\n\n  merge(entityClass, mergeIntoEntity) {\n    // todo: throw exception if entity manager is released\n    const metadata = this.connection.getMetadata(entityClass);\n\n    for (var _len = arguments.length, entityLikes = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      entityLikes[_key - 2] = arguments[_key];\n    }\n\n    entityLikes.forEach(object => this.plainObjectToEntityTransformer.transform(mergeIntoEntity, object, metadata));\n    return mergeIntoEntity;\n  }\n  /**\n   * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n   * it loads it (and everything related to it), replaces all values with the new ones from the given object\n   * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n   * replaced from the new object.\n   */\n\n\n  async preload(entityClass, entityLike) {\n    const metadata = this.connection.getMetadata(entityClass);\n    const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer(this.connection.manager);\n    const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata);\n    if (transformedEntity) return this.merge(entityClass, transformedEntity, entityLike);\n    return undefined;\n  }\n  /**\n   * Saves a given entity in the database.\n   */\n\n\n  save(targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n    // normalize mixed parameters\n    let target = arguments.length > 1 && (typeof targetOrEntity === \"function\" || InstanceChecker.isEntitySchema(targetOrEntity) || typeof targetOrEntity === \"string\") ? targetOrEntity : undefined;\n    const entity = target ? maybeEntityOrOptions : targetOrEntity;\n    const options = target ? maybeOptions : maybeEntityOrOptions;\n    if (InstanceChecker.isEntitySchema(target)) target = target.options.name; // if user passed empty array of entities then we don't need to do anything\n\n    if (Array.isArray(entity) && entity.length === 0) return Promise.resolve(entity); // execute save operation\n\n    return new EntityPersistExecutor(this.connection, this.queryRunner, \"save\", target, entity, options).execute().then(() => entity);\n  }\n  /**\n   * Removes a given entity from the database.\n   */\n\n\n  remove(targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n    // normalize mixed parameters\n    const target = arguments.length > 1 && (typeof targetOrEntity === \"function\" || InstanceChecker.isEntitySchema(targetOrEntity) || typeof targetOrEntity === \"string\") ? targetOrEntity : undefined;\n    const entity = target ? maybeEntityOrOptions : targetOrEntity;\n    const options = target ? maybeOptions : maybeEntityOrOptions; // if user passed empty array of entities then we don't need to do anything\n\n    if (Array.isArray(entity) && entity.length === 0) return Promise.resolve(entity); // execute save operation\n\n    return new EntityPersistExecutor(this.connection, this.queryRunner, \"remove\", target, entity, options).execute().then(() => entity);\n  }\n  /**\n   * Records the delete date of one or many given entities.\n   */\n\n\n  softRemove(targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n    // normalize mixed parameters\n    let target = arguments.length > 1 && (typeof targetOrEntity === \"function\" || InstanceChecker.isEntitySchema(targetOrEntity) || typeof targetOrEntity === \"string\") ? targetOrEntity : undefined;\n    const entity = target ? maybeEntityOrOptions : targetOrEntity;\n    const options = target ? maybeOptions : maybeEntityOrOptions;\n    if (InstanceChecker.isEntitySchema(target)) target = target.options.name; // if user passed empty array of entities then we don't need to do anything\n\n    if (Array.isArray(entity) && entity.length === 0) return Promise.resolve(entity); // execute soft-remove operation\n\n    return new EntityPersistExecutor(this.connection, this.queryRunner, \"soft-remove\", target, entity, options).execute().then(() => entity);\n  }\n  /**\n   * Recovers one or many given entities.\n   */\n\n\n  recover(targetOrEntity, maybeEntityOrOptions, maybeOptions) {\n    // normalize mixed parameters\n    let target = arguments.length > 1 && (typeof targetOrEntity === \"function\" || InstanceChecker.isEntitySchema(targetOrEntity) || typeof targetOrEntity === \"string\") ? targetOrEntity : undefined;\n    const entity = target ? maybeEntityOrOptions : targetOrEntity;\n    const options = target ? maybeOptions : maybeEntityOrOptions;\n    if (InstanceChecker.isEntitySchema(target)) target = target.options.name; // if user passed empty array of entities then we don't need to do anything\n\n    if (Array.isArray(entity) && entity.length === 0) return Promise.resolve(entity); // execute recover operation\n\n    return new EntityPersistExecutor(this.connection, this.queryRunner, \"recover\", target, entity, options).execute().then(() => entity);\n  }\n  /**\n   * Inserts a given entity into the database.\n   * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient INSERT query.\n   * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n   * You can execute bulk inserts using this method.\n   */\n\n\n  async insert(target, entity) {\n    return this.createQueryBuilder().insert().into(target).values(entity).execute();\n  }\n\n  async upsert(target, entityOrEntities, conflictPathsOrOptions) {\n    const metadata = this.connection.getMetadata(target);\n    let options;\n\n    if (Array.isArray(conflictPathsOrOptions)) {\n      options = {\n        conflictPaths: conflictPathsOrOptions\n      };\n    } else {\n      options = conflictPathsOrOptions;\n    }\n\n    let entities;\n\n    if (!Array.isArray(entityOrEntities)) {\n      entities = [entityOrEntities];\n    } else {\n      entities = entityOrEntities;\n    }\n\n    const conflictColumns = metadata.mapPropertyPathsToColumns(options.conflictPaths);\n    const overwriteColumns = metadata.columns.filter(col => !conflictColumns.includes(col) && entities.some(entity => typeof col.getEntityValue(entity) !== \"undefined\"));\n    return this.createQueryBuilder().insert().into(target).values(entities).orUpdate([...conflictColumns, ...overwriteColumns].map(col => col.databaseName), conflictColumns.map(col => col.databaseName), {\n      skipUpdateIfNoValuesChanged: options.skipUpdateIfNoValuesChanged\n    }).execute();\n  }\n  /**\n   * Updates entity partially. Entity can be found by a given condition(s).\n   * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient UPDATE query.\n   * Does not check if entity exist in the database.\n   * Condition(s) cannot be empty.\n   */\n\n\n  update(target, criteria, partialEntity) {\n    // if user passed empty criteria or empty list of criterias, then throw an error\n    if (criteria === undefined || criteria === null || criteria === \"\" || Array.isArray(criteria) && criteria.length === 0) {\n      return Promise.reject(new TypeORMError(`Empty criteria(s) are not allowed for the update method.`));\n    }\n\n    if (typeof criteria === \"string\" || typeof criteria === \"number\" || criteria instanceof Date || Array.isArray(criteria)) {\n      return this.createQueryBuilder().update(target).set(partialEntity).whereInIds(criteria).execute();\n    } else {\n      return this.createQueryBuilder().update(target).set(partialEntity).where(criteria).execute();\n    }\n  }\n  /**\n   * Deletes entities by a given condition(s).\n   * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient DELETE query.\n   * Does not check if entity exist in the database.\n   * Condition(s) cannot be empty.\n   */\n\n\n  delete(targetOrEntity, criteria) {\n    // if user passed empty criteria or empty list of criterias, then throw an error\n    if (criteria === undefined || criteria === null || criteria === \"\" || Array.isArray(criteria) && criteria.length === 0) {\n      return Promise.reject(new TypeORMError(`Empty criteria(s) are not allowed for the delete method.`));\n    }\n\n    if (typeof criteria === \"string\" || typeof criteria === \"number\" || criteria instanceof Date || Array.isArray(criteria)) {\n      return this.createQueryBuilder().delete().from(targetOrEntity).whereInIds(criteria).execute();\n    } else {\n      return this.createQueryBuilder().delete().from(targetOrEntity).where(criteria).execute();\n    }\n  }\n  /**\n   * Records the delete date of entities by a given condition(s).\n   * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient DELETE query.\n   * Does not check if entity exist in the database.\n   * Condition(s) cannot be empty.\n   */\n\n\n  softDelete(targetOrEntity, criteria) {\n    // if user passed empty criteria or empty list of criterias, then throw an error\n    if (criteria === undefined || criteria === null || criteria === \"\" || Array.isArray(criteria) && criteria.length === 0) {\n      return Promise.reject(new TypeORMError(`Empty criteria(s) are not allowed for the delete method.`));\n    }\n\n    if (typeof criteria === \"string\" || typeof criteria === \"number\" || criteria instanceof Date || Array.isArray(criteria)) {\n      return this.createQueryBuilder().softDelete().from(targetOrEntity).whereInIds(criteria).execute();\n    } else {\n      return this.createQueryBuilder().softDelete().from(targetOrEntity).where(criteria).execute();\n    }\n  }\n  /**\n   * Restores entities by a given condition(s).\n   * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient DELETE query.\n   * Does not check if entity exist in the database.\n   * Condition(s) cannot be empty.\n   */\n\n\n  restore(targetOrEntity, criteria) {\n    // if user passed empty criteria or empty list of criterias, then throw an error\n    if (criteria === undefined || criteria === null || criteria === \"\" || Array.isArray(criteria) && criteria.length === 0) {\n      return Promise.reject(new TypeORMError(`Empty criteria(s) are not allowed for the delete method.`));\n    }\n\n    if (typeof criteria === \"string\" || typeof criteria === \"number\" || criteria instanceof Date || Array.isArray(criteria)) {\n      return this.createQueryBuilder().restore().from(targetOrEntity).whereInIds(criteria).execute();\n    } else {\n      return this.createQueryBuilder().restore().from(targetOrEntity).where(criteria).execute();\n    }\n  }\n  /**\n   * Counts entities that match given options.\n   * Useful for pagination.\n   */\n\n\n  count(entityClass, options) {\n    const metadata = this.connection.getMetadata(entityClass);\n    return this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(options) || metadata.name).setFindOptions(options || {}).getCount();\n  }\n  /**\n   * Counts entities that match given conditions.\n   * Useful for pagination.\n   */\n\n\n  countBy(entityClass, where) {\n    const metadata = this.connection.getMetadata(entityClass);\n    return this.createQueryBuilder(entityClass, metadata.name).setFindOptions({\n      where\n    }).getCount();\n  }\n  /**\n   * Finds entities that match given find options.\n   */\n\n\n  async find(entityClass, options) {\n    const metadata = this.connection.getMetadata(entityClass);\n    return this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(options) || metadata.name).setFindOptions(options || {}).getMany();\n  }\n  /**\n   * Finds entities that match given find options.\n   */\n\n\n  async findBy(entityClass, where) {\n    const metadata = this.connection.getMetadata(entityClass);\n    return this.createQueryBuilder(entityClass, metadata.name).setFindOptions({\n      where: where\n    }).getMany();\n  }\n  /**\n   * Finds entities that match given find options.\n   * Also counts all entities that match given conditions,\n   * but ignores pagination settings (from and take options).\n   */\n\n\n  findAndCount(entityClass, options) {\n    const metadata = this.connection.getMetadata(entityClass);\n    return this.createQueryBuilder(entityClass, FindOptionsUtils.extractFindManyOptionsAlias(options) || metadata.name).setFindOptions(options || {}).getManyAndCount();\n  }\n  /**\n   * Finds entities that match given WHERE conditions.\n   * Also counts all entities that match given conditions,\n   * but ignores pagination settings (from and take options).\n   */\n\n\n  findAndCountBy(entityClass, where) {\n    const metadata = this.connection.getMetadata(entityClass);\n    return this.createQueryBuilder(entityClass, metadata.name).setFindOptions({\n      where\n    }).getManyAndCount();\n  }\n  /**\n   * Finds entities with ids.\n   * Optionally find options or conditions can be applied.\n   *\n   * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n   *\n   * .findBy({\n   *     id: In([1, 2, 3])\n   * })\n   */\n\n\n  async findByIds(entityClass, ids) {\n    // if no ids passed, no need to execute a query - just return an empty array of values\n    if (!ids.length) return Promise.resolve([]);\n    const metadata = this.connection.getMetadata(entityClass);\n    return this.createQueryBuilder(entityClass, metadata.name).andWhereInIds(ids).getMany();\n  }\n  /**\n   * Finds first entity by a given find options.\n   * If entity was not found in the database - returns null.\n   */\n\n\n  async findOne(entityClass, options) {\n    const metadata = this.connection.getMetadata(entityClass); // prepare alias for built query\n\n    let alias = metadata.name;\n\n    if (options && options.join) {\n      alias = options.join.alias;\n    }\n\n    if (!options.where) {\n      throw new Error(`You must provide selection conditions in order to find a single row.`);\n    } // create query builder and apply find options\n\n\n    return this.createQueryBuilder(entityClass, alias).setFindOptions({ ...options,\n      take: 1\n    }).getOne();\n  }\n  /**\n   * Finds first entity that matches given where condition.\n   * If entity was not found in the database - returns null.\n   */\n\n\n  async findOneBy(entityClass, where) {\n    const metadata = this.connection.getMetadata(entityClass); // create query builder and apply find options\n\n    return this.createQueryBuilder(entityClass, metadata.name).setFindOptions({\n      where,\n      take: 1\n    }).getOne();\n  }\n  /**\n   * Finds first entity that matches given id.\n   * If entity was not found in the database - returns null.\n   *\n   * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n   *\n   * .findOneBy({\n   *     id: 1 // where \"id\" is your primary column name\n   * })\n   */\n\n\n  async findOneById(entityClass, id) {\n    const metadata = this.connection.getMetadata(entityClass); // create query builder and apply find options\n\n    return this.createQueryBuilder(entityClass, metadata.name).setFindOptions({\n      take: 1\n    }).whereInIds(metadata.ensureEntityIdMap(id)).getOne();\n  }\n  /**\n   * Finds first entity by a given find options.\n   * If entity was not found in the database - rejects with error.\n   */\n\n\n  async findOneOrFail(entityClass, options) {\n    return this.findOne(entityClass, options).then(value => {\n      if (value === null) {\n        return Promise.reject(new EntityNotFoundError(entityClass, options));\n      }\n\n      return Promise.resolve(value);\n    });\n  }\n  /**\n   * Finds first entity that matches given where condition.\n   * If entity was not found in the database - rejects with error.\n   */\n\n\n  async findOneByOrFail(entityClass, where) {\n    return this.findOneBy(entityClass, where).then(value => {\n      if (value === null) {\n        return Promise.reject(new EntityNotFoundError(entityClass, where));\n      }\n\n      return Promise.resolve(value);\n    });\n  }\n  /**\n   * Clears all the data from the given table (truncates/drops it).\n   *\n   * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n   * @see https://stackoverflow.com/a/5972738/925151\n   */\n\n\n  async clear(entityClass) {\n    const metadata = this.connection.getMetadata(entityClass);\n    const queryRunner = this.queryRunner || this.connection.createQueryRunner();\n\n    try {\n      return await queryRunner.clearTable(metadata.tablePath); // await is needed here because we are using finally\n    } finally {\n      if (!this.queryRunner) await queryRunner.release();\n    }\n  }\n  /**\n   * Increments some column by provided value of the entities matched given conditions.\n   */\n\n\n  async increment(entityClass, conditions, propertyPath, value) {\n    const metadata = this.connection.getMetadata(entityClass);\n    const column = metadata.findColumnWithPropertyPath(propertyPath);\n    if (!column) throw new TypeORMError(`Column ${propertyPath} was not found in ${metadata.targetName} entity.`);\n    if (isNaN(Number(value))) throw new TypeORMError(`Value \"${value}\" is not a number.`); // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n\n    const values = propertyPath.split(\".\").reduceRight((value, key) => ({\n      [key]: value\n    }), () => this.connection.driver.escape(column.databaseName) + \" + \" + value);\n    return this.createQueryBuilder(entityClass, \"entity\").update(entityClass).set(values).where(conditions).execute();\n  }\n  /**\n   * Decrements some column by provided value of the entities matched given conditions.\n   */\n\n\n  async decrement(entityClass, conditions, propertyPath, value) {\n    const metadata = this.connection.getMetadata(entityClass);\n    const column = metadata.findColumnWithPropertyPath(propertyPath);\n    if (!column) throw new TypeORMError(`Column ${propertyPath} was not found in ${metadata.targetName} entity.`);\n    if (isNaN(Number(value))) throw new TypeORMError(`Value \"${value}\" is not a number.`); // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n\n    const values = propertyPath.split(\".\").reduceRight((value, key) => ({\n      [key]: value\n    }), () => this.connection.driver.escape(column.databaseName) + \" - \" + value);\n    return this.createQueryBuilder(entityClass, \"entity\").update(entityClass).set(values).where(conditions).execute();\n  }\n  /**\n   * Gets repository for the given entity class or name.\n   * If single database connection mode is used, then repository is obtained from the\n   * repository aggregator, where each repository is individually created for this entity manager.\n   * When single database connection is not used, repository is being obtained from the connection.\n   */\n\n\n  getRepository(target) {\n    // find already created repository instance and return it if found\n    const repository = this.repositories.find(repository => repository.target === target);\n    if (repository) return repository; // if repository was not found then create it, store its instance and return it\n\n    if (this.connection.driver.options.type === \"mongodb\") {\n      const newRepository = new MongoRepository(target, this, this.queryRunner);\n      this.repositories.push(newRepository);\n      return newRepository;\n    } else {\n      const newRepository = new Repository(target, this, this.queryRunner);\n      this.repositories.push(newRepository);\n      return newRepository;\n    }\n  }\n  /**\n   * Gets tree repository for the given entity class or name.\n   * If single database connection mode is used, then repository is obtained from the\n   * repository aggregator, where each repository is individually created for this entity manager.\n   * When single database connection is not used, repository is being obtained from the connection.\n   */\n\n\n  getTreeRepository(target) {\n    // tree tables aren't supported by some drivers (mongodb)\n    if (this.connection.driver.treeSupport === false) throw new TreeRepositoryNotSupportedError(this.connection.driver); // find already created repository instance and return it if found\n\n    const repository = this.treeRepositories.find(repository => repository.target === target);\n    if (repository) return repository; // check if repository is real tree repository\n\n    const newRepository = new TreeRepository(target, this, this.queryRunner);\n    this.treeRepositories.push(newRepository);\n    return newRepository;\n  }\n  /**\n   * Gets mongodb repository for the given entity class.\n   */\n\n\n  getMongoRepository(target) {\n    return this.connection.getMongoRepository(target);\n  }\n  /**\n   * Creates a new repository instance out of a given Repository and\n   * sets current EntityManager instance to it. Used to work with custom repositories\n   * in transactions.\n   */\n\n\n  withRepository(repository) {\n    const repositoryConstructor = repository.constructor;\n    const {\n      target,\n      manager,\n      queryRunner,\n      ...otherRepositoryProperties\n    } = repository;\n    return Object.assign(new repositoryConstructor(repository.target, this), { ...otherRepositoryProperties\n    });\n  }\n  /**\n   * Gets custom entity repository marked with @EntityRepository decorator.\n   *\n   * @deprecated use Repository.extend to create custom repositories\n   */\n\n\n  getCustomRepository(customRepository) {\n    const entityRepositoryMetadataArgs = getMetadataArgsStorage().entityRepositories.find(repository => {\n      return repository.target === (typeof customRepository === \"function\" ? customRepository : customRepository.constructor);\n    });\n    if (!entityRepositoryMetadataArgs) throw new CustomRepositoryNotFoundError(customRepository);\n    const entityMetadata = entityRepositoryMetadataArgs.entity ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity) : undefined;\n    const entityRepositoryInstance = new entityRepositoryMetadataArgs.target(this, entityMetadata); // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n    // however we need these properties for internal work of the class\n\n    if (entityRepositoryInstance instanceof AbstractRepository) {\n      if (!entityRepositoryInstance[\"manager\"]) entityRepositoryInstance[\"manager\"] = this;\n    } else {\n      if (!entityMetadata) throw new CustomRepositoryCannotInheritRepositoryError(customRepository);\n      entityRepositoryInstance[\"manager\"] = this;\n      entityRepositoryInstance[\"metadata\"] = entityMetadata;\n    }\n\n    return entityRepositoryInstance;\n  }\n  /**\n   * Releases all resources used by entity manager.\n   * This is used when entity manager is created with a single query runner,\n   * and this single query runner needs to be released after job with entity manager is done.\n   */\n\n\n  async release() {\n    if (!this.queryRunner) throw new NoNeedToReleaseEntityManagerError();\n    return this.queryRunner.release();\n  }\n\n}","map":{"version":3,"mappings":"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","names":["EntityNotFoundError","QueryRunnerProviderAlreadyReleasedError","NoNeedToReleaseEntityManagerError","MongoRepository","TreeRepository","Repository","FindOptionsUtils","PlainObjectToNewEntityTransformer","PlainObjectToDatabaseEntityTransformer","CustomRepositoryCannotInheritRepositoryError","CustomRepositoryNotFoundError","TreeRepositoryNotSupportedError","TypeORMError","AbstractRepository","EntityPersistExecutor","ObjectUtils","getMetadataArgsStorage","InstanceChecker","EntityManager","constructor","connection","queryRunner","Symbol","for","assign","manager","transaction","isolationOrRunInTransaction","runInTransactionParam","isolation","undefined","runInTransaction","isReleased","createQueryRunner","startTransaction","result","commitTransaction","err","rollbackTransaction","rollbackError","release","query","parameters","createQueryBuilder","entityClass","alias","hasId","targetOrEntity","maybeEntity","target","arguments","length","entity","metadata","getMetadata","getId","getEntityIdMixedMap","create","plainObjectOrObjects","Array","isArray","map","plainEntityLike","mergeIntoEntity","plainObjectToEntityTransformer","transform","merge","entityLikes","forEach","object","preload","entityLike","plainObjectToDatabaseEntityTransformer","transformedEntity","save","maybeEntityOrOptions","maybeOptions","isEntitySchema","options","name","Promise","resolve","execute","then","remove","softRemove","recover","insert","into","values","upsert","entityOrEntities","conflictPathsOrOptions","conflictPaths","entities","conflictColumns","mapPropertyPathsToColumns","overwriteColumns","columns","filter","col","includes","some","getEntityValue","orUpdate","databaseName","skipUpdateIfNoValuesChanged","update","criteria","partialEntity","reject","Date","set","whereInIds","where","delete","from","softDelete","restore","count","extractFindManyOptionsAlias","setFindOptions","getCount","countBy","find","getMany","findBy","findAndCount","getManyAndCount","findAndCountBy","findByIds","ids","andWhereInIds","findOne","join","Error","take","getOne","findOneBy","findOneById","id","ensureEntityIdMap","findOneOrFail","value","findOneByOrFail","clear","clearTable","tablePath","increment","conditions","propertyPath","column","findColumnWithPropertyPath","targetName","isNaN","Number","split","reduceRight","key","driver","escape","decrement","getRepository","repository","repositories","type","newRepository","push","getTreeRepository","treeSupport","treeRepositories","getMongoRepository","withRepository","repositoryConstructor","otherRepositoryProperties","Object","getCustomRepository","customRepository","entityRepositoryMetadataArgs","entityRepositories","entityMetadata","entityRepositoryInstance"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\entity-manager\\EntityManager.ts"],"sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { EntityNotFoundError } from \"../error/EntityNotFoundError\"\nimport { QueryRunnerProviderAlreadyReleasedError } from \"../error/QueryRunnerProviderAlreadyReleasedError\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { RemoveOptions } from \"../repository/RemoveOptions\"\nimport { SaveOptions } from \"../repository/SaveOptions\"\nimport { NoNeedToReleaseEntityManagerError } from \"../error/NoNeedToReleaseEntityManagerError\"\nimport { MongoRepository } from \"../repository/MongoRepository\"\nimport { TreeRepository } from \"../repository/TreeRepository\"\nimport { Repository } from \"../repository/Repository\"\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\nimport { PlainObjectToNewEntityTransformer } from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\"\nimport { PlainObjectToDatabaseEntityTransformer } from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\"\nimport {\n    CustomRepositoryCannotInheritRepositoryError,\n    CustomRepositoryNotFoundError,\n    TreeRepositoryNotSupportedError,\n    TypeORMError,\n} from \"../error\"\nimport { AbstractRepository } from \"../repository/AbstractRepository\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { EntityPersistExecutor } from \"../persistence/EntityPersistExecutor\"\nimport { ObjectID } from \"../driver/mongodb/typings\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { IsolationLevel } from \"../driver/types/IsolationLevel\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { getMetadataArgsStorage } from \"../globals\"\nimport { UpsertOptions } from \"../repository/UpsertOptions\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"EntityManager\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this entity manager.\n     */\n    readonly connection: DataSource\n\n    /**\n     * Custom query runner to be used for operations in this entity manager.\n     * Used only in non-global entity manager.\n     */\n    readonly queryRunner?: QueryRunner\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Once created and then reused by repositories.\n     */\n    protected repositories: Repository<any>[] = []\n\n    /**\n     * Once created and then reused by repositories.\n     */\n    protected treeRepositories: TreeRepository<any>[] = []\n\n    /**\n     * Plain to object transformer used in create and merge operations.\n     */\n    protected plainObjectToEntityTransformer =\n        new PlainObjectToNewEntityTransformer()\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource, queryRunner?: QueryRunner) {\n        this.connection = connection\n        if (queryRunner) {\n            this.queryRunner = queryRunner\n            // dynamic: this.queryRunner = manager;\n            ObjectUtils.assign(this.queryRunner, { manager: this })\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationLevel: IsolationLevel,\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationOrRunInTransaction:\n            | IsolationLevel\n            | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T> {\n        const isolation =\n            typeof isolationOrRunInTransaction === \"string\"\n                ? isolationOrRunInTransaction\n                : undefined\n        const runInTransaction =\n            typeof isolationOrRunInTransaction === \"function\"\n                ? isolationOrRunInTransaction\n                : runInTransactionParam\n\n        if (!runInTransaction) {\n            throw new TypeORMError(\n                `Transaction method requires callback in second parameter if isolation level is supplied.`,\n            )\n        }\n\n        if (this.queryRunner && this.queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n\n        try {\n            await queryRunner.startTransaction(isolation)\n            const result = await runInTransaction(queryRunner.manager)\n            await queryRunner.commitTransaction()\n            return result\n        } catch (err) {\n            try {\n                // we throw original error even if rollback thrown an error\n                await queryRunner.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw err\n        } finally {\n            if (!this.queryRunner)\n                // if we used a new query runner provider then release it\n                await queryRunner.release()\n        }\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        return this.connection.query(query, parameters, this.queryRunner)\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        if (alias) {\n            return this.connection.createQueryBuilder(\n                entityClass as EntityTarget<Entity>,\n                alias,\n                queryRunner || this.queryRunner,\n            )\n        } else {\n            return this.connection.createQueryBuilder(\n                (entityClass as QueryRunner | undefined) ||\n                    queryRunner ||\n                    this.queryRunner,\n            )\n        }\n    }\n\n    /**\n     * Checks if entity has an id.\n     */\n    hasId(entity: any): boolean\n\n    /**\n     * Checks if entity of given schema name has an id.\n     */\n    hasId(target: Function | string, entity: any): boolean\n\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    hasId(targetOrEntity: any | Function | string, maybeEntity?: any): boolean {\n        const target =\n            arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity\n        const metadata = this.connection.getMetadata(target)\n        return metadata.hasId(entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: any): any\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(target: EntityTarget<any>, entity: any): any\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(targetOrEntity: any | EntityTarget<any>, maybeEntity?: any): any {\n        const target =\n            arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity\n        const metadata = this.connection.getMetadata(target)\n        return metadata.getEntityIdMixedMap(entity)\n    }\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObject?: DeepPartial<Entity>,\n    ): Entity\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObjects?: DeepPartial<Entity>[],\n    ): Entity[]\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObjectOrObjects?: DeepPartial<Entity> | DeepPartial<Entity>[],\n    ): Entity | Entity[] {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        if (!plainObjectOrObjects) return metadata.create(this.queryRunner)\n\n        if (Array.isArray(plainObjectOrObjects))\n            return (plainObjectOrObjects as DeepPartial<Entity>[]).map(\n                (plainEntityLike) => this.create(entityClass, plainEntityLike),\n            )\n\n        const mergeIntoEntity = metadata.create(this.queryRunner)\n        this.plainObjectToEntityTransformer.transform(\n            mergeIntoEntity,\n            plainObjectOrObjects,\n            metadata,\n            true,\n        )\n        return mergeIntoEntity\n    }\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        mergeIntoEntity: Entity,\n        ...entityLikes: DeepPartial<Entity>[]\n    ): Entity {\n        // todo: throw exception if entity manager is released\n        const metadata = this.connection.getMetadata(entityClass)\n        entityLikes.forEach((object) =>\n            this.plainObjectToEntityTransformer.transform(\n                mergeIntoEntity,\n                object,\n                metadata,\n            ),\n        )\n        return mergeIntoEntity\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const plainObjectToDatabaseEntityTransformer =\n            new PlainObjectToDatabaseEntityTransformer(this.connection.manager)\n        const transformedEntity =\n            await plainObjectToDatabaseEntityTransformer.transform(\n                entityLike,\n                metadata,\n            )\n        if (transformedEntity)\n            return this.merge(\n                entityClass as any,\n                transformedEntity as Entity,\n                entityLike,\n            )\n\n        return undefined\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Saves a given entity in the database.\n     */\n    save<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute save operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"save\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity, options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: Entity,\n        options?: RemoveOptions,\n    ): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: Entity[],\n        options?: RemoveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity extends ObjectLiteral>(\n        targetOrEntity: (Entity | Entity[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: Entity | Entity[],\n        maybeOptions?: RemoveOptions,\n    ): Promise<Entity | Entity[]> {\n        // normalize mixed parameters\n        const target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: Entity | Entity[] = target\n            ? (maybeEntityOrOptions as Entity | Entity[])\n            : (targetOrEntity as Entity | Entity[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute save operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"remove\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity>(\n        entities: Entity[],\n        options?: SaveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute soft-remove operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"soft-remove\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity>(\n        entities: Entity[],\n        options?: SaveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute recover operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"recover\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entity)\n            .execute()\n    }\n\n    async upsert<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        entityOrEntities:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<Entity>,\n    ): Promise<InsertResult> {\n        const metadata = this.connection.getMetadata(target)\n\n        let options: UpsertOptions<Entity>\n\n        if (Array.isArray(conflictPathsOrOptions)) {\n            options = {\n                conflictPaths: conflictPathsOrOptions,\n            }\n        } else {\n            options = conflictPathsOrOptions\n        }\n\n        let entities: QueryDeepPartialEntity<Entity>[]\n\n        if (!Array.isArray(entityOrEntities)) {\n            entities = [entityOrEntities]\n        } else {\n            entities = entityOrEntities\n        }\n\n        const conflictColumns = metadata.mapPropertyPathsToColumns(\n            options.conflictPaths,\n        )\n\n        const overwriteColumns = metadata.columns.filter(\n            (col) =>\n                !conflictColumns.includes(col) &&\n                entities.some(\n                    (entity) =>\n                        typeof col.getEntityValue(entity) !== \"undefined\",\n                ),\n        )\n\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entities)\n            .orUpdate(\n                [...conflictColumns, ...overwriteColumns].map(\n                    (col) => col.databaseName,\n                ),\n                conflictColumns.map((col) => col.databaseName),\n                {\n                    skipUpdateIfNoValuesChanged:\n                        options.skipUpdateIfNoValuesChanged,\n                },\n            )\n            .execute()\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    update<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectID\n            | ObjectID[]\n            | any,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the update method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Deletes entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    delete<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectID\n            | ObjectID[]\n            | any,\n    ): Promise<DeleteResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Records the delete date of entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    softDelete<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectID\n            | ObjectID[]\n            | any,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Restores entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    restore<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectID\n            | ObjectID[]\n            | any,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(\n            entityClass,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getCount()\n    }\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    countBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .getCount()\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async find<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getMany()\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async findBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .setFindOptions({ where: where })\n            .getMany()\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getManyAndCount()\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .setFindOptions({ where })\n            .getManyAndCount()\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    async findByIds<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        ids: any[],\n    ): Promise<Entity[]> {\n        // if no ids passed, no need to execute a query - just return an empty array of values\n        if (!ids.length) return Promise.resolve([])\n\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .andWhereInIds(ids)\n            .getMany()\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - returns null.\n     */\n    async findOne<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options: FindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // prepare alias for built query\n        let alias: string = metadata.name\n        if (options && options.join) {\n            alias = options.join.alias\n        }\n\n        if (!options.where) {\n            throw new Error(\n                `You must provide selection conditions in order to find a single row.`,\n            )\n        }\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, alias)\n            .setFindOptions({\n                ...options,\n                take: 1,\n            })\n            .getOne()\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - returns null.\n     */\n    async findOneBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, metadata.name)\n            .setFindOptions({\n                where,\n                take: 1,\n            })\n            .getOne()\n    }\n\n    /**\n     * Finds first entity that matches given id.\n     * If entity was not found in the database - returns null.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        id: number | string | Date | ObjectID,\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, metadata.name)\n            .setFindOptions({\n                take: 1,\n            })\n            .whereInIds(metadata.ensureEntityIdMap(id))\n            .getOne()\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options: FindOneOptions<Entity>,\n    ): Promise<Entity> {\n        return this.findOne<Entity>(entityClass as any, options).then(\n            (value) => {\n                if (value === null) {\n                    return Promise.reject(\n                        new EntityNotFoundError(entityClass, options),\n                    )\n                }\n                return Promise.resolve(value)\n            },\n        )\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity> {\n        return this.findOneBy<Entity>(entityClass as any, where).then(\n            (value) => {\n                if (value === null) {\n                    return Promise.reject(\n                        new EntityNotFoundError(entityClass, where),\n                    )\n                }\n                return Promise.resolve(value)\n            },\n        )\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    async clear<Entity>(entityClass: EntityTarget<Entity>): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n        try {\n            return await queryRunner.clearTable(metadata.tablePath) // await is needed here because we are using finally\n        } finally {\n            if (!this.queryRunner) await queryRunner.release()\n        }\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    async increment<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        conditions: any,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.findColumnWithPropertyPath(propertyPath)\n        if (!column)\n            throw new TypeORMError(\n                `Column ${propertyPath} was not found in ${metadata.targetName} entity.`,\n            )\n\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`)\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value } as any),\n                () =>\n                    this.connection.driver.escape(column.databaseName) +\n                    \" + \" +\n                    value,\n            )\n\n        return this.createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute()\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    async decrement<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        conditions: any,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.findColumnWithPropertyPath(propertyPath)\n        if (!column)\n            throw new TypeORMError(\n                `Column ${propertyPath} was not found in ${metadata.targetName} entity.`,\n            )\n\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`)\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value } as any),\n                () =>\n                    this.connection.driver.escape(column.databaseName) +\n                    \" - \" +\n                    value,\n            )\n\n        return this.createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute()\n    }\n\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): Repository<Entity> {\n        // find already created repository instance and return it if found\n        const repository = this.repositories.find(\n            (repository) => repository.target === target,\n        )\n        if (repository) return repository\n\n        // if repository was not found then create it, store its instance and return it\n        if (this.connection.driver.options.type === \"mongodb\") {\n            const newRepository = new MongoRepository(\n                target,\n                this,\n                this.queryRunner,\n            )\n            this.repositories.push(newRepository as any)\n            return newRepository\n        } else {\n            const newRepository = new Repository<any>(\n                target,\n                this,\n                this.queryRunner,\n            )\n            this.repositories.push(newRepository)\n            return newRepository\n        }\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): TreeRepository<Entity> {\n        // tree tables aren't supported by some drivers (mongodb)\n        if (this.connection.driver.treeSupport === false)\n            throw new TreeRepositoryNotSupportedError(this.connection.driver)\n\n        // find already created repository instance and return it if found\n        const repository = this.treeRepositories.find(\n            (repository) => repository.target === target,\n        )\n        if (repository) return repository\n\n        // check if repository is real tree repository\n        const newRepository = new TreeRepository(target, this, this.queryRunner)\n        this.treeRepositories.push(newRepository)\n        return newRepository\n    }\n\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    getMongoRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): MongoRepository<Entity> {\n        return this.connection.getMongoRepository<Entity>(target)\n    }\n\n    /**\n     * Creates a new repository instance out of a given Repository and\n     * sets current EntityManager instance to it. Used to work with custom repositories\n     * in transactions.\n     */\n    withRepository<Entity extends ObjectLiteral, R extends Repository<any>>(\n        repository: R & Repository<Entity>,\n    ): R {\n        const repositoryConstructor =\n            repository.constructor as typeof Repository\n        const { target, manager, queryRunner, ...otherRepositoryProperties } =\n            repository\n        return Object.assign(\n            new repositoryConstructor(repository.target, this) as R,\n            {\n                ...otherRepositoryProperties,\n            },\n        )\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated use Repository.extend to create custom repositories\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        const entityRepositoryMetadataArgs =\n            getMetadataArgsStorage().entityRepositories.find((repository) => {\n                return (\n                    repository.target ===\n                    (typeof customRepository === \"function\"\n                        ? customRepository\n                        : (customRepository as any).constructor)\n                )\n            })\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository)\n\n        const entityMetadata = entityRepositoryMetadataArgs.entity\n            ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity)\n            : undefined\n        const entityRepositoryInstance =\n            new (entityRepositoryMetadataArgs.target as any)(\n                this,\n                entityMetadata,\n            )\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository) {\n            if (!(entityRepositoryInstance as any)[\"manager\"])\n                (entityRepositoryInstance as any)[\"manager\"] = this\n        } else {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError(\n                    customRepository,\n                )\n            ;(entityRepositoryInstance as any)[\"manager\"] = this\n            ;(entityRepositoryInstance as any)[\"metadata\"] = entityMetadata\n        }\n\n        return entityRepositoryInstance\n    }\n\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    async release(): Promise<void> {\n        if (!this.queryRunner) throw new NoNeedToReleaseEntityManagerError()\n\n        return this.queryRunner.release()\n    }\n}\n"]},"metadata":{},"sourceType":"module"}