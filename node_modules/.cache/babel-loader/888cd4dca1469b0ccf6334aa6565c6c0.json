{"ast":null,"code":"import { TypeORMError } from \"../error\";\n/**\n * Unique metadata contains all information about table's unique constraints.\n */\n\nexport class UniqueMetadata {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(options) {\n    /**\n     * Unique columns.\n     */\n    this.columns = [];\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n\n    this.columnNamesWithOrderingMap = {};\n    this.entityMetadata = options.entityMetadata;\n    this.embeddedMetadata = options.embeddedMetadata;\n    if (options.columns) this.columns = options.columns;\n\n    if (options.args) {\n      this.target = options.args.target;\n      this.givenName = options.args.name;\n      this.givenColumnNames = options.args.columns;\n      this.deferrable = options.args.deferrable;\n    }\n  } // ---------------------------------------------------------------------\n  // Public Build Methods\n  // ---------------------------------------------------------------------\n\n  /**\n   * Builds some depend unique constraint properties.\n   * Must be called after all entity metadata's properties map, columns and relations are built.\n   */\n\n\n  build(namingStrategy) {\n    const map = {}; // if columns already an array of string then simply return it\n\n    if (this.givenColumnNames) {\n      let columnPropertyPaths = [];\n\n      if (Array.isArray(this.givenColumnNames)) {\n        columnPropertyPaths = this.givenColumnNames.map(columnName => {\n          if (this.embeddedMetadata) return this.embeddedMetadata.propertyPath + \".\" + columnName;\n          return columnName.trim();\n        });\n        columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);\n      } else {\n        // if columns is a function that returns array of field names then execute it and get columns names from it\n        const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n\n        if (Array.isArray(columnsFnResult)) {\n          columnPropertyPaths = columnsFnResult.map(i => String(i));\n          columnPropertyPaths.forEach(name => map[name] = 1);\n        } else {\n          columnPropertyPaths = Object.keys(columnsFnResult).map(i => String(i));\n          Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\n        }\n      }\n\n      this.columns = columnPropertyPaths.map(propertyName => {\n        const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyName);\n\n        if (columnWithSameName) {\n          return [columnWithSameName];\n        }\n\n        const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyName);\n\n        if (relationWithSameName) {\n          return relationWithSameName.joinColumns;\n        }\n\n        const indexName = this.givenName ? '\"' + this.givenName + '\" ' : \"\";\n        const entityName = this.entityMetadata.targetName;\n        throw new TypeORMError(`Unique constraint ${indexName}contains column that is missing in the entity (${entityName}): ` + propertyName);\n      }).reduce((a, b) => a.concat(b));\n    }\n\n    this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n      const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\n      if (column) updatedMap[column.databasePath] = map[key];\n      return updatedMap;\n    }, {});\n    this.name = this.givenName ? this.givenName : namingStrategy.uniqueConstraintName(this.entityMetadata.tableName, this.columns.map(column => column.databaseName));\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TypeORMError","UniqueMetadata","constructor","options","entityMetadata","embeddedMetadata","columns","args","target","givenName","name","givenColumnNames","deferrable","build","namingStrategy","map","columnPropertyPaths","Array","isArray","columnName","propertyPath","trim","forEach","columnsFnResult","propertiesMap","i","String","Object","keys","propertyName","columnWithSameName","find","column","relationWithSameName","relations","relation","isWithJoinColumn","joinColumns","indexName","entityName","targetName","reduce","a","b","concat","columnNamesWithOrderingMap","updatedMap","key","databasePath","uniqueConstraintName","tableName","databaseName"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\metadata\\UniqueMetadata.ts"],"sourcesContent":["import { EmbeddedMetadata } from \"./EmbeddedMetadata\"\nimport { EntityMetadata } from \"./EntityMetadata\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { ColumnMetadata } from \"./ColumnMetadata\"\nimport { UniqueMetadataArgs } from \"../metadata-args/UniqueMetadataArgs\"\nimport { TypeORMError } from \"../error\"\nimport { DeferrableType } from \"./types/DeferrableType\"\n\n/**\n * Unique metadata contains all information about table's unique constraints.\n */\nexport class UniqueMetadata {\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this unique constraint is applied.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Embedded metadata if this unique was applied on embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function | string\n\n    /**\n     * Unique columns.\n     */\n    columns: ColumnMetadata[] = []\n\n    /**\n     * Indicate if unique constraints can be deferred.\n     */\n    deferrable?: DeferrableType\n\n    /**\n     * User specified unique constraint name.\n     */\n    givenName?: string\n\n    /**\n     * User specified column names.\n     */\n    givenColumnNames?:\n        | ((object?: any) => any[] | { [key: string]: number })\n        | string[]\n\n    /**\n     * Final unique constraint name.\n     * If unique constraint name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If unique constraint name was not given then its generated.\n     */\n    name: string\n\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    columnNamesWithOrderingMap: { [key: string]: number } = {}\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        embeddedMetadata?: EmbeddedMetadata\n        columns?: ColumnMetadata[]\n        args?: UniqueMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.embeddedMetadata = options.embeddedMetadata\n        if (options.columns) this.columns = options.columns\n\n        if (options.args) {\n            this.target = options.args.target\n            this.givenName = options.args.name\n            this.givenColumnNames = options.args.columns\n            this.deferrable = options.args.deferrable\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend unique constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        const map: { [key: string]: number } = {}\n\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths: string[] = []\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map(\n                    (columnName) => {\n                        if (this.embeddedMetadata)\n                            return (\n                                this.embeddedMetadata.propertyPath +\n                                \".\" +\n                                columnName\n                            )\n\n                        return columnName.trim()\n                    },\n                )\n                columnPropertyPaths.forEach(\n                    (propertyPath) => (map[propertyPath] = 1),\n                )\n            } else {\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(\n                    this.entityMetadata.propertiesMap,\n                )\n                if (Array.isArray(columnsFnResult)) {\n                    columnPropertyPaths = columnsFnResult.map((i: any) =>\n                        String(i),\n                    )\n                    columnPropertyPaths.forEach((name) => (map[name] = 1))\n                } else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map(\n                        (i: any) => String(i),\n                    )\n                    Object.keys(columnsFnResult).forEach(\n                        (columnName) =>\n                            (map[columnName] = columnsFnResult[columnName]),\n                    )\n                }\n            }\n\n            this.columns = columnPropertyPaths\n                .map((propertyName) => {\n                    const columnWithSameName = this.entityMetadata.columns.find(\n                        (column) => column.propertyPath === propertyName,\n                    )\n                    if (columnWithSameName) {\n                        return [columnWithSameName]\n                    }\n                    const relationWithSameName =\n                        this.entityMetadata.relations.find(\n                            (relation) =>\n                                relation.isWithJoinColumn &&\n                                relation.propertyName === propertyName,\n                        )\n                    if (relationWithSameName) {\n                        return relationWithSameName.joinColumns\n                    }\n                    const indexName = this.givenName\n                        ? '\"' + this.givenName + '\" '\n                        : \"\"\n                    const entityName = this.entityMetadata.targetName\n                    throw new TypeORMError(\n                        `Unique constraint ${indexName}contains column that is missing in the entity (${entityName}): ` +\n                            propertyName,\n                    )\n                })\n                .reduce((a, b) => a.concat(b))\n        }\n\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce(\n            (updatedMap, key) => {\n                const column = this.entityMetadata.columns.find(\n                    (column) => column.propertyPath === key,\n                )\n                if (column) updatedMap[column.databasePath] = map[key]\n\n                return updatedMap\n            },\n            {} as { [key: string]: number },\n        )\n\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.uniqueConstraintName(\n                  this.entityMetadata.tableName,\n                  this.columns.map((column) => column.databaseName),\n              )\n        return this\n    }\n}\n"]},"metadata":{},"sourceType":"module"}