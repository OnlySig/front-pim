{"ast":null,"code":"import { getMetadataArgsStorage } from \"../globals\";\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can manage some specific entity or just be generic.\n * Custom repository optionally can extend AbstractRepository, Repository or TreeRepository.\n *\n * @deprecated use Repository.extend function to create a custom repository\n */\n\nexport function EntityRepository(entity) {\n  return function (target) {\n    getMetadataArgsStorage().entityRepositories.push({\n      target: target,\n      entity: entity\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,sBAAT,QAAuC,YAAvC;AAIA;;;;;;;;AAOA,OAAM,SAAUC,gBAAV,CACFC,MADE,EACmC;EAErC,OAAO,UAAUC,MAAV,EAA0B;IAC7BH,sBAAsB,GAAGI,kBAAzB,CAA4CC,IAA5C,CAAiD;MAC7CF,MAAM,EAAEA,MADqC;MAE7CD,MAAM,EAAEA;IAFqC,CAAjD;EAIH,CALD;AAMH","names":["getMetadataArgsStorage","EntityRepository","entity","target","entityRepositories","push"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\decorator\\EntityRepository.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../globals\"\nimport { EntityRepositoryMetadataArgs } from \"../metadata-args/EntityRepositoryMetadataArgs\"\nimport { EntitySchema } from \"../entity-schema/EntitySchema\"\n\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can manage some specific entity or just be generic.\n * Custom repository optionally can extend AbstractRepository, Repository or TreeRepository.\n *\n * @deprecated use Repository.extend function to create a custom repository\n */\nexport function EntityRepository(\n    entity?: Function | EntitySchema<any>,\n): ClassDecorator {\n    return function (target: Function) {\n        getMetadataArgsStorage().entityRepositories.push({\n            target: target,\n            entity: entity,\n        } as EntityRepositoryMetadataArgs)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}