{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * A one-to-many relation allows creating the type of relation where Entity1 can have multiple instances of Entity2,\n * but Entity2 has only one Entity1. Entity2 is the owner of the relationship, and stores the id of Entity1 on its\n * side of the relation.\n */\n\nexport function OneToMany(typeFunctionOrTarget, inverseSide, options) {\n  return function (object, propertyName) {\n    if (!options) options = {}; // Now try to determine if it is a lazy relation.\n\n    let isLazy = options && options.lazy === true;\n\n    if (!isLazy && Reflect && Reflect.getMetadata) {\n      // automatic determination\n      const reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n      if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\") isLazy = true;\n    }\n\n    getMetadataArgsStorage().relations.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      // propertyType: reflectedType,\n      isLazy: isLazy,\n      relationType: \"one-to-many\",\n      type: typeFunctionOrTarget,\n      inverseSideProperty: inverseSide,\n      options: options\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,sBAAT,QAAuC,eAAvC;AAKA;;;;;;AAKA,OAAM,SAAUC,SAAV,CACFC,oBADE,EAEFC,WAFE,EAGFC,OAHE,EAGuB;EAEzB,OAAO,UAAUC,MAAV,EAA0BC,YAA1B,EAA8C;IACjD,IAAI,CAACF,OAAL,EAAcA,OAAO,GAAG,EAAV,CADmC,CAGjD;;IACA,IAAIG,MAAM,GAAGH,OAAO,IAAIA,OAAO,CAACI,IAAR,KAAiB,IAAzC;;IACA,IAAI,CAACD,MAAD,IAAWE,OAAX,IAAuBA,OAAe,CAACC,WAA3C,EAAwD;MACpD;MACA,MAAMC,aAAa,GAAIF,OAAe,CAACC,WAAhB,CACnB,aADmB,EAEnBL,MAFmB,EAGnBC,YAHmB,CAAvB;MAKA,IACIK,aAAa,IACb,OAAOA,aAAa,CAACC,IAArB,KAA8B,QAD9B,IAEAD,aAAa,CAACC,IAAd,CAAmBC,WAAnB,OAAqC,SAHzC,EAKIN,MAAM,GAAG,IAAT;IACP;;IAEDP,sBAAsB,GAAGc,SAAzB,CAAmCC,IAAnC,CAAwC;MACpCC,MAAM,EAAEX,MAAM,CAACY,WADqB;MAEpCX,YAAY,EAAEA,YAFsB;MAGpC;MACAC,MAAM,EAAEA,MAJ4B;MAKpCW,YAAY,EAAE,aALsB;MAMpCC,IAAI,EAAEjB,oBAN8B;MAOpCkB,mBAAmB,EAAEjB,WAPe;MAQpCC,OAAO,EAAEA;IAR2B,CAAxC;EAUH,CA9BD;AA+BH","names":["getMetadataArgsStorage","OneToMany","typeFunctionOrTarget","inverseSide","options","object","propertyName","isLazy","lazy","Reflect","getMetadata","reflectedType","name","toLowerCase","relations","push","target","constructor","relationType","type","inverseSideProperty"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\decorator\\relations\\OneToMany.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { RelationMetadataArgs } from \"../../metadata-args/RelationMetadataArgs\"\nimport { ObjectType } from \"../../common/ObjectType\"\nimport { RelationOptions } from \"../options/RelationOptions\"\n\n/**\n * A one-to-many relation allows creating the type of relation where Entity1 can have multiple instances of Entity2,\n * but Entity2 has only one Entity1. Entity2 is the owner of the relationship, and stores the id of Entity1 on its\n * side of the relation.\n */\nexport function OneToMany<T>(\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\n    inverseSide: string | ((object: T) => any),\n    options?: RelationOptions,\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions\n\n        // Now try to determine if it is a lazy relation.\n        let isLazy = options && options.lazy === true\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) {\n            // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\n                \"design:type\",\n                object,\n                propertyName,\n            )\n            if (\n                reflectedType &&\n                typeof reflectedType.name === \"string\" &&\n                reflectedType.name.toLowerCase() === \"promise\"\n            )\n                isLazy = true\n        }\n\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            isLazy: isLazy,\n            relationType: \"one-to-many\",\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSide,\n            options: options,\n        } as RelationMetadataArgs)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}