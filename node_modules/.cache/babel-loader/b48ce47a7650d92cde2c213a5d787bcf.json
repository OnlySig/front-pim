{"ast":null,"code":"import { MissingPrimaryColumnError } from \"../error/MissingPrimaryColumnError\";\nimport { CircularRelationsError } from \"../error/CircularRelationsError\";\nimport { DepGraph } from \"../util/DepGraph\";\nimport { DataTypeNotSupportedError } from \"../error/DataTypeNotSupportedError\";\nimport { NoConnectionOptionError } from \"../error/NoConnectionOptionError\";\nimport { InitializedRelationError } from \"../error/InitializedRelationError\";\nimport { TypeORMError } from \"../error\";\nimport { DriverUtils } from \"../driver/DriverUtils\"; /// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n// todo: type in function validation, inverse side function validation\n// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: check if multiple tree parent metadatas in validator\n// todo: tree decorators can be used only on closure table (validation)\n// todo: throw error if parent tree metadata was not specified in a closure table\n// todo: MetadataArgsStorage: type in function validation, inverse side function validation\n// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too\n// todo: check if relation decorator contains primary: true and nullable: true\n// todo: check column length, precision. scale\n// todo: MySQL index can be unique or spatial or fulltext\n\n/**\n * Validates built entity metadatas.\n */\n\nexport class EntityMetadataValidator {\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Validates all given entity metadatas.\n   */\n  validateMany(entityMetadatas, driver) {\n    entityMetadatas.forEach(entityMetadata => this.validate(entityMetadata, entityMetadatas, driver));\n    this.validateDependencies(entityMetadatas);\n    this.validateEagerRelations(entityMetadatas);\n  }\n  /**\n   * Validates given entity metadata.\n   */\n\n\n  validate(entityMetadata, allEntityMetadatas, driver) {\n    // check if table metadata has an id\n    if (!entityMetadata.primaryColumns.length && !entityMetadata.isJunction) throw new MissingPrimaryColumnError(entityMetadata); // if entity has multiple primary keys and uses custom constraint name,\n    // then all primary keys should have the same constraint name\n\n    if (entityMetadata.primaryColumns.length > 1) {\n      const areConstraintNamesEqual = entityMetadata.primaryColumns.every((columnMetadata, i, columnMetadatas) => columnMetadata.primaryKeyConstraintName === columnMetadatas[0].primaryKeyConstraintName);\n\n      if (!areConstraintNamesEqual) {\n        throw new TypeORMError(`Entity ${entityMetadata.name} has multiple primary columns with different constraint names. Constraint names should be the equal.`);\n      }\n    } // validate if table is using inheritance it has a discriminator\n    // also validate if discriminator values are not empty and not repeated\n\n\n    if (entityMetadata.inheritancePattern === \"STI\" || entityMetadata.tableType === \"entity-child\") {\n      if (!entityMetadata.discriminatorColumn) throw new TypeORMError(`Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put discriminator column options?`);\n      if (typeof entityMetadata.discriminatorValue === \"undefined\") throw new TypeORMError(`Entity ${entityMetadata.name} has an undefined discriminator value. Discriminator value should be defined.`);\n      const sameDiscriminatorValueEntityMetadata = allEntityMetadatas.find(metadata => {\n        return metadata !== entityMetadata && (metadata.inheritancePattern === \"STI\" || metadata.tableType === \"entity-child\") && metadata.tableName === entityMetadata.tableName && metadata.discriminatorValue === entityMetadata.discriminatorValue && metadata.inheritanceTree.some(parent => entityMetadata.inheritanceTree.indexOf(parent) !== -1);\n      });\n      if (sameDiscriminatorValueEntityMetadata) throw new TypeORMError(`Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} have the same discriminator values. Make sure they are different while using the @ChildEntity decorator.`);\n    }\n\n    entityMetadata.relationCounts.forEach(relationCount => {\n      if (relationCount.relation.isManyToOne || relationCount.relation.isOneToOne) throw new TypeORMError(`Relation count can not be implemented on ManyToOne or OneToOne relations.`);\n    });\n\n    if (!(driver.options.type === \"mongodb\")) {\n      entityMetadata.columns.forEach(column => {\n        const normalizedColumn = driver.normalizeType(column);\n        if (driver.supportedDataTypes.indexOf(normalizedColumn) === -1) throw new DataTypeNotSupportedError(column, normalizedColumn, driver.options.type);\n        if (column.length && driver.withLengthColumnTypes.indexOf(normalizedColumn) === -1) throw new TypeORMError(`Column ${column.propertyName} of Entity ${entityMetadata.name} does not support length property.`);\n        if (column.type === \"enum\" && !column.enum && !column.enumName) throw new TypeORMError(`Column \"${column.propertyName}\" of Entity \"${entityMetadata.name}\" is defined as enum, but missing \"enum\" or \"enumName\" properties.`);\n      });\n    }\n\n    if (DriverUtils.isMySQLFamily(driver) || driver.options.type === \"aurora-mysql\") {\n      const generatedColumns = entityMetadata.columns.filter(column => column.isGenerated && column.generationStrategy !== \"uuid\");\n      if (generatedColumns.length > 1) throw new TypeORMError(`Error in ${entityMetadata.name} entity. There can be only one auto-increment column in MySql table.`);\n    } // for mysql we are able to not define a default selected database, instead all entities can have their database\n    // defined in their decorators. To make everything work either all entities must have database define and we\n    // can live without database set in the connection options, either database in the connection options must be set\n\n\n    if (DriverUtils.isMySQLFamily(driver)) {\n      const metadatasWithDatabase = allEntityMetadatas.filter(metadata => metadata.database);\n      if (metadatasWithDatabase.length === 0 && !driver.database) throw new NoConnectionOptionError(\"database\");\n    }\n\n    if (driver.options.type === \"mssql\") {\n      const charsetColumns = entityMetadata.columns.filter(column => column.charset);\n      if (charsetColumns.length > 1) throw new TypeORMError(`Character set specifying is not supported in Sql Server`);\n    } // Postgres supports only STORED generated columns.\n\n\n    if (driver.options.type === \"postgres\") {\n      const virtualColumn = entityMetadata.columns.find(column => column.asExpression && (!column.generatedType || column.generatedType === \"VIRTUAL\"));\n      if (virtualColumn) throw new TypeORMError(`Column \"${virtualColumn.propertyName}\" of Entity \"${entityMetadata.name}\" is defined as VIRTUAL, but Postgres supports only STORED generated columns.`);\n    } // check if relations are all without initialized properties\n\n\n    const entityInstance = entityMetadata.create(undefined, {\n      fromDeserializer: true\n    });\n    entityMetadata.relations.forEach(relation => {\n      if (relation.isManyToMany || relation.isOneToMany) {\n        // we skip relations for which persistence is disabled since initialization in them cannot harm somehow\n        if (relation.persistenceEnabled === false) return; // get entity relation value and check if its an array\n\n        const relationInitializedValue = relation.getEntityValue(entityInstance);\n        if (Array.isArray(relationInitializedValue)) throw new InitializedRelationError(relation);\n      }\n    }); // validate relations\n\n    entityMetadata.relations.forEach(relation => {// check join tables:\n      // using JoinTable is possible only on one side of the many-to-many relation\n      // todo(dima): fix\n      // if (relation.joinTable) {\n      //     if (!relation.isManyToMany)\n      //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n      //     // if there is inverse side of the relation, then check if it does not have join table too\n      //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n      //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n      // }\n      // check join columns:\n      // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n      // first check if relation is one-to-one or many-to-one\n      // todo(dima): fix\n\n      /*if (relation.joinColumn) {\n           // join column can be applied only on one-to-one and many-to-one relations\n          if (!relation.isOneToOne && !relation.isManyToOne)\n              throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n           // if there is inverse side of the relation, then check if it does not have join table too\n          if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n              throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n           // check if join column really has referenced column\n          if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n              throw new TypeORMError(`Join column does not have referenced column set`);\n       }\n       // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n      // or its one-side relation without JoinColumn we should give an error\n      if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n          throw new MissingJoinColumnError(entityMetadata, relation);*/\n      // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n      // or its one-side relation without JoinTable we should give an error\n      // todo(dima): fix it\n      // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n      //     throw new MissingJoinTableError(entityMetadata, relation);\n      // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n      // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n      // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n      // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n      // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n      // todo: check if there are multiple columns on the same column applied.\n      // todo: check column type if is missing in relational databases (throw new TypeORMError(`Column type of ${type} cannot be determined.`);)\n      // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\n      // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all\n      // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity\n      // todo: check if entity with duplicate names, some decorators exist\n    }); // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n\n    entityMetadata.relations.forEach(relation => {\n      const isCircularCascadeRemove = relation.isCascadeRemove && relation.inverseRelation && relation.inverseRelation.isCascadeRemove;\n      if (isCircularCascadeRemove) throw new TypeORMError(`Relation ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseRelation.entityMetadata.name}#${relation.inverseRelation.propertyName} both has cascade remove set. ` + `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`);\n    }); // todo: maybe better just deny removal from one to one relation without join column?\n\n    entityMetadata.eagerRelations.forEach(relation => {});\n  }\n  /**\n   * Validates dependencies of the entity metadatas.\n   */\n\n\n  validateDependencies(entityMetadatas) {\n    const graph = new DepGraph();\n    entityMetadatas.forEach(entityMetadata => {\n      graph.addNode(entityMetadata.name);\n    });\n    entityMetadatas.forEach(entityMetadata => {\n      entityMetadata.relationsWithJoinColumns.filter(relation => !relation.isNullable).forEach(relation => {\n        graph.addDependency(entityMetadata.name, relation.inverseEntityMetadata.name);\n      });\n    });\n\n    try {\n      graph.overallOrder();\n    } catch (err) {\n      throw new CircularRelationsError(err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"));\n    }\n  }\n  /**\n   * Validates eager relations to prevent circular dependency in them.\n   */\n\n\n  validateEagerRelations(entityMetadatas) {\n    entityMetadatas.forEach(entityMetadata => {\n      entityMetadata.eagerRelations.forEach(relation => {\n        if (relation.inverseRelation && relation.inverseRelation.isEager) throw new TypeORMError(`Circular eager relations are disallowed. ` + `${entityMetadata.targetName}#${relation.propertyPath} contains \"eager: true\", and its inverse side ` + `${relation.inverseEntityMetadata.targetName}#${relation.inverseRelation.propertyPath} contains \"eager: true\" as well.` + ` Remove \"eager: true\" from one side of the relation.`);\n      });\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["MissingPrimaryColumnError","CircularRelationsError","DepGraph","DataTypeNotSupportedError","NoConnectionOptionError","InitializedRelationError","TypeORMError","DriverUtils","EntityMetadataValidator","validateMany","entityMetadatas","driver","forEach","entityMetadata","validate","validateDependencies","validateEagerRelations","allEntityMetadatas","primaryColumns","length","isJunction","areConstraintNamesEqual","every","columnMetadata","i","columnMetadatas","primaryKeyConstraintName","name","inheritancePattern","tableType","discriminatorColumn","discriminatorValue","sameDiscriminatorValueEntityMetadata","find","metadata","tableName","inheritanceTree","some","parent","indexOf","relationCounts","relationCount","relation","isManyToOne","isOneToOne","options","type","columns","column","normalizedColumn","normalizeType","supportedDataTypes","withLengthColumnTypes","propertyName","enum","enumName","isMySQLFamily","generatedColumns","filter","isGenerated","generationStrategy","metadatasWithDatabase","database","charsetColumns","charset","virtualColumn","asExpression","generatedType","entityInstance","create","undefined","fromDeserializer","relations","isManyToMany","isOneToMany","persistenceEnabled","relationInitializedValue","getEntityValue","Array","isArray","isCircularCascadeRemove","isCascadeRemove","inverseRelation","eagerRelations","graph","addNode","relationsWithJoinColumns","isNullable","addDependency","inverseEntityMetadata","overallOrder","err","toString","replace","isEager","targetName","propertyPath"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\metadata-builder\\EntityMetadataValidator.ts"],"sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { MissingPrimaryColumnError } from \"../error/MissingPrimaryColumnError\"\nimport { CircularRelationsError } from \"../error/CircularRelationsError\"\nimport { DepGraph } from \"../util/DepGraph\"\nimport { Driver } from \"../driver/Driver\"\nimport { DataTypeNotSupportedError } from \"../error/DataTypeNotSupportedError\"\nimport { ColumnType } from \"../driver/types/ColumnTypes\"\nimport { NoConnectionOptionError } from \"../error/NoConnectionOptionError\"\nimport { InitializedRelationError } from \"../error/InitializedRelationError\"\nimport { TypeORMError } from \"../error\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\n\n/// todo: add check if there are multiple tables with the same name\n/// todo: add checks when generated column / table names are too long for the specific driver\n// todo: type in function validation, inverse side function validation\n// todo: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: check if multiple tree parent metadatas in validator\n// todo: tree decorators can be used only on closure table (validation)\n// todo: throw error if parent tree metadata was not specified in a closure table\n\n// todo: MetadataArgsStorage: type in function validation, inverse side function validation\n// todo: MetadataArgsStorage: check on build for duplicate names, since naming checking was removed from MetadataStorage\n// todo: MetadataArgsStorage: duplicate name checking for: table, relation, column, index, naming strategy, join tables/columns?\n// todo: MetadataArgsStorage: check for duplicate targets too since this check has been removed too\n// todo: check if relation decorator contains primary: true and nullable: true\n// todo: check column length, precision. scale\n// todo: MySQL index can be unique or spatial or fulltext\n\n/**\n * Validates built entity metadatas.\n */\nexport class EntityMetadataValidator {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Validates all given entity metadatas.\n     */\n    validateMany(entityMetadatas: EntityMetadata[], driver: Driver) {\n        entityMetadatas.forEach((entityMetadata) =>\n            this.validate(entityMetadata, entityMetadatas, driver),\n        )\n        this.validateDependencies(entityMetadatas)\n        this.validateEagerRelations(entityMetadatas)\n    }\n\n    /**\n     * Validates given entity metadata.\n     */\n    validate(\n        entityMetadata: EntityMetadata,\n        allEntityMetadatas: EntityMetadata[],\n        driver: Driver,\n    ) {\n        // check if table metadata has an id\n        if (!entityMetadata.primaryColumns.length && !entityMetadata.isJunction)\n            throw new MissingPrimaryColumnError(entityMetadata)\n\n        // if entity has multiple primary keys and uses custom constraint name,\n        // then all primary keys should have the same constraint name\n        if (entityMetadata.primaryColumns.length > 1) {\n            const areConstraintNamesEqual = entityMetadata.primaryColumns.every(\n                (columnMetadata, i, columnMetadatas) =>\n                    columnMetadata.primaryKeyConstraintName ===\n                    columnMetadatas[0].primaryKeyConstraintName,\n            )\n            if (!areConstraintNamesEqual) {\n                throw new TypeORMError(\n                    `Entity ${entityMetadata.name} has multiple primary columns with different constraint names. Constraint names should be the equal.`,\n                )\n            }\n        }\n\n        // validate if table is using inheritance it has a discriminator\n        // also validate if discriminator values are not empty and not repeated\n        if (\n            entityMetadata.inheritancePattern === \"STI\" ||\n            entityMetadata.tableType === \"entity-child\"\n        ) {\n            if (!entityMetadata.discriminatorColumn)\n                throw new TypeORMError(\n                    `Entity ${entityMetadata.name} using single-table inheritance, it should also have a discriminator column. Did you forget to put discriminator column options?`,\n                )\n\n            if (typeof entityMetadata.discriminatorValue === \"undefined\")\n                throw new TypeORMError(\n                    `Entity ${entityMetadata.name} has an undefined discriminator value. Discriminator value should be defined.`,\n                )\n\n            const sameDiscriminatorValueEntityMetadata =\n                allEntityMetadatas.find((metadata) => {\n                    return (\n                        metadata !== entityMetadata &&\n                        (metadata.inheritancePattern === \"STI\" ||\n                            metadata.tableType === \"entity-child\") &&\n                        metadata.tableName === entityMetadata.tableName &&\n                        metadata.discriminatorValue ===\n                            entityMetadata.discriminatorValue &&\n                        metadata.inheritanceTree.some(\n                            (parent) =>\n                                entityMetadata.inheritanceTree.indexOf(\n                                    parent,\n                                ) !== -1,\n                        )\n                    )\n                })\n            if (sameDiscriminatorValueEntityMetadata)\n                throw new TypeORMError(\n                    `Entities ${entityMetadata.name} and ${sameDiscriminatorValueEntityMetadata.name} have the same discriminator values. Make sure they are different while using the @ChildEntity decorator.`,\n                )\n        }\n\n        entityMetadata.relationCounts.forEach((relationCount) => {\n            if (\n                relationCount.relation.isManyToOne ||\n                relationCount.relation.isOneToOne\n            )\n                throw new TypeORMError(\n                    `Relation count can not be implemented on ManyToOne or OneToOne relations.`,\n                )\n        })\n\n        if (!(driver.options.type === \"mongodb\")) {\n            entityMetadata.columns.forEach((column) => {\n                const normalizedColumn = driver.normalizeType(\n                    column,\n                ) as ColumnType\n                if (driver.supportedDataTypes.indexOf(normalizedColumn) === -1)\n                    throw new DataTypeNotSupportedError(\n                        column,\n                        normalizedColumn,\n                        driver.options.type,\n                    )\n                if (\n                    column.length &&\n                    driver.withLengthColumnTypes.indexOf(normalizedColumn) ===\n                        -1\n                )\n                    throw new TypeORMError(\n                        `Column ${column.propertyName} of Entity ${entityMetadata.name} does not support length property.`,\n                    )\n                if (column.type === \"enum\" && !column.enum && !column.enumName)\n                    throw new TypeORMError(\n                        `Column \"${column.propertyName}\" of Entity \"${entityMetadata.name}\" is defined as enum, but missing \"enum\" or \"enumName\" properties.`,\n                    )\n            })\n        }\n\n        if (\n            DriverUtils.isMySQLFamily(driver) ||\n            driver.options.type === \"aurora-mysql\"\n        ) {\n            const generatedColumns = entityMetadata.columns.filter(\n                (column) =>\n                    column.isGenerated && column.generationStrategy !== \"uuid\",\n            )\n            if (generatedColumns.length > 1)\n                throw new TypeORMError(\n                    `Error in ${entityMetadata.name} entity. There can be only one auto-increment column in MySql table.`,\n                )\n        }\n\n        // for mysql we are able to not define a default selected database, instead all entities can have their database\n        // defined in their decorators. To make everything work either all entities must have database define and we\n        // can live without database set in the connection options, either database in the connection options must be set\n        if (DriverUtils.isMySQLFamily(driver)) {\n            const metadatasWithDatabase = allEntityMetadatas.filter(\n                (metadata) => metadata.database,\n            )\n            if (metadatasWithDatabase.length === 0 && !driver.database)\n                throw new NoConnectionOptionError(\"database\")\n        }\n\n        if (driver.options.type === \"mssql\") {\n            const charsetColumns = entityMetadata.columns.filter(\n                (column) => column.charset,\n            )\n            if (charsetColumns.length > 1)\n                throw new TypeORMError(\n                    `Character set specifying is not supported in Sql Server`,\n                )\n        }\n\n        // Postgres supports only STORED generated columns.\n        if (driver.options.type === \"postgres\") {\n            const virtualColumn = entityMetadata.columns.find(\n                (column) =>\n                    column.asExpression &&\n                    (!column.generatedType ||\n                        column.generatedType === \"VIRTUAL\"),\n            )\n            if (virtualColumn)\n                throw new TypeORMError(\n                    `Column \"${virtualColumn.propertyName}\" of Entity \"${entityMetadata.name}\" is defined as VIRTUAL, but Postgres supports only STORED generated columns.`,\n                )\n        }\n\n        // check if relations are all without initialized properties\n        const entityInstance = entityMetadata.create(undefined, {\n            fromDeserializer: true,\n        })\n        entityMetadata.relations.forEach((relation) => {\n            if (relation.isManyToMany || relation.isOneToMany) {\n                // we skip relations for which persistence is disabled since initialization in them cannot harm somehow\n                if (relation.persistenceEnabled === false) return\n\n                // get entity relation value and check if its an array\n                const relationInitializedValue =\n                    relation.getEntityValue(entityInstance)\n                if (Array.isArray(relationInitializedValue))\n                    throw new InitializedRelationError(relation)\n            }\n        })\n\n        // validate relations\n        entityMetadata.relations.forEach((relation) => {\n            // check join tables:\n            // using JoinTable is possible only on one side of the many-to-many relation\n            // todo(dima): fix\n            // if (relation.joinTable) {\n            //     if (!relation.isManyToMany)\n            //         throw new UsingJoinTableIsNotAllowedError(entityMetadata, relation);\n            //     // if there is inverse side of the relation, then check if it does not have join table too\n            //     if (relation.hasInverseSide && relation.inverseRelation.joinTable)\n            //         throw new UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation);\n            // }\n            // check join columns:\n            // using JoinColumn is possible only on one side of the relation and on one-to-one, many-to-one relation types\n            // first check if relation is one-to-one or many-to-one\n            // todo(dima): fix\n            /*if (relation.joinColumn) {\n\n                // join column can be applied only on one-to-one and many-to-one relations\n                if (!relation.isOneToOne && !relation.isManyToOne)\n                    throw new UsingJoinColumnIsNotAllowedError(entityMetadata, relation);\n\n                // if there is inverse side of the relation, then check if it does not have join table too\n                if (relation.hasInverseSide && relation.inverseRelation.joinColumn && relation.isOneToOne)\n                    throw new UsingJoinColumnOnlyOnOneSideAllowedError(entityMetadata, relation);\n\n                // check if join column really has referenced column\n                if (relation.joinColumn && !relation.joinColumn.referencedColumn)\n                    throw new TypeORMError(`Join column does not have referenced column set`);\n\n            }\n\n            // if its a one-to-one relation and JoinColumn is missing on both sides of the relation\n            // or its one-side relation without JoinColumn we should give an error\n            if (!relation.joinColumn && relation.isOneToOne && (!relation.hasInverseSide || !relation.inverseRelation.joinColumn))\n                throw new MissingJoinColumnError(entityMetadata, relation);*/\n            // if its a many-to-many relation and JoinTable is missing on both sides of the relation\n            // or its one-side relation without JoinTable we should give an error\n            // todo(dima): fix it\n            // if (!relation.joinTable && relation.isManyToMany && (!relation.hasInverseSide || !relation.inverseRelation.joinTable))\n            //     throw new MissingJoinTableError(entityMetadata, relation);\n            // todo: validate if its one-to-one and side which does not have join column MUST have inverse side\n            // todo: validate if its many-to-many and side which does not have join table MUST have inverse side\n            // todo: if there is a relation, and inverse side is specified only on one side, shall we give error\n            // todo: with message like: \"Inverse side is specified only on one side of the relationship. Specify on other side too to prevent confusion\".\n            // todo: add validation if there two entities with the same target, and show error message with description of the problem (maybe file was renamed/moved but left in output directory)\n            // todo: check if there are multiple columns on the same column applied.\n            // todo: check column type if is missing in relational databases (throw new TypeORMError(`Column type of ${type} cannot be determined.`);)\n            // todo: include driver-specific checks. for example in mongodb empty prefixes are not allowed\n            // todo: if multiple columns with same name - throw exception, including cases when columns are in embeds with same prefixes or without prefix at all\n            // todo: if multiple primary key used, at least one of them must be unique or @Index decorator must be set on entity\n            // todo: check if entity with duplicate names, some decorators exist\n        })\n\n        // make sure cascade remove is not set for both sides of relationships (can be set in OneToOne decorators)\n        entityMetadata.relations.forEach((relation) => {\n            const isCircularCascadeRemove =\n                relation.isCascadeRemove &&\n                relation.inverseRelation &&\n                relation.inverseRelation!.isCascadeRemove\n            if (isCircularCascadeRemove)\n                throw new TypeORMError(\n                    `Relation ${entityMetadata.name}#${\n                        relation.propertyName\n                    } and ${relation.inverseRelation!.entityMetadata.name}#${\n                        relation.inverseRelation!.propertyName\n                    } both has cascade remove set. ` +\n                        `This may lead to unexpected circular removals. Please set cascade remove only from one side of relationship.`,\n                )\n        }) // todo: maybe better just deny removal from one to one relation without join column?\n\n        entityMetadata.eagerRelations.forEach((relation) => {})\n    }\n\n    /**\n     * Validates dependencies of the entity metadatas.\n     */\n    protected validateDependencies(entityMetadatas: EntityMetadata[]) {\n        const graph = new DepGraph()\n        entityMetadatas.forEach((entityMetadata) => {\n            graph.addNode(entityMetadata.name)\n        })\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.relationsWithJoinColumns\n                .filter((relation) => !relation.isNullable)\n                .forEach((relation) => {\n                    graph.addDependency(\n                        entityMetadata.name,\n                        relation.inverseEntityMetadata.name,\n                    )\n                })\n        })\n        try {\n            graph.overallOrder()\n        } catch (err) {\n            throw new CircularRelationsError(\n                err.toString().replace(\"Error: Dependency Cycle Found: \", \"\"),\n            )\n        }\n    }\n\n    /**\n     * Validates eager relations to prevent circular dependency in them.\n     */\n    protected validateEagerRelations(entityMetadatas: EntityMetadata[]) {\n        entityMetadatas.forEach((entityMetadata) => {\n            entityMetadata.eagerRelations.forEach((relation) => {\n                if (\n                    relation.inverseRelation &&\n                    relation.inverseRelation.isEager\n                )\n                    throw new TypeORMError(\n                        `Circular eager relations are disallowed. ` +\n                            `${entityMetadata.targetName}#${relation.propertyPath} contains \"eager: true\", and its inverse side ` +\n                            `${relation.inverseEntityMetadata.targetName}#${relation.inverseRelation.propertyPath} contains \"eager: true\" as well.` +\n                            ` Remove \"eager: true\" from one side of the relation.`,\n                    )\n            })\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}