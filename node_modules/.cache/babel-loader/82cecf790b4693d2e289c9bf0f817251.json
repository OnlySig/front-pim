{"ast":null,"code":"import { EntityManager } from \"./EntityManager\";\n/**\n * A special EntityManager that includes import/export and load/save function\n * that are unique to Sql.js.\n */\n\nexport class SqljsEntityManager extends EntityManager {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection, queryRunner) {\n    super(connection, queryRunner);\n    this[\"@instanceof\"] = Symbol.for(\"SqljsEntityManager\");\n    this.driver = connection.driver;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Loads either the definition from a file (Node.js) or localstorage (browser)\n   * or uses the given definition to open a new database.\n   */\n\n\n  async loadDatabase(fileNameOrLocalStorageOrData) {\n    await this.driver.load(fileNameOrLocalStorageOrData);\n  }\n  /**\n   * Saves the current database to a file (Node.js) or localstorage (browser)\n   * if fileNameOrLocalStorage is not set options.location is used.\n   */\n\n\n  async saveDatabase(fileNameOrLocalStorage) {\n    await this.driver.save(fileNameOrLocalStorage);\n  }\n  /**\n   * Returns the current database definition.\n   */\n\n\n  exportDatabase() {\n    return this.driver.export();\n  }\n\n}","map":{"version":3,"mappings":"AAEA,SAASA,aAAT,QAA8B,iBAA9B;AAGA;;;;;AAIA,OAAM,MAAOC,kBAAP,SAAkCD,aAAlC,CAA+C;EAKjD;EACA;EACA;EAEAE,YAAYC,UAAZ,EAAoCC,WAApC,EAA6D;IACzD,MAAMD,UAAN,EAAkBC,WAAlB;IATK,sBAAgBC,MAAM,CAACC,GAAP,CAAW,oBAAX,CAAhB;IAUL,KAAKC,MAAL,GAAcJ,UAAU,CAACI,MAAzB;EACH,CAZgD,CAcjD;EACA;EACA;;EAEA;;;;;;EAIkB,MAAZC,YAAY,CACdC,4BADc,EACmC;IAEjD,MAAM,KAAKF,MAAL,CAAYG,IAAZ,CAAiBD,4BAAjB,CAAN;EACH;EAED;;;;;;EAIkB,MAAZE,YAAY,CAACC,sBAAD,EAAgC;IAC9C,MAAM,KAAKL,MAAL,CAAYM,IAAZ,CAAiBD,sBAAjB,CAAN;EACH;EAED;;;;;EAGAE,cAAc;IACV,OAAO,KAAKP,MAAL,CAAYQ,MAAZ,EAAP;EACH;;AAzCgD","names":["EntityManager","SqljsEntityManager","constructor","connection","queryRunner","Symbol","for","driver","loadDatabase","fileNameOrLocalStorageOrData","load","saveDatabase","fileNameOrLocalStorage","save","exportDatabase","export"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\entity-manager\\SqljsEntityManager.ts"],"sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { EntityManager } from \"./EntityManager\"\nimport { SqljsDriver } from \"../driver/sqljs/SqljsDriver\"\n\n/**\n * A special EntityManager that includes import/export and load/save function\n * that are unique to Sql.js.\n */\nexport class SqljsEntityManager extends EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"SqljsEntityManager\")\n\n    private driver: SqljsDriver\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource, queryRunner?: QueryRunner) {\n        super(connection, queryRunner)\n        this.driver = connection.driver as SqljsDriver\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads either the definition from a file (Node.js) or localstorage (browser)\n     * or uses the given definition to open a new database.\n     */\n    async loadDatabase(\n        fileNameOrLocalStorageOrData: string | Uint8Array,\n    ): Promise<void> {\n        await this.driver.load(fileNameOrLocalStorageOrData)\n    }\n\n    /**\n     * Saves the current database to a file (Node.js) or localstorage (browser)\n     * if fileNameOrLocalStorage is not set options.location is used.\n     */\n    async saveDatabase(fileNameOrLocalStorage?: string): Promise<void> {\n        await this.driver.save(fileNameOrLocalStorage)\n    }\n\n    /**\n     * Returns the current database definition.\n     */\n    exportDatabase(): Uint8Array {\n        return this.driver.export()\n    }\n}\n"]},"metadata":{},"sourceType":"module"}