{"ast":null,"code":"import { parseISO } from \"date-fns\";\n/**\n * Provides utilities to transform hydrated and persisted data.\n */\n\nexport class DateUtils {\n  // -------------------------------------------------------------------------\n  // Public Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Normalizes date object hydrated from the database.\n   */\n  static normalizeHydratedDate(mixedDate) {\n    if (!mixedDate) return mixedDate;\n    return typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate;\n  }\n  /**\n   * Converts given value into date string in a \"YYYY-MM-DD\" format.\n   */\n\n\n  static mixedDateToDateString(value) {\n    if (value instanceof Date) return this.formatZerolessValue(value.getFullYear(), 4) + \"-\" + this.formatZerolessValue(value.getMonth() + 1) + \"-\" + this.formatZerolessValue(value.getDate());\n    return value;\n  }\n  /**\n   * Converts given value into date object.\n   */\n\n\n  static mixedDateToDate(mixedDate) {\n    let toUtc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let useMilliseconds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    /**\n     * new Date(ISOString) is not a reliable parser to date strings.\n     * It's better to use 'date-fns' parser to parser string in ISO Format.\n     *\n     * The problem here is with wrong timezone.\n     *\n     * For example:\n     *\n     * ``new Date('2021-04-28')`` will generate `2021-04-28T00:00:00.000Z`\n     * in my timezone, which is not true for my timezone (GMT-0300). It should\n     * be `2021-04-28T03:00:00.000Z` as `new Date(2021, 3, 28)` generates.\n     *\n     * https://stackoverflow.com/a/2587398\n     */\n    let date = typeof mixedDate === \"string\" ? parseISO(mixedDate) : mixedDate;\n    if (toUtc) date = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n    if (!useMilliseconds) date.setUTCMilliseconds(0);\n    return date;\n  }\n  /**\n   * Converts given value into time string in a \"HH:mm:ss\" format.\n   */\n\n\n  static mixedDateToTimeString(value) {\n    let skipSeconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (value instanceof Date) return this.formatZerolessValue(value.getHours()) + \":\" + this.formatZerolessValue(value.getMinutes()) + (!skipSeconds ? \":\" + this.formatZerolessValue(value.getSeconds()) : \"\");\n    return value;\n  }\n  /**\n   * Converts given value into time string in a \"HH:mm:ss\" format.\n   */\n\n\n  static mixedTimeToDate(value) {\n    if (typeof value === \"string\") {\n      const [hours, minutes, seconds] = value.split(\":\");\n      const date = new Date();\n      if (hours) date.setHours(parseInt(hours));\n      if (minutes) date.setMinutes(parseInt(minutes));\n      if (seconds) date.setSeconds(parseInt(seconds));\n      return date;\n    }\n\n    return value;\n  }\n  /**\n   * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\n   */\n\n\n  static mixedTimeToString(value) {\n    let skipSeconds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    value = value instanceof Date ? value.getHours() + \":\" + value.getMinutes() + (!skipSeconds ? \":\" + value.getSeconds() : \"\") : value;\n\n    if (typeof value === \"string\") {\n      return value.split(\":\").map(v => v.length === 1 ? \"0\" + v : v) // append zero at beginning if we have a first-zero-less number\n      .join(\":\");\n    }\n\n    return value;\n  }\n  /**\n   * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n   */\n\n\n  static mixedDateToDatetimeString(value, useMilliseconds) {\n    if (typeof value === \"string\") {\n      value = new Date(value);\n    }\n\n    if (value instanceof Date) {\n      let finalValue = this.formatZerolessValue(value.getFullYear(), 4) + \"-\" + this.formatZerolessValue(value.getMonth() + 1) + \"-\" + this.formatZerolessValue(value.getDate()) + \" \" + this.formatZerolessValue(value.getHours()) + \":\" + this.formatZerolessValue(value.getMinutes()) + \":\" + this.formatZerolessValue(value.getSeconds());\n      if (useMilliseconds) finalValue += `.${this.formatMilliseconds(value.getMilliseconds())}`;\n      value = finalValue;\n    }\n\n    return value;\n  }\n  /**\n   * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss.sss\" format.\n   */\n\n\n  static mixedDateToUtcDatetimeString(value) {\n    if (typeof value === \"string\") {\n      value = new Date(value);\n    }\n\n    if (value instanceof Date) {\n      return this.formatZerolessValue(value.getUTCFullYear(), 4) + \"-\" + this.formatZerolessValue(value.getUTCMonth() + 1) + \"-\" + this.formatZerolessValue(value.getUTCDate()) + \" \" + this.formatZerolessValue(value.getUTCHours()) + \":\" + this.formatZerolessValue(value.getUTCMinutes()) + \":\" + this.formatZerolessValue(value.getUTCSeconds()) + \".\" + this.formatMilliseconds(value.getUTCMilliseconds());\n    }\n\n    return value;\n  }\n  /**\n   * Converts each item in the given array to string joined by \",\" separator.\n   */\n\n\n  static simpleArrayToString(value) {\n    if (Array.isArray(value)) {\n      return value.map(i => String(i)).join(\",\");\n    }\n\n    return value;\n  }\n  /**\n   * Converts given string to simple array split by \",\" separator.\n   */\n\n\n  static stringToSimpleArray(value) {\n    if (typeof value === \"string\") {\n      if (value.length > 0) {\n        return value.split(\",\");\n      } else {\n        return [];\n      }\n    }\n\n    return value;\n  }\n\n  static simpleJsonToString(value) {\n    return JSON.stringify(value);\n  }\n\n  static stringToSimpleJson(value) {\n    return typeof value === \"string\" ? JSON.parse(value) : value;\n  }\n\n  static simpleEnumToString(value) {\n    return \"\" + value;\n  }\n\n  static stringToSimpleEnum(value, columnMetadata) {\n    if (columnMetadata.enum && !isNaN(value) && columnMetadata.enum.indexOf(parseInt(value)) >= 0) {\n      // convert to number if that exists in poosible enum options\n      value = parseInt(value);\n    }\n\n    return value;\n  } // -------------------------------------------------------------------------\n  // Private Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Formats given number to \"0x\" format, e.g. if the totalLength = 2 and the value is 1 then it will return \"01\".\n   */\n\n\n  static formatZerolessValue(value) {\n    let totalLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    const pad = \"0\".repeat(totalLength);\n    return String(`${pad}${value}`).slice(-totalLength);\n  }\n  /**\n   * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n   */\n\n\n  static formatMilliseconds(value) {\n    if (value < 10) {\n      return \"00\" + value;\n    } else if (value < 100) {\n      return \"0\" + value;\n    } else {\n      return String(value);\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["parseISO","DateUtils","normalizeHydratedDate","mixedDate","Date","mixedDateToDateString","value","formatZerolessValue","getFullYear","getMonth","getDate","mixedDateToDate","toUtc","useMilliseconds","date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","setUTCMilliseconds","mixedDateToTimeString","skipSeconds","getHours","getMinutes","getSeconds","mixedTimeToDate","hours","minutes","seconds","split","setHours","parseInt","setMinutes","setSeconds","mixedTimeToString","map","v","length","join","mixedDateToDatetimeString","finalValue","formatMilliseconds","getMilliseconds","mixedDateToUtcDatetimeString","simpleArrayToString","Array","isArray","i","String","stringToSimpleArray","simpleJsonToString","JSON","stringify","stringToSimpleJson","parse","simpleEnumToString","stringToSimpleEnum","columnMetadata","enum","isNaN","indexOf","totalLength","pad","repeat","slice"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\util\\DateUtils.ts"],"sourcesContent":["import { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { parseISO } from \"date-fns\"\n\n/**\n * Provides utilities to transform hydrated and persisted data.\n */\nexport class DateUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes date object hydrated from the database.\n     */\n    static normalizeHydratedDate(\n        mixedDate: Date | string | undefined,\n    ): Date | string | undefined {\n        if (!mixedDate) return mixedDate\n\n        return typeof mixedDate === \"string\"\n            ? new Date(mixedDate)\n            : (mixedDate as Date)\n    }\n\n    /**\n     * Converts given value into date string in a \"YYYY-MM-DD\" format.\n     */\n    static mixedDateToDateString(value: string | Date): string {\n        if (value instanceof Date)\n            return (\n                this.formatZerolessValue(value.getFullYear(), 4) +\n                \"-\" +\n                this.formatZerolessValue(value.getMonth() + 1) +\n                \"-\" +\n                this.formatZerolessValue(value.getDate())\n            )\n\n        return value\n    }\n\n    /**\n     * Converts given value into date object.\n     */\n    static mixedDateToDate(\n        mixedDate: Date | string,\n        toUtc: boolean = false,\n        useMilliseconds = true,\n    ): Date {\n        /**\n         * new Date(ISOString) is not a reliable parser to date strings.\n         * It's better to use 'date-fns' parser to parser string in ISO Format.\n         *\n         * The problem here is with wrong timezone.\n         *\n         * For example:\n         *\n         * ``new Date('2021-04-28')`` will generate `2021-04-28T00:00:00.000Z`\n         * in my timezone, which is not true for my timezone (GMT-0300). It should\n         * be `2021-04-28T03:00:00.000Z` as `new Date(2021, 3, 28)` generates.\n         *\n         * https://stackoverflow.com/a/2587398\n         */\n        let date =\n            typeof mixedDate === \"string\" ? parseISO(mixedDate) : mixedDate\n\n        if (toUtc)\n            date = new Date(\n                date.getUTCFullYear(),\n                date.getUTCMonth(),\n                date.getUTCDate(),\n                date.getUTCHours(),\n                date.getUTCMinutes(),\n                date.getUTCSeconds(),\n                date.getUTCMilliseconds(),\n            )\n\n        if (!useMilliseconds) date.setUTCMilliseconds(0)\n\n        return date\n    }\n\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedDateToTimeString(\n        value: Date | any,\n        skipSeconds: boolean = false,\n    ): string | any {\n        if (value instanceof Date)\n            return (\n                this.formatZerolessValue(value.getHours()) +\n                \":\" +\n                this.formatZerolessValue(value.getMinutes()) +\n                (!skipSeconds\n                    ? \":\" + this.formatZerolessValue(value.getSeconds())\n                    : \"\")\n            )\n\n        return value\n    }\n\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToDate(value: Date | any): string | any {\n        if (typeof value === \"string\") {\n            const [hours, minutes, seconds] = value.split(\":\")\n            const date = new Date()\n            if (hours) date.setHours(parseInt(hours))\n            if (minutes) date.setMinutes(parseInt(minutes))\n            if (seconds) date.setSeconds(parseInt(seconds))\n            return date\n        }\n\n        return value\n    }\n\n    /**\n     * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToString(\n        value: string | any,\n        skipSeconds: boolean = false,\n    ): string | any {\n        value =\n            value instanceof Date\n                ? value.getHours() +\n                  \":\" +\n                  value.getMinutes() +\n                  (!skipSeconds ? \":\" + value.getSeconds() : \"\")\n                : value\n        if (typeof value === \"string\") {\n            return value\n                .split(\":\")\n                .map((v) => (v.length === 1 ? \"0\" + v : v)) // append zero at beginning if we have a first-zero-less number\n                .join(\":\")\n        }\n\n        return value\n    }\n\n    /**\n     * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n     */\n    static mixedDateToDatetimeString(\n        value: Date | any,\n        useMilliseconds?: boolean,\n    ): string | any {\n        if (typeof value === \"string\") {\n            value = new Date(value)\n        }\n        if (value instanceof Date) {\n            let finalValue =\n                this.formatZerolessValue(value.getFullYear(), 4) +\n                \"-\" +\n                this.formatZerolessValue(value.getMonth() + 1) +\n                \"-\" +\n                this.formatZerolessValue(value.getDate()) +\n                \" \" +\n                this.formatZerolessValue(value.getHours()) +\n                \":\" +\n                this.formatZerolessValue(value.getMinutes()) +\n                \":\" +\n                this.formatZerolessValue(value.getSeconds())\n\n            if (useMilliseconds)\n                finalValue += `.${this.formatMilliseconds(\n                    value.getMilliseconds(),\n                )}`\n\n            value = finalValue\n        }\n\n        return value\n    }\n\n    /**\n     * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss.sss\" format.\n     */\n    static mixedDateToUtcDatetimeString(value: Date | any): string | any {\n        if (typeof value === \"string\") {\n            value = new Date(value)\n        }\n        if (value instanceof Date) {\n            return (\n                this.formatZerolessValue(value.getUTCFullYear(), 4) +\n                \"-\" +\n                this.formatZerolessValue(value.getUTCMonth() + 1) +\n                \"-\" +\n                this.formatZerolessValue(value.getUTCDate()) +\n                \" \" +\n                this.formatZerolessValue(value.getUTCHours()) +\n                \":\" +\n                this.formatZerolessValue(value.getUTCMinutes()) +\n                \":\" +\n                this.formatZerolessValue(value.getUTCSeconds()) +\n                \".\" +\n                this.formatMilliseconds(value.getUTCMilliseconds())\n            )\n        }\n\n        return value\n    }\n\n    /**\n     * Converts each item in the given array to string joined by \",\" separator.\n     */\n    static simpleArrayToString(value: any[] | any): string[] | any {\n        if (Array.isArray(value)) {\n            return (value as any[]).map((i) => String(i)).join(\",\")\n        }\n\n        return value\n    }\n\n    /**\n     * Converts given string to simple array split by \",\" separator.\n     */\n    static stringToSimpleArray(value: string | any): string | any {\n        if (typeof value === \"string\") {\n            if (value.length > 0) {\n                return value.split(\",\")\n            } else {\n                return []\n            }\n        }\n\n        return value\n    }\n\n    static simpleJsonToString(value: any): string {\n        return JSON.stringify(value)\n    }\n\n    static stringToSimpleJson(value: any) {\n        return typeof value === \"string\" ? JSON.parse(value) : value\n    }\n\n    static simpleEnumToString(value: any) {\n        return \"\" + value\n    }\n\n    static stringToSimpleEnum(value: any, columnMetadata: ColumnMetadata) {\n        if (\n            columnMetadata.enum &&\n            !isNaN(value) &&\n            columnMetadata.enum.indexOf(parseInt(value)) >= 0\n        ) {\n            // convert to number if that exists in poosible enum options\n            value = parseInt(value)\n        }\n\n        return value\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Formats given number to \"0x\" format, e.g. if the totalLength = 2 and the value is 1 then it will return \"01\".\n     */\n    private static formatZerolessValue(value: number, totalLength = 2): string {\n        const pad = \"0\".repeat(totalLength)\n\n        return String(`${pad}${value}`).slice(-totalLength)\n    }\n\n    /**\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n     */\n    private static formatMilliseconds(value: number): string {\n        if (value < 10) {\n            return \"00\" + value\n        } else if (value < 100) {\n            return \"0\" + value\n        } else {\n            return String(value)\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}