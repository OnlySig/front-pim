{"ast":null,"code":"import { DataSource } from \"../data-source/DataSource\";\nimport { ConnectionNotFoundError } from \"../error/ConnectionNotFoundError\";\nimport { AlreadyHasActiveConnectionError } from \"../error/AlreadyHasActiveConnectionError\";\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n *\n * @deprecated\n */\n\nexport class ConnectionManager {\n  constructor() {\n    /**\n     * Internal lookup to quickly get from a connection name to the Connection object.\n     */\n    this.connectionMap = new Map();\n  }\n  /**\n   * List of connections registered in this connection manager.\n   */\n\n\n  get connections() {\n    return Array.from(this.connectionMap.values());\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Checks if connection with the given name exist in the manager.\n   */\n\n\n  has(name) {\n    return this.connectionMap.has(name);\n  }\n  /**\n   * Gets registered connection with the given name.\n   * If connection name is not given then it will get a default connection.\n   * Throws error if connection with the given name was not found.\n   */\n\n\n  get() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"default\";\n    const connection = this.connectionMap.get(name);\n    if (!connection) throw new ConnectionNotFoundError(name);\n    return connection;\n  }\n  /**\n   * Creates a new connection based on the given connection options and registers it in the manager.\n   * Connection won't be established, you'll need to manually call connect method to establish connection.\n   */\n\n\n  create(options) {\n    // check if such connection is already registered\n    const existConnection = this.connectionMap.get(options.name || \"default\");\n\n    if (existConnection) {\n      // if connection is registered and its not closed then throw an error\n      if (existConnection.isInitialized) throw new AlreadyHasActiveConnectionError(options.name || \"default\");\n    } // create a new connection\n\n\n    const connection = new DataSource(options);\n    this.connectionMap.set(connection.name, connection);\n    return connection;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAA2B,2BAA3B;AACA,SAASC,uBAAT,QAAwC,kCAAxC;AAEA,SAASC,+BAAT,QAAgD,0CAAhD;AAEA;;;;;;;AAMA,OAAM,MAAOC,iBAAP,CAAwB;EAA9BC;IAQI;;;IAGiB,qBAAyC,IAAIC,GAAJ,EAAzC;EA+CpB;EAzDG;;;;;EAGe,IAAXC,WAAW;IACX,OAAOC,KAAK,CAACC,IAAN,CAAW,KAAKC,aAAL,CAAmBC,MAAnB,EAAX,CAAP;EACH,CANyB,CAa1B;EACA;EACA;;EAEA;;;;;EAGAC,GAAG,CAACC,IAAD,EAAa;IACZ,OAAO,KAAKH,aAAL,CAAmBE,GAAnB,CAAuBC,IAAvB,CAAP;EACH;EAED;;;;;;;EAKAC,GAAG,GAAyB;IAAA,IAAxBD,IAAwB,uEAAT,SAAS;IACxB,MAAME,UAAU,GAAG,KAAKL,aAAL,CAAmBI,GAAnB,CAAuBD,IAAvB,CAAnB;IACA,IAAI,CAACE,UAAL,EAAiB,MAAM,IAAIb,uBAAJ,CAA4BW,IAA5B,CAAN;IAEjB,OAAOE,UAAP;EACH;EAED;;;;;;EAIAC,MAAM,CAACC,OAAD,EAA2B;IAC7B;IACA,MAAMC,eAAe,GAAG,KAAKR,aAAL,CAAmBI,GAAnB,CACpBG,OAAO,CAACJ,IAAR,IAAgB,SADI,CAAxB;;IAGA,IAAIK,eAAJ,EAAqB;MACjB;MACA,IAAIA,eAAe,CAACC,aAApB,EACI,MAAM,IAAIhB,+BAAJ,CACFc,OAAO,CAACJ,IAAR,IAAgB,SADd,CAAN;IAGP,CAX4B,CAa7B;;;IACA,MAAME,UAAU,GAAG,IAAId,UAAJ,CAAegB,OAAf,CAAnB;IACA,KAAKP,aAAL,CAAmBU,GAAnB,CAAuBL,UAAU,CAACF,IAAlC,EAAwCE,UAAxC;IACA,OAAOA,UAAP;EACH;;AAzDyB","names":["DataSource","ConnectionNotFoundError","AlreadyHasActiveConnectionError","ConnectionManager","constructor","Map","connections","Array","from","connectionMap","values","has","name","get","connection","create","options","existConnection","isInitialized","set"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\connection\\ConnectionManager.ts"],"sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { ConnectionNotFoundError } from \"../error/ConnectionNotFoundError\"\nimport { DataSourceOptions } from \"../data-source/DataSourceOptions\"\nimport { AlreadyHasActiveConnectionError } from \"../error/AlreadyHasActiveConnectionError\"\n\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n *\n * @deprecated\n */\nexport class ConnectionManager {\n    /**\n     * List of connections registered in this connection manager.\n     */\n    get connections(): DataSource[] {\n        return Array.from(this.connectionMap.values())\n    }\n\n    /**\n     * Internal lookup to quickly get from a connection name to the Connection object.\n     */\n    private readonly connectionMap: Map<string, DataSource> = new Map()\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if connection with the given name exist in the manager.\n     */\n    has(name: string): boolean {\n        return this.connectionMap.has(name)\n    }\n\n    /**\n     * Gets registered connection with the given name.\n     * If connection name is not given then it will get a default connection.\n     * Throws error if connection with the given name was not found.\n     */\n    get(name: string = \"default\"): DataSource {\n        const connection = this.connectionMap.get(name)\n        if (!connection) throw new ConnectionNotFoundError(name)\n\n        return connection\n    }\n\n    /**\n     * Creates a new connection based on the given connection options and registers it in the manager.\n     * Connection won't be established, you'll need to manually call connect method to establish connection.\n     */\n    create(options: DataSourceOptions): DataSource {\n        // check if such connection is already registered\n        const existConnection = this.connectionMap.get(\n            options.name || \"default\",\n        )\n        if (existConnection) {\n            // if connection is registered and its not closed then throw an error\n            if (existConnection.isInitialized)\n                throw new AlreadyHasActiveConnectionError(\n                    options.name || \"default\",\n                )\n        }\n\n        // create a new connection\n        const connection = new DataSource(options)\n        this.connectionMap.set(connection.name, connection)\n        return connection\n    }\n}\n"]},"metadata":{},"sourceType":"module"}