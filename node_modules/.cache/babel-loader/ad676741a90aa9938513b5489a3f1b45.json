{"ast":null,"code":"import { QueryBuilder } from \"./QueryBuilder\";\nimport { DeleteResult } from \"./result/DeleteResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\n\nexport class DeleteQueryBuilder extends QueryBuilder {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connectionOrQueryBuilder, queryRunner) {\n    super(connectionOrQueryBuilder, queryRunner);\n    this[\"@instanceof\"] = Symbol.for(\"DeleteQueryBuilder\");\n    this.expressionMap.aliasNamePrefixingEnabled = false;\n  } // -------------------------------------------------------------------------\n  // Public Implemented Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Gets generated SQL query without parameters being replaced.\n   */\n\n\n  getQuery() {\n    let sql = this.createComment();\n    sql += this.createCteExpression();\n    sql += this.createDeleteExpression();\n    return sql.trim();\n  }\n  /**\n   * Executes sql generated by query builder and returns raw database results.\n   */\n\n\n  async execute() {\n    const [sql, parameters] = this.getQueryAndParameters();\n    const queryRunner = this.obtainQueryRunner();\n    let transactionStartedByUs = false;\n\n    try {\n      // start transaction if it was enabled\n      if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n        await queryRunner.startTransaction();\n        transactionStartedByUs = true;\n      } // call before deletion methods in listeners and subscribers\n\n\n      if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {\n        await queryRunner.broadcaster.broadcast(\"BeforeRemove\", this.expressionMap.mainAlias.metadata);\n      } // execute query\n\n\n      const queryResult = await queryRunner.query(sql, parameters, true);\n      const deleteResult = DeleteResult.from(queryResult); // call after deletion methods in listeners and subscribers\n\n      if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata) {\n        await queryRunner.broadcaster.broadcast(\"AfterRemove\", this.expressionMap.mainAlias.metadata);\n      } // close transaction if we started it\n\n\n      if (transactionStartedByUs) await queryRunner.commitTransaction();\n      return deleteResult;\n    } catch (error) {\n      // rollback transaction if we started it\n      if (transactionStartedByUs) {\n        try {\n          await queryRunner.rollbackTransaction();\n        } catch (rollbackError) {}\n      }\n\n      throw error;\n    } finally {\n      if (queryRunner !== this.queryRunner) {\n        // means we created our own query runner\n        await queryRunner.release();\n      }\n    }\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Specifies FROM which entity's table select/update/delete will be executed.\n   * Also sets a main string alias of the selection data.\n   */\n\n\n  from(entityTarget, aliasName) {\n    entityTarget = InstanceChecker.isEntitySchema(entityTarget) ? entityTarget.options.name : entityTarget;\n    const mainAlias = this.createFromAlias(entityTarget, aliasName);\n    this.expressionMap.setMainAlias(mainAlias);\n    return this;\n  }\n  /**\n   * Sets WHERE condition in the query builder.\n   * If you had previously WHERE expression defined,\n   * calling this function will override previously set WHERE conditions.\n   * Additionally you can add parameters used in where expression.\n   */\n\n\n  where(where, parameters) {\n    this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n\n    const condition = this.getWhereCondition(where);\n    if (condition) this.expressionMap.wheres = [{\n      type: \"simple\",\n      condition: condition\n    }];\n    if (parameters) this.setParameters(parameters);\n    return this;\n  }\n  /**\n   * Adds new AND WHERE condition in the query builder.\n   * Additionally you can add parameters used in where expression.\n   */\n\n\n  andWhere(where, parameters) {\n    this.expressionMap.wheres.push({\n      type: \"and\",\n      condition: this.getWhereCondition(where)\n    });\n    if (parameters) this.setParameters(parameters);\n    return this;\n  }\n  /**\n   * Adds new OR WHERE condition in the query builder.\n   * Additionally you can add parameters used in where expression.\n   */\n\n\n  orWhere(where, parameters) {\n    this.expressionMap.wheres.push({\n      type: \"or\",\n      condition: this.getWhereCondition(where)\n    });\n    if (parameters) this.setParameters(parameters);\n    return this;\n  }\n  /**\n   * Sets WHERE condition in the query builder with a condition for the given ids.\n   * If you had previously WHERE expression defined,\n   * calling this function will override previously set WHERE conditions.\n   */\n\n\n  whereInIds(ids) {\n    return this.where(this.getWhereInIdsCondition(ids));\n  }\n  /**\n   * Adds new AND WHERE with conditions for the given ids.\n   */\n\n\n  andWhereInIds(ids) {\n    return this.andWhere(this.getWhereInIdsCondition(ids));\n  }\n  /**\n   * Adds new OR WHERE with conditions for the given ids.\n   */\n\n\n  orWhereInIds(ids) {\n    return this.orWhere(this.getWhereInIdsCondition(ids));\n  }\n  /**\n   * Optional returning/output clause.\n   */\n\n\n  output(output) {\n    return this.returning(output);\n  }\n  /**\n   * Optional returning/output clause.\n   */\n\n\n  returning(returning) {\n    // not all databases support returning/output cause\n    if (!this.connection.driver.isReturningSqlSupported(\"delete\")) {\n      throw new ReturningStatementNotSupportedError();\n    }\n\n    this.expressionMap.returning = returning;\n    return this;\n  } // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates DELETE express used to perform query.\n   */\n\n\n  createDeleteExpression() {\n    const tableName = this.getTableName(this.getMainTableName());\n    const whereExpression = this.createWhereExpression();\n    const returningExpression = this.createReturningExpression(\"delete\");\n\n    if (returningExpression === \"\") {\n      return `DELETE FROM ${tableName}${whereExpression}`;\n    }\n\n    if (this.connection.driver.options.type === \"mssql\") {\n      return `DELETE FROM ${tableName} OUTPUT ${returningExpression}${whereExpression}`;\n    }\n\n    return `DELETE FROM ${tableName}${whereExpression} RETURNING ${returningExpression}`;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["QueryBuilder","DeleteResult","ReturningStatementNotSupportedError","InstanceChecker","DeleteQueryBuilder","constructor","connectionOrQueryBuilder","queryRunner","Symbol","for","expressionMap","aliasNamePrefixingEnabled","getQuery","sql","createComment","createCteExpression","createDeleteExpression","trim","execute","parameters","getQueryAndParameters","obtainQueryRunner","transactionStartedByUs","useTransaction","isTransactionActive","startTransaction","callListeners","mainAlias","hasMetadata","broadcaster","broadcast","metadata","queryResult","query","deleteResult","from","commitTransaction","error","rollbackTransaction","rollbackError","release","entityTarget","aliasName","isEntitySchema","options","name","createFromAlias","setMainAlias","where","wheres","condition","getWhereCondition","type","setParameters","andWhere","push","orWhere","whereInIds","ids","getWhereInIdsCondition","andWhereInIds","orWhereInIds","output","returning","connection","driver","isReturningSqlSupported","tableName","getTableName","getMainTableName","whereExpression","createWhereExpression","returningExpression","createReturningExpression"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\query-builder\\DeleteQueryBuilder.ts"],"sourcesContent":["import { QueryBuilder } from \"./QueryBuilder\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { WhereExpressionBuilder } from \"./WhereExpressionBuilder\"\nimport { Brackets } from \"./Brackets\"\nimport { DeleteResult } from \"./result/DeleteResult\"\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class DeleteQueryBuilder<Entity extends ObjectLiteral>\n    extends QueryBuilder<Entity>\n    implements WhereExpressionBuilder\n{\n    readonly \"@instanceof\" = Symbol.for(\"DeleteQueryBuilder\")\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        connectionOrQueryBuilder: DataSource | QueryBuilder<any>,\n        queryRunner?: QueryRunner,\n    ) {\n        super(connectionOrQueryBuilder as any, queryRunner)\n        this.expressionMap.aliasNamePrefixingEnabled = false\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createComment()\n        sql += this.createCteExpression()\n        sql += this.createDeleteExpression()\n        return sql.trim()\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<DeleteResult> {\n        const [sql, parameters] = this.getQueryAndParameters()\n        const queryRunner = this.obtainQueryRunner()\n        let transactionStartedByUs: boolean = false\n\n        try {\n            // start transaction if it was enabled\n            if (\n                this.expressionMap.useTransaction === true &&\n                queryRunner.isTransactionActive === false\n            ) {\n                await queryRunner.startTransaction()\n                transactionStartedByUs = true\n            }\n\n            // call before deletion methods in listeners and subscribers\n            if (\n                this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias!.hasMetadata\n            ) {\n                await queryRunner.broadcaster.broadcast(\n                    \"BeforeRemove\",\n                    this.expressionMap.mainAlias!.metadata,\n                )\n            }\n\n            // execute query\n            const queryResult = await queryRunner.query(sql, parameters, true)\n            const deleteResult = DeleteResult.from(queryResult)\n\n            // call after deletion methods in listeners and subscribers\n            if (\n                this.expressionMap.callListeners === true &&\n                this.expressionMap.mainAlias!.hasMetadata\n            ) {\n                await queryRunner.broadcaster.broadcast(\n                    \"AfterRemove\",\n                    this.expressionMap.mainAlias!.metadata,\n                )\n            }\n\n            // close transaction if we started it\n            if (transactionStartedByUs) await queryRunner.commitTransaction()\n\n            return deleteResult\n        } catch (error) {\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction()\n                } catch (rollbackError) {}\n            }\n            throw error\n        } finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release()\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from<T extends ObjectLiteral>(\n        entityTarget: EntityTarget<T>,\n        aliasName?: string,\n    ): DeleteQueryBuilder<T> {\n        entityTarget = InstanceChecker.isEntitySchema(entityTarget)\n            ? entityTarget.options.name\n            : entityTarget\n        const mainAlias = this.createFromAlias(entityTarget, aliasName)\n        this.expressionMap.setMainAlias(mainAlias)\n        return this as any as DeleteQueryBuilder<T>\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(\n        where:\n            | Brackets\n            | string\n            | ((qb: this) => string)\n            | ObjectLiteral\n            | ObjectLiteral[],\n        parameters?: ObjectLiteral,\n    ): this {\n        this.expressionMap.wheres = [] // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.getWhereCondition(where)\n        if (condition)\n            this.expressionMap.wheres = [\n                { type: \"simple\", condition: condition },\n            ]\n        if (parameters) this.setParameters(parameters)\n        return this\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(\n        where:\n            | Brackets\n            | string\n            | ((qb: this) => string)\n            | ObjectLiteral\n            | ObjectLiteral[],\n        parameters?: ObjectLiteral,\n    ): this {\n        this.expressionMap.wheres.push({\n            type: \"and\",\n            condition: this.getWhereCondition(where),\n        })\n        if (parameters) this.setParameters(parameters)\n        return this\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(\n        where:\n            | Brackets\n            | string\n            | ((qb: this) => string)\n            | ObjectLiteral\n            | ObjectLiteral[],\n        parameters?: ObjectLiteral,\n    ): this {\n        this.expressionMap.wheres.push({\n            type: \"or\",\n            condition: this.getWhereCondition(where),\n        })\n        if (parameters) this.setParameters(parameters)\n        return this\n    }\n\n    /**\n     * Sets WHERE condition in the query builder with a condition for the given ids.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     */\n    whereInIds(ids: any | any[]): this {\n        return this.where(this.getWhereInIdsCondition(ids))\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any | any[]): this {\n        return this.andWhere(this.getWhereInIdsCondition(ids))\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any | any[]): this {\n        return this.orWhere(this.getWhereInIdsCondition(ids))\n    }\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    output(columns: string[]): this\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    output(output: string): this\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string | string[]): this\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string | string[]): this {\n        return this.returning(output)\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    returning(columns: string[]): this\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    returning(returning: string): this\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string | string[]): this\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string | string[]): this {\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported(\"delete\")) {\n            throw new ReturningStatementNotSupportedError()\n        }\n\n        this.expressionMap.returning = returning\n        return this\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates DELETE express used to perform query.\n     */\n    protected createDeleteExpression() {\n        const tableName = this.getTableName(this.getMainTableName())\n        const whereExpression = this.createWhereExpression()\n        const returningExpression = this.createReturningExpression(\"delete\")\n\n        if (returningExpression === \"\") {\n            return `DELETE FROM ${tableName}${whereExpression}`\n        }\n        if (this.connection.driver.options.type === \"mssql\") {\n            return `DELETE FROM ${tableName} OUTPUT ${returningExpression}${whereExpression}`\n        }\n        return `DELETE FROM ${tableName}${whereExpression} RETURNING ${returningExpression}`\n    }\n}\n"]},"metadata":{},"sourceType":"module"}