{"ast":null,"code":"import { Subject } from \"../Subject\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n/**\n * Builds operations needs to be executed for one-to-one non-owner relations of the given subjects.\n *\n * by example: post contains one-to-one non-owner relation with category in the property called \"category\", e.g.\n *             @OneToOne(type => Category, category => category.post) category: Category\n *             If user sets a category into the post and saves post we need to bind them.\n *             This operation requires updation of category table since its owner of the relation and contains a join column.\n *\n * note: this class shares lot of things with OneToManyUpdateBuilder, so when you change this class\n *       make sure to reflect changes there as well.\n */\n\nexport class OneToOneInverseSideSubjectBuilder {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(subjects) {\n    this.subjects = subjects;\n  } // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n\n  /**\n   * Builds all required operations.\n   */\n\n\n  build() {\n    this.subjects.forEach(subject => {\n      subject.metadata.oneToOneRelations.forEach(relation => {\n        // we don't need owning relations, this operation is only for inverse side of one-to-one relations\n        // skip relations for which persistence is disabled\n        if (relation.isOwning || relation.persistenceEnabled === false) return;\n        this.buildForSubjectRelation(subject, relation);\n      });\n    });\n  } // ---------------------------------------------------------------------\n  // Protected Methods\n  // ---------------------------------------------------------------------\n\n  /**\n   * Builds operations for a given subject and relation.\n   *\n   * by example: subject is \"post\" entity we are saving here and relation is \"category\" inside it here.\n   */\n\n\n  buildForSubjectRelation(subject, relation) {\n    // prepare objects (relation id map) for the database entity\n    // note: subject.databaseEntity contains relation with loaded relation id only (id map)\n    // by example: since subject is a post, we are expecting to get post's category saved in the database here,\n    //             particularly its relation id, e.g. category id stored in the database\n    let relatedEntityDatabaseRelationId = undefined;\n    if (subject.databaseEntity) // related entity in the database can exist only if this entity (post) is saved\n      relatedEntityDatabaseRelationId = relation.getEntityValue(subject.databaseEntity); // get related entities of persisted entity\n    // by example: get category from the passed to persist post entity\n\n    let relatedEntity = relation.getEntityValue(subject.entity); // by example: relatedEntity is a category here\n\n    if (relatedEntity === undefined) // if relation is undefined then nothing to update\n      return; // if related entity is null then we need to check if there a bind in the database and unset it\n    // if there is no bind in the entity then we don't need to do anything\n    // by example: if post.category = null and category has this post in the database then we unset it\n\n    if (relatedEntity === null) {\n      // it makes sense to update database only there is a previously set value in the database\n      if (relatedEntityDatabaseRelationId) {\n        // todo: probably we can improve this in the future by finding entity with column those values,\n        // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns\n        // we create a new subject which operations will be executed in subject operation executor\n        const removedRelatedEntitySubject = new Subject({\n          metadata: relation.inverseEntityMetadata,\n          parentSubject: subject,\n          canBeUpdated: true,\n          identifier: relatedEntityDatabaseRelationId,\n          changeMaps: [{\n            relation: relation.inverseRelation,\n            value: null\n          }]\n        });\n        this.subjects.push(removedRelatedEntitySubject);\n      }\n\n      return;\n    } // else means entity is bind in the database\n    // extract only relation id from the related entities, since we only need it for comparison\n    // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n\n\n    let relationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // by example: relationIdMap is category.id map here, e.g. { id: ... }\n    // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n\n    let relatedEntitySubject = this.subjects.find(operateSubject => {\n      return !!operateSubject.entity && operateSubject.entity === relatedEntity;\n    }); // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n\n    if (relatedEntitySubject) relationIdMap = relatedEntitySubject.identifier; // if relationIdMap is undefined then it means user binds object which is not saved in the database yet\n    // by example: if post contains category which does not have id(s) yet (because its a new category)\n    //             it means its always newly inserted and relation update operation always must be created for it\n    //             it does not make sense to perform difference operation for it for both add and remove actions\n\n    if (!relationIdMap) {\n      // we decided to remove this error because it brings complications when saving object with non-saved entities\n      // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n      // in this persistence because he didn't pass this entity for save or he did not set cascades\n      // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n      // if (!relatedEntitySubject)\n      //     throw new TypeORMError(`One-to-one inverse relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n      //         `entity which does not exist in the database yet, thus cannot be bind in the database. ` +\n      //         `Please setup cascade insertion or save entity before binding it.`);\n      if (!relatedEntitySubject) return; // okay, so related subject exist and its marked for insertion, then add a new change map\n      // by example: this will tell category to insert into its post relation our post we are working with\n      //             relatedEntitySubject is newly inserted CategorySubject\n      //             relation.inverseRelation is OneToOne owner relation inside Category\n      //             subject is Post needs to be inserted into Category\n\n      relatedEntitySubject.changeMaps.push({\n        relation: relation.inverseRelation,\n        value: subject\n      });\n    } // check if this binding really exist in the database\n    // by example: find our post if its already bind to category in the database and its not equal to what user tries to set\n\n\n    const areRelatedIdEqualWithDatabase = relatedEntityDatabaseRelationId && OrmUtils.compareIds(relationIdMap, relatedEntityDatabaseRelationId); // if they aren't equal it means its a new relation and we need to \"bind\" them\n    // by example: this will tell category to insert into its post relation our post we are working with\n    //             relatedEntitySubject is newly inserted CategorySubject\n    //             relation.inverseRelation is ManyToOne relation inside Category\n    //             subject is Post needs to be inserted into Category\n\n    if (!areRelatedIdEqualWithDatabase) {\n      // if there is no relatedEntitySubject then it means \"category\" wasn't persisted,\n      // but since we are going to update \"category\" table (since its an owning side of relation with join column)\n      // we create a new subject here:\n      if (!relatedEntitySubject) {\n        relatedEntitySubject = new Subject({\n          metadata: relation.inverseEntityMetadata,\n          canBeUpdated: true,\n          identifier: relationIdMap\n        });\n        this.subjects.push(relatedEntitySubject);\n      }\n\n      relatedEntitySubject.changeMaps.push({\n        relation: relation.inverseRelation,\n        value: subject\n      });\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Subject","OrmUtils","OneToOneInverseSideSubjectBuilder","constructor","subjects","build","forEach","subject","metadata","oneToOneRelations","relation","isOwning","persistenceEnabled","buildForSubjectRelation","relatedEntityDatabaseRelationId","undefined","databaseEntity","getEntityValue","relatedEntity","entity","removedRelatedEntitySubject","inverseEntityMetadata","parentSubject","canBeUpdated","identifier","changeMaps","inverseRelation","value","push","relationIdMap","getEntityIdMap","relatedEntitySubject","find","operateSubject","areRelatedIdEqualWithDatabase","compareIds"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\persistence\\subject-builder\\OneToOneInverseSideSubjectBuilder.ts"],"sourcesContent":["import { Subject } from \"../Subject\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { RelationMetadata } from \"../../metadata/RelationMetadata\"\n\n/**\n * Builds operations needs to be executed for one-to-one non-owner relations of the given subjects.\n *\n * by example: post contains one-to-one non-owner relation with category in the property called \"category\", e.g.\n *             @OneToOne(type => Category, category => category.post) category: Category\n *             If user sets a category into the post and saves post we need to bind them.\n *             This operation requires updation of category table since its owner of the relation and contains a join column.\n *\n * note: this class shares lot of things with OneToManyUpdateBuilder, so when you change this class\n *       make sure to reflect changes there as well.\n */\nexport class OneToOneInverseSideSubjectBuilder {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected subjects: Subject[]) {}\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds all required operations.\n     */\n    build(): void {\n        this.subjects.forEach((subject) => {\n            subject.metadata.oneToOneRelations.forEach((relation) => {\n                // we don't need owning relations, this operation is only for inverse side of one-to-one relations\n                // skip relations for which persistence is disabled\n                if (relation.isOwning || relation.persistenceEnabled === false)\n                    return\n\n                this.buildForSubjectRelation(subject, relation)\n            })\n        })\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"category\" inside it here.\n     */\n    protected buildForSubjectRelation(\n        subject: Subject,\n        relation: RelationMetadata,\n    ) {\n        // prepare objects (relation id map) for the database entity\n        // note: subject.databaseEntity contains relation with loaded relation id only (id map)\n        // by example: since subject is a post, we are expecting to get post's category saved in the database here,\n        //             particularly its relation id, e.g. category id stored in the database\n        let relatedEntityDatabaseRelationId: ObjectLiteral | undefined =\n            undefined\n        if (subject.databaseEntity)\n            // related entity in the database can exist only if this entity (post) is saved\n            relatedEntityDatabaseRelationId = relation.getEntityValue(\n                subject.databaseEntity,\n            )\n\n        // get related entities of persisted entity\n        // by example: get category from the passed to persist post entity\n        let relatedEntity: ObjectLiteral | null = relation.getEntityValue(\n            subject.entity!,\n        ) // by example: relatedEntity is a category here\n        if (relatedEntity === undefined)\n            // if relation is undefined then nothing to update\n            return\n\n        // if related entity is null then we need to check if there a bind in the database and unset it\n        // if there is no bind in the entity then we don't need to do anything\n        // by example: if post.category = null and category has this post in the database then we unset it\n        if (relatedEntity === null) {\n            // it makes sense to update database only there is a previously set value in the database\n            if (relatedEntityDatabaseRelationId) {\n                // todo: probably we can improve this in the future by finding entity with column those values,\n                // todo: maybe it was already in persistence process. This is possible due to unique requirements of join columns\n                // we create a new subject which operations will be executed in subject operation executor\n\n                const removedRelatedEntitySubject = new Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    parentSubject: subject,\n                    canBeUpdated: true,\n                    identifier: relatedEntityDatabaseRelationId,\n                    changeMaps: [\n                        {\n                            relation: relation.inverseRelation!,\n                            value: null,\n                        },\n                    ],\n                })\n                this.subjects.push(removedRelatedEntitySubject)\n            }\n\n            return\n        } // else means entity is bind in the database\n\n        // extract only relation id from the related entities, since we only need it for comparison\n        // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n        let relationIdMap =\n            relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity) // by example: relationIdMap is category.id map here, e.g. { id: ... }\n\n        // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n        let relatedEntitySubject = this.subjects.find((operateSubject) => {\n            return (\n                !!operateSubject.entity &&\n                operateSubject.entity === relatedEntity\n            )\n        })\n\n        // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n        if (relatedEntitySubject)\n            relationIdMap = relatedEntitySubject.identifier\n\n        // if relationIdMap is undefined then it means user binds object which is not saved in the database yet\n        // by example: if post contains category which does not have id(s) yet (because its a new category)\n        //             it means its always newly inserted and relation update operation always must be created for it\n        //             it does not make sense to perform difference operation for it for both add and remove actions\n        if (!relationIdMap) {\n            // we decided to remove this error because it brings complications when saving object with non-saved entities\n            // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n            // in this persistence because he didn't pass this entity for save or he did not set cascades\n            // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n            // if (!relatedEntitySubject)\n            //     throw new TypeORMError(`One-to-one inverse relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n            //         `entity which does not exist in the database yet, thus cannot be bind in the database. ` +\n            //         `Please setup cascade insertion or save entity before binding it.`);\n            if (!relatedEntitySubject) return\n\n            // okay, so related subject exist and its marked for insertion, then add a new change map\n            // by example: this will tell category to insert into its post relation our post we are working with\n            //             relatedEntitySubject is newly inserted CategorySubject\n            //             relation.inverseRelation is OneToOne owner relation inside Category\n            //             subject is Post needs to be inserted into Category\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation!,\n                value: subject,\n            })\n        }\n\n        // check if this binding really exist in the database\n        // by example: find our post if its already bind to category in the database and its not equal to what user tries to set\n        const areRelatedIdEqualWithDatabase =\n            relatedEntityDatabaseRelationId &&\n            OrmUtils.compareIds(relationIdMap, relatedEntityDatabaseRelationId)\n\n        // if they aren't equal it means its a new relation and we need to \"bind\" them\n        // by example: this will tell category to insert into its post relation our post we are working with\n        //             relatedEntitySubject is newly inserted CategorySubject\n        //             relation.inverseRelation is ManyToOne relation inside Category\n        //             subject is Post needs to be inserted into Category\n        if (!areRelatedIdEqualWithDatabase) {\n            // if there is no relatedEntitySubject then it means \"category\" wasn't persisted,\n            // but since we are going to update \"category\" table (since its an owning side of relation with join column)\n            // we create a new subject here:\n            if (!relatedEntitySubject) {\n                relatedEntitySubject = new Subject({\n                    metadata: relation.inverseEntityMetadata,\n                    canBeUpdated: true,\n                    identifier: relationIdMap,\n                })\n                this.subjects.push(relatedEntitySubject)\n            }\n\n            relatedEntitySubject.changeMaps.push({\n                relation: relation.inverseRelation!,\n                value: subject,\n            })\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}