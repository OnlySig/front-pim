{"ast":null,"code":"import { TableColumn } from \"./TableColumn\";\nimport { TableIndex } from \"./TableIndex\";\nimport { TableForeignKey } from \"./TableForeignKey\";\nimport { TableUtils } from \"../util/TableUtils\";\nimport { TableUnique } from \"./TableUnique\";\nimport { TableCheck } from \"./TableCheck\";\nimport { TableExclusion } from \"./TableExclusion\";\n/**\n * Table in the database represented in this class.\n */\n\nexport class Table {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"Table\");\n    /**\n     * Table columns.\n     */\n\n    this.columns = [];\n    /**\n     * Table indices.\n     */\n\n    this.indices = [];\n    /**\n     * Table foreign keys.\n     */\n\n    this.foreignKeys = [];\n    /**\n     * Table unique constraints.\n     */\n\n    this.uniques = [];\n    /**\n     * Table check constraints.\n     */\n\n    this.checks = [];\n    /**\n     * Table exclusion constraints.\n     */\n\n    this.exclusions = [];\n    /**\n     * Indicates if table was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new tables.\n     */\n\n    this.justCreated = false;\n    /**\n     * Enables Sqlite \"WITHOUT ROWID\" modifier for the \"CREATE TABLE\" statement\n     */\n\n    this.withoutRowid = false;\n\n    if (options) {\n      this.database = options.database;\n      this.schema = options.schema;\n      this.name = options.name;\n      if (options.columns) this.columns = options.columns.map(column => new TableColumn(column));\n      if (options.indices) this.indices = options.indices.map(index => new TableIndex(index));\n      if (options.foreignKeys) this.foreignKeys = options.foreignKeys.map(foreignKey => new TableForeignKey({ ...foreignKey,\n        referencedDatabase: (foreignKey === null || foreignKey === void 0 ? void 0 : foreignKey.referencedDatabase) || options.database,\n        referencedSchema: (foreignKey === null || foreignKey === void 0 ? void 0 : foreignKey.referencedSchema) || options.schema\n      }));\n      if (options.uniques) this.uniques = options.uniques.map(unique => new TableUnique(unique));\n      if (options.checks) this.checks = options.checks.map(check => new TableCheck(check));\n      if (options.exclusions) this.exclusions = options.exclusions.map(exclusion => new TableExclusion(exclusion));\n      if (options.justCreated !== undefined) this.justCreated = options.justCreated;\n      if (options.withoutRowid) this.withoutRowid = options.withoutRowid;\n      this.engine = options.engine;\n    }\n  } // -------------------------------------------------------------------------\n  // Accessors\n  // -------------------------------------------------------------------------\n\n\n  get primaryColumns() {\n    return this.columns.filter(column => column.isPrimary);\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Clones this table to a new table with all properties cloned.\n   */\n\n\n  clone() {\n    return new Table({\n      schema: this.schema,\n      database: this.database,\n      name: this.name,\n      columns: this.columns.map(column => column.clone()),\n      indices: this.indices.map(constraint => constraint.clone()),\n      foreignKeys: this.foreignKeys.map(constraint => constraint.clone()),\n      uniques: this.uniques.map(constraint => constraint.clone()),\n      checks: this.checks.map(constraint => constraint.clone()),\n      exclusions: this.exclusions.map(constraint => constraint.clone()),\n      justCreated: this.justCreated,\n      withoutRowid: this.withoutRowid,\n      engine: this.engine\n    });\n  }\n  /**\n   * Add column and creates its constraints.\n   */\n\n\n  addColumn(column) {\n    this.columns.push(column);\n  }\n  /**\n   * Remove column and its constraints.\n   */\n\n\n  removeColumn(column) {\n    const foundColumn = this.columns.find(c => c.name === column.name);\n    if (foundColumn) this.columns.splice(this.columns.indexOf(foundColumn), 1);\n  }\n  /**\n   * Adds unique constraint.\n   */\n\n\n  addUniqueConstraint(uniqueConstraint) {\n    this.uniques.push(uniqueConstraint);\n\n    if (uniqueConstraint.columnNames.length === 1) {\n      const uniqueColumn = this.columns.find(column => column.name === uniqueConstraint.columnNames[0]);\n      if (uniqueColumn) uniqueColumn.isUnique = true;\n    }\n  }\n  /**\n   * Removes unique constraint.\n   */\n\n\n  removeUniqueConstraint(removedUnique) {\n    const foundUnique = this.uniques.find(unique => unique.name === removedUnique.name);\n\n    if (foundUnique) {\n      this.uniques.splice(this.uniques.indexOf(foundUnique), 1);\n\n      if (foundUnique.columnNames.length === 1) {\n        const uniqueColumn = this.columns.find(column => column.name === foundUnique.columnNames[0]);\n        if (uniqueColumn) uniqueColumn.isUnique = false;\n      }\n    }\n  }\n  /**\n   * Adds check constraint.\n   */\n\n\n  addCheckConstraint(checkConstraint) {\n    this.checks.push(checkConstraint);\n  }\n  /**\n   * Removes check constraint.\n   */\n\n\n  removeCheckConstraint(removedCheck) {\n    const foundCheck = this.checks.find(check => check.name === removedCheck.name);\n\n    if (foundCheck) {\n      this.checks.splice(this.checks.indexOf(foundCheck), 1);\n    }\n  }\n  /**\n   * Adds exclusion constraint.\n   */\n\n\n  addExclusionConstraint(exclusionConstraint) {\n    this.exclusions.push(exclusionConstraint);\n  }\n  /**\n   * Removes exclusion constraint.\n   */\n\n\n  removeExclusionConstraint(removedExclusion) {\n    const foundExclusion = this.exclusions.find(exclusion => exclusion.name === removedExclusion.name);\n\n    if (foundExclusion) {\n      this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1);\n    }\n  }\n  /**\n   * Adds foreign keys.\n   */\n\n\n  addForeignKey(foreignKey) {\n    this.foreignKeys.push(foreignKey);\n  }\n  /**\n   * Removes foreign key.\n   */\n\n\n  removeForeignKey(removedForeignKey) {\n    const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name);\n    if (fk) this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n  }\n  /**\n   * Adds index.\n   */\n\n\n  addIndex(index) {\n    let isMysql = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.indices.push(index); // in Mysql unique indices and unique constraints are the same thing\n    // if index is unique and have only one column, we mark this column as unique\n\n    if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n      const column = this.columns.find(c => c.name === index.columnNames[0]);\n      if (column) column.isUnique = true;\n    }\n  }\n  /**\n   * Removes index.\n   */\n\n\n  removeIndex(tableIndex) {\n    let isMysql = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const index = this.indices.find(index => index.name === tableIndex.name);\n\n    if (index) {\n      this.indices.splice(this.indices.indexOf(index), 1); // in Mysql unique indices and unique constraints are the same thing\n      // if index is unique and have only one column, we move `unique` attribute from its column\n\n      if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n        const column = this.columns.find(c => c.name === index.columnNames[0]);\n        if (column) column.isUnique = this.indices.some(ind => ind.columnNames.length === 1 && ind.columnNames[0] === column.name && !!index.isUnique);\n      }\n    }\n  }\n\n  findColumnByName(name) {\n    return this.columns.find(column => column.name === name);\n  }\n  /**\n   * Returns all column indices.\n   */\n\n\n  findColumnIndices(column) {\n    return this.indices.filter(index => {\n      return !!index.columnNames.find(columnName => columnName === column.name);\n    });\n  }\n  /**\n   * Returns all column foreign keys.\n   */\n\n\n  findColumnForeignKeys(column) {\n    return this.foreignKeys.filter(foreignKey => {\n      return !!foreignKey.columnNames.find(columnName => columnName === column.name);\n    });\n  }\n  /**\n   * Returns all column uniques.\n   */\n\n\n  findColumnUniques(column) {\n    return this.uniques.filter(unique => {\n      return !!unique.columnNames.find(columnName => columnName === column.name);\n    });\n  }\n  /**\n   * Returns all column checks.\n   */\n\n\n  findColumnChecks(column) {\n    return this.checks.filter(check => {\n      return !!check.columnNames.find(columnName => columnName === column.name);\n    });\n  } // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates table from a given entity metadata.\n   */\n\n\n  static create(entityMetadata, driver) {\n    const database = entityMetadata.database === driver.database ? undefined : entityMetadata.database;\n    const schema = entityMetadata.schema === driver.options.schema ? undefined : entityMetadata.schema;\n    const options = {\n      database: entityMetadata.database,\n      schema: entityMetadata.schema,\n      name: driver.buildTableName(entityMetadata.tableName, schema, database),\n      withoutRowid: entityMetadata.withoutRowid,\n      engine: entityMetadata.engine,\n      columns: entityMetadata.columns.filter(column => column).map(column => TableUtils.createTableColumnOptions(column, driver)),\n      indices: entityMetadata.indices.filter(index => index.synchronize === true).map(index => TableIndex.create(index)),\n      uniques: entityMetadata.uniques.map(unique => TableUnique.create(unique)),\n      checks: entityMetadata.checks.map(check => TableCheck.create(check)),\n      exclusions: entityMetadata.exclusions.map(exclusion => TableExclusion.create(exclusion))\n    };\n    return new Table(options);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TableColumn","TableIndex","TableForeignKey","TableUtils","TableUnique","TableCheck","TableExclusion","Table","constructor","options","Symbol","for","database","schema","name","columns","map","column","indices","index","foreignKeys","foreignKey","referencedDatabase","referencedSchema","uniques","unique","checks","check","exclusions","exclusion","justCreated","undefined","withoutRowid","engine","primaryColumns","filter","isPrimary","clone","constraint","addColumn","push","removeColumn","foundColumn","find","c","splice","indexOf","addUniqueConstraint","uniqueConstraint","columnNames","length","uniqueColumn","isUnique","removeUniqueConstraint","removedUnique","foundUnique","addCheckConstraint","checkConstraint","removeCheckConstraint","removedCheck","foundCheck","addExclusionConstraint","exclusionConstraint","removeExclusionConstraint","removedExclusion","foundExclusion","addForeignKey","removeForeignKey","removedForeignKey","fk","addIndex","isMysql","removeIndex","tableIndex","some","ind","findColumnByName","findColumnIndices","columnName","findColumnForeignKeys","findColumnUniques","findColumnChecks","create","entityMetadata","driver","buildTableName","tableName","createTableColumnOptions","synchronize"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\schema-builder\\table\\Table.ts"],"sourcesContent":["import { TableColumn } from \"./TableColumn\"\nimport { TableIndex } from \"./TableIndex\"\nimport { TableForeignKey } from \"./TableForeignKey\"\nimport { Driver } from \"../../driver/Driver\"\nimport { TableOptions } from \"../options/TableOptions\"\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\nimport { TableUtils } from \"../util/TableUtils\"\nimport { TableUnique } from \"./TableUnique\"\nimport { TableCheck } from \"./TableCheck\"\nimport { TableExclusion } from \"./TableExclusion\"\n\n/**\n * Table in the database represented in this class.\n */\nexport class Table {\n    readonly \"@instanceof\" = Symbol.for(\"Table\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name that this table resides in if it applies.\n     */\n    database?: string\n\n    /**\n     * Schema name that this table resides in if it applies.\n     */\n    schema?: string\n\n    /**\n     * May contain database name, schema name and table name, unless they're the current database.\n     *\n     * E.g. myDB.mySchema.myTable\n     */\n    name: string\n\n    /**\n     * Table columns.\n     */\n    columns: TableColumn[] = []\n\n    /**\n     * Table indices.\n     */\n    indices: TableIndex[] = []\n\n    /**\n     * Table foreign keys.\n     */\n    foreignKeys: TableForeignKey[] = []\n\n    /**\n     * Table unique constraints.\n     */\n    uniques: TableUnique[] = []\n\n    /**\n     * Table check constraints.\n     */\n    checks: TableCheck[] = []\n\n    /**\n     * Table exclusion constraints.\n     */\n    exclusions: TableExclusion[] = []\n\n    /**\n     * Indicates if table was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new tables.\n     */\n    justCreated: boolean = false\n\n    /**\n     * Enables Sqlite \"WITHOUT ROWID\" modifier for the \"CREATE TABLE\" statement\n     */\n    withoutRowid?: boolean = false\n\n    /**\n     * Table engine.\n     */\n    engine?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: TableOptions) {\n        if (options) {\n            this.database = options.database\n            this.schema = options.schema\n            this.name = options.name\n\n            if (options.columns)\n                this.columns = options.columns.map(\n                    (column) => new TableColumn(column),\n                )\n\n            if (options.indices)\n                this.indices = options.indices.map(\n                    (index) => new TableIndex(index),\n                )\n\n            if (options.foreignKeys)\n                this.foreignKeys = options.foreignKeys.map(\n                    (foreignKey) =>\n                        new TableForeignKey({\n                            ...foreignKey,\n                            referencedDatabase:\n                                foreignKey?.referencedDatabase ||\n                                options.database,\n                            referencedSchema:\n                                foreignKey?.referencedSchema || options.schema,\n                        }),\n                )\n\n            if (options.uniques)\n                this.uniques = options.uniques.map(\n                    (unique) => new TableUnique(unique),\n                )\n\n            if (options.checks)\n                this.checks = options.checks.map(\n                    (check) => new TableCheck(check),\n                )\n\n            if (options.exclusions)\n                this.exclusions = options.exclusions.map(\n                    (exclusion) => new TableExclusion(exclusion),\n                )\n\n            if (options.justCreated !== undefined)\n                this.justCreated = options.justCreated\n\n            if (options.withoutRowid) this.withoutRowid = options.withoutRowid\n\n            this.engine = options.engine\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    get primaryColumns(): TableColumn[] {\n        return this.columns.filter((column) => column.isPrimary)\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone(): Table {\n        return new Table({\n            schema: this.schema,\n            database: this.database,\n            name: this.name,\n            columns: this.columns.map((column) => column.clone()),\n            indices: this.indices.map((constraint) => constraint.clone()),\n            foreignKeys: this.foreignKeys.map((constraint) =>\n                constraint.clone(),\n            ),\n            uniques: this.uniques.map((constraint) => constraint.clone()),\n            checks: this.checks.map((constraint) => constraint.clone()),\n            exclusions: this.exclusions.map((constraint) => constraint.clone()),\n            justCreated: this.justCreated,\n            withoutRowid: this.withoutRowid,\n            engine: this.engine,\n        })\n    }\n\n    /**\n     * Add column and creates its constraints.\n     */\n    addColumn(column: TableColumn): void {\n        this.columns.push(column)\n    }\n\n    /**\n     * Remove column and its constraints.\n     */\n    removeColumn(column: TableColumn): void {\n        const foundColumn = this.columns.find((c) => c.name === column.name)\n        if (foundColumn)\n            this.columns.splice(this.columns.indexOf(foundColumn), 1)\n    }\n\n    /**\n     * Adds unique constraint.\n     */\n    addUniqueConstraint(uniqueConstraint: TableUnique): void {\n        this.uniques.push(uniqueConstraint)\n        if (uniqueConstraint.columnNames.length === 1) {\n            const uniqueColumn = this.columns.find(\n                (column) => column.name === uniqueConstraint.columnNames[0],\n            )\n            if (uniqueColumn) uniqueColumn.isUnique = true\n        }\n    }\n\n    /**\n     * Removes unique constraint.\n     */\n    removeUniqueConstraint(removedUnique: TableUnique): void {\n        const foundUnique = this.uniques.find(\n            (unique) => unique.name === removedUnique.name,\n        )\n        if (foundUnique) {\n            this.uniques.splice(this.uniques.indexOf(foundUnique), 1)\n            if (foundUnique.columnNames.length === 1) {\n                const uniqueColumn = this.columns.find(\n                    (column) => column.name === foundUnique.columnNames[0],\n                )\n                if (uniqueColumn) uniqueColumn.isUnique = false\n            }\n        }\n    }\n\n    /**\n     * Adds check constraint.\n     */\n    addCheckConstraint(checkConstraint: TableCheck): void {\n        this.checks.push(checkConstraint)\n    }\n\n    /**\n     * Removes check constraint.\n     */\n    removeCheckConstraint(removedCheck: TableCheck): void {\n        const foundCheck = this.checks.find(\n            (check) => check.name === removedCheck.name,\n        )\n        if (foundCheck) {\n            this.checks.splice(this.checks.indexOf(foundCheck), 1)\n        }\n    }\n\n    /**\n     * Adds exclusion constraint.\n     */\n    addExclusionConstraint(exclusionConstraint: TableExclusion): void {\n        this.exclusions.push(exclusionConstraint)\n    }\n\n    /**\n     * Removes exclusion constraint.\n     */\n    removeExclusionConstraint(removedExclusion: TableExclusion): void {\n        const foundExclusion = this.exclusions.find(\n            (exclusion) => exclusion.name === removedExclusion.name,\n        )\n        if (foundExclusion) {\n            this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1)\n        }\n    }\n\n    /**\n     * Adds foreign keys.\n     */\n    addForeignKey(foreignKey: TableForeignKey): void {\n        this.foreignKeys.push(foreignKey)\n    }\n\n    /**\n     * Removes foreign key.\n     */\n    removeForeignKey(removedForeignKey: TableForeignKey): void {\n        const fk = this.foreignKeys.find(\n            (foreignKey) => foreignKey.name === removedForeignKey.name,\n        )\n        if (fk) this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1)\n    }\n\n    /**\n     * Adds index.\n     */\n    addIndex(index: TableIndex, isMysql: boolean = false): void {\n        this.indices.push(index)\n\n        // in Mysql unique indices and unique constraints are the same thing\n        // if index is unique and have only one column, we mark this column as unique\n        if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n            const column = this.columns.find(\n                (c) => c.name === index.columnNames[0],\n            )\n            if (column) column.isUnique = true\n        }\n    }\n\n    /**\n     * Removes index.\n     */\n    removeIndex(tableIndex: TableIndex, isMysql: boolean = false): void {\n        const index = this.indices.find(\n            (index) => index.name === tableIndex.name,\n        )\n        if (index) {\n            this.indices.splice(this.indices.indexOf(index), 1)\n\n            // in Mysql unique indices and unique constraints are the same thing\n            // if index is unique and have only one column, we move `unique` attribute from its column\n            if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n                const column = this.columns.find(\n                    (c) => c.name === index.columnNames[0],\n                )\n                if (column)\n                    column.isUnique = this.indices.some(\n                        (ind) =>\n                            ind.columnNames.length === 1 &&\n                            ind.columnNames[0] === column.name &&\n                            !!index.isUnique,\n                    )\n            }\n        }\n    }\n\n    findColumnByName(name: string): TableColumn | undefined {\n        return this.columns.find((column) => column.name === name)\n    }\n\n    /**\n     * Returns all column indices.\n     */\n    findColumnIndices(column: TableColumn): TableIndex[] {\n        return this.indices.filter((index) => {\n            return !!index.columnNames.find(\n                (columnName) => columnName === column.name,\n            )\n        })\n    }\n\n    /**\n     * Returns all column foreign keys.\n     */\n    findColumnForeignKeys(column: TableColumn): TableForeignKey[] {\n        return this.foreignKeys.filter((foreignKey) => {\n            return !!foreignKey.columnNames.find(\n                (columnName) => columnName === column.name,\n            )\n        })\n    }\n\n    /**\n     * Returns all column uniques.\n     */\n    findColumnUniques(column: TableColumn): TableUnique[] {\n        return this.uniques.filter((unique) => {\n            return !!unique.columnNames.find(\n                (columnName) => columnName === column.name,\n            )\n        })\n    }\n\n    /**\n     * Returns all column checks.\n     */\n    findColumnChecks(column: TableColumn): TableCheck[] {\n        return this.checks.filter((check) => {\n            return !!check.columnNames!.find(\n                (columnName) => columnName === column.name,\n            )\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table from a given entity metadata.\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver): Table {\n        const database =\n            entityMetadata.database === driver.database\n                ? undefined\n                : entityMetadata.database\n        const schema =\n            entityMetadata.schema === (driver.options as any).schema\n                ? undefined\n                : entityMetadata.schema\n\n        const options: TableOptions = {\n            database: entityMetadata.database,\n            schema: entityMetadata.schema,\n            name: driver.buildTableName(\n                entityMetadata.tableName,\n                schema,\n                database,\n            ),\n            withoutRowid: entityMetadata.withoutRowid,\n            engine: entityMetadata.engine,\n            columns: entityMetadata.columns\n                .filter((column) => column)\n                .map((column) =>\n                    TableUtils.createTableColumnOptions(column, driver),\n                ),\n            indices: entityMetadata.indices\n                .filter((index) => index.synchronize === true)\n                .map((index) => TableIndex.create(index)),\n            uniques: entityMetadata.uniques.map((unique) =>\n                TableUnique.create(unique),\n            ),\n            checks: entityMetadata.checks.map((check) =>\n                TableCheck.create(check),\n            ),\n            exclusions: entityMetadata.exclusions.map((exclusion) =>\n                TableExclusion.create(exclusion),\n            ),\n        }\n\n        return new Table(options)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}