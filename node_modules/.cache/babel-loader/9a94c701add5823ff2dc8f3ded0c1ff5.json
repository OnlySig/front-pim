{"ast":null,"code":"import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { ExpoQueryRunner } from \"./ExpoQueryRunner\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nexport class ExpoDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection);\n    this.database = this.options.database; // validate options to make sure everything is set\n\n    if (!this.options.database) throw new DriverOptionNotSetError(\"database\");\n    if (!this.options.driver) throw new DriverOptionNotSetError(\"driver\"); // load sqlite package\n\n    this.sqlite = this.options.driver;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Closes connection with database.\n   */\n\n\n  async disconnect() {\n    return new Promise((ok, fail) => {\n      try {\n        this.queryRunner = undefined;\n\n        this.databaseConnection._db.close();\n\n        this.databaseConnection = undefined;\n        ok();\n      } catch (error) {\n        fail(error);\n      }\n    });\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n\n\n  createQueryRunner(mode) {\n    if (!this.queryRunner) this.queryRunner = new ExpoQueryRunner(this);\n    return this.queryRunner;\n  } // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates connection with the database.\n   */\n\n\n  createDatabaseConnection() {\n    return new Promise((ok, fail) => {\n      try {\n        const databaseConnection = this.sqlite.openDatabase(this.options.database);\n        /*\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete work with sqlite.\n        */\n\n        databaseConnection.transaction(tsx => {\n          tsx.executeSql(`PRAGMA foreign_keys = ON`, [], (t, result) => {\n            ok(databaseConnection);\n          }, (t, err) => {\n            fail({\n              transaction: t,\n              error: err\n            });\n          });\n        }, err => {\n          fail(err);\n        });\n      } catch (error) {\n        fail(error);\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,oBAAT,QAAqC,yCAArC;AAEA,SAASC,eAAT,QAAgC,mBAAhC;AAGA,SAASC,uBAAT,QAAwC,qCAAxC;AAGA,OAAM,MAAOC,UAAP,SAA0BH,oBAA1B,CAA8C;EAGhD;EACA;EACA;EAEAI,YAAYC,UAAZ,EAAkC;IAC9B,MAAMA,UAAN;IAEA,KAAKC,QAAL,GAAgB,KAAKC,OAAL,CAAaD,QAA7B,CAH8B,CAK9B;;IACA,IAAI,CAAC,KAAKC,OAAL,CAAaD,QAAlB,EACI,MAAM,IAAIJ,uBAAJ,CAA4B,UAA5B,CAAN;IAEJ,IAAI,CAAC,KAAKK,OAAL,CAAaC,MAAlB,EAA0B,MAAM,IAAIN,uBAAJ,CAA4B,QAA5B,CAAN,CATI,CAW9B;;IACA,KAAKO,MAAL,GAAc,KAAKF,OAAL,CAAaC,MAA3B;EACH,CApB+C,CAsBhD;EACA;EACA;;EAEA;;;;;EAGgB,MAAVE,UAAU;IACZ,OAAO,IAAIC,OAAJ,CAAkB,CAACC,EAAD,EAAKC,IAAL,KAAa;MAClC,IAAI;QACA,KAAKC,WAAL,GAAmBC,SAAnB;;QACA,KAAKC,kBAAL,CAAwBC,GAAxB,CAA4BC,KAA5B;;QACA,KAAKF,kBAAL,GAA0BD,SAA1B;QACAH,EAAE;MACL,CALD,CAKE,OAAOO,KAAP,EAAc;QACZN,IAAI,CAACM,KAAD,CAAJ;MACH;IACJ,CATM,CAAP;EAUH;EAED;;;;;EAGAC,iBAAiB,CAACC,IAAD,EAAsB;IACnC,IAAI,CAAC,KAAKP,WAAV,EAAuB,KAAKA,WAAL,GAAmB,IAAIb,eAAJ,CAAoB,IAApB,CAAnB;IAEvB,OAAO,KAAKa,WAAZ;EACH,CAjD+C,CAmDhD;EACA;EACA;;EAEA;;;;;EAGUQ,wBAAwB;IAC9B,OAAO,IAAIX,OAAJ,CAAkB,CAACC,EAAD,EAAKC,IAAL,KAAa;MAClC,IAAI;QACA,MAAMG,kBAAkB,GAAG,KAAKP,MAAL,CAAYc,YAAZ,CACvB,KAAKhB,OAAL,CAAaD,QADU,CAA3B;QAGA;;;;;QAIAU,kBAAkB,CAACQ,WAAnB,CACKC,GAAD,IAAa;UACTA,GAAG,CAACC,UAAJ,CACI,0BADJ,EAEI,EAFJ,EAGI,CAACC,CAAD,EAASC,MAAT,KAAwB;YACpBhB,EAAE,CAACI,kBAAD,CAAF;UACH,CALL,EAMI,CAACW,CAAD,EAASE,GAAT,KAAqB;YACjBhB,IAAI,CAAC;cAAEW,WAAW,EAAEG,CAAf;cAAkBR,KAAK,EAAEU;YAAzB,CAAD,CAAJ;UACH,CARL;QAUH,CAZL,EAaKA,GAAD,IAAa;UACThB,IAAI,CAACgB,GAAD,CAAJ;QACH,CAfL;MAiBH,CAzBD,CAyBE,OAAOV,KAAP,EAAc;QACZN,IAAI,CAACM,KAAD,CAAJ;MACH;IACJ,CA7BM,CAAP;EA8BH;;AAzF+C","names":["AbstractSqliteDriver","ExpoQueryRunner","DriverOptionNotSetError","ExpoDriver","constructor","connection","database","options","driver","sqlite","disconnect","Promise","ok","fail","queryRunner","undefined","databaseConnection","_db","close","error","createQueryRunner","mode","createDatabaseConnection","openDatabase","transaction","tsx","executeSql","t","result","err"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\driver\\expo\\ExpoDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { ExpoConnectionOptions } from \"./ExpoConnectionOptions\"\nimport { ExpoQueryRunner } from \"./ExpoQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\n\nexport class ExpoDriver extends AbstractSqliteDriver {\n    options: ExpoConnectionOptions\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        this.database = this.options.database\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\")\n\n        if (!this.options.driver) throw new DriverOptionNotSetError(\"driver\")\n\n        // load sqlite package\n        this.sqlite = this.options.driver\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            try {\n                this.queryRunner = undefined\n                this.databaseConnection._db.close()\n                this.databaseConnection = undefined\n                ok()\n            } catch (error) {\n                fail(error)\n            }\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new ExpoQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            try {\n                const databaseConnection = this.sqlite.openDatabase(\n                    this.options.database,\n                )\n                /*\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                */\n                databaseConnection.transaction(\n                    (tsx: any) => {\n                        tsx.executeSql(\n                            `PRAGMA foreign_keys = ON`,\n                            [],\n                            (t: any, result: any) => {\n                                ok(databaseConnection)\n                            },\n                            (t: any, err: any) => {\n                                fail({ transaction: t, error: err })\n                            },\n                        )\n                    },\n                    (err: any) => {\n                        fail(err)\n                    },\n                )\n            } catch (error) {\n                fail(error)\n            }\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}