{"ast":null,"code":"import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when consumer specifies driver type that does not exist or supported.\n */\n\nexport class MissingDriverError extends TypeORMError {\n  constructor(driverType) {\n    let availableDrivers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    super(`Wrong driver: \"${driverType}\" given. Supported drivers are: ` + `${availableDrivers.map(d => `\"${d}\"`).join(\", \")}.`);\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AAEA;;;;AAGA,OAAM,MAAOC,kBAAP,SAAkCD,YAAlC,CAA8C;EAChDE,YAAYC,UAAZ,EAA+D;IAAA,IAA/BC,gBAA+B,uEAAF,EAAE;IAC3D,MACI,kBAAkBD,UAAU,kCAA5B,GACI,GAAGC,gBAAgB,CAACC,GAAjB,CAAsBC,CAAD,IAAO,IAAIA,CAAC,GAAjC,EAAsCC,IAAtC,CAA2C,IAA3C,CAAgD,GAF3D;EAIH;;AAN+C","names":["TypeORMError","MissingDriverError","constructor","driverType","availableDrivers","map","d","join"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\error\\MissingDriverError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when consumer specifies driver type that does not exist or supported.\n */\nexport class MissingDriverError extends TypeORMError {\n    constructor(driverType: string, availableDrivers: string[] = []) {\n        super(\n            `Wrong driver: \"${driverType}\" given. Supported drivers are: ` +\n                `${availableDrivers.map((d) => `\"${d}\"`).join(\", \")}.`,\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}