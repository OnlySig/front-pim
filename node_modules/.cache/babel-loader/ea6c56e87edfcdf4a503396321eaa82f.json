{"ast":null,"code":"/**\n * Database's table unique constraint stored in this class.\n */\nexport class TableUnique {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"TableUnique\");\n    /**\n     * Columns that contains this constraint.\n     */\n\n    this.columnNames = [];\n    this.name = options.name;\n    this.columnNames = options.columnNames;\n    this.deferrable = options.deferrable;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates a new copy of this constraint with exactly same properties.\n   */\n\n\n  clone() {\n    return new TableUnique({\n      name: this.name,\n      columnNames: [...this.columnNames],\n      deferrable: this.deferrable\n    });\n  } // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates unique from the unique metadata object.\n   */\n\n\n  static create(uniqueMetadata) {\n    return new TableUnique({\n      name: uniqueMetadata.name,\n      columnNames: uniqueMetadata.columns.map(column => column.databaseName),\n      deferrable: uniqueMetadata.deferrable\n    });\n  }\n\n}","map":{"version":3,"mappings":"AAGA;;;AAGA,OAAM,MAAOA,WAAP,CAAkB;EAuBpB;EACA;EACA;EAEAC,YAAYC,OAAZ,EAAuC;IA1B9B,sBAAgBC,MAAM,CAACC,GAAP,CAAW,aAAX,CAAhB;IAWT;;;;IAGA,mBAAwB,EAAxB;IAaI,KAAKC,IAAL,GAAYH,OAAO,CAACG,IAApB;IACA,KAAKC,WAAL,GAAmBJ,OAAO,CAACI,WAA3B;IACA,KAAKC,UAAL,GAAkBL,OAAO,CAACK,UAA1B;EACH,CA/BmB,CAiCpB;EACA;EACA;;EAEA;;;;;EAGAC,KAAK;IACD,OAAO,IAAIR,WAAJ,CAAoC;MACvCK,IAAI,EAAE,KAAKA,IAD4B;MAEvCC,WAAW,EAAE,CAAC,GAAG,KAAKA,WAAT,CAF0B;MAGvCC,UAAU,EAAE,KAAKA;IAHsB,CAApC,CAAP;EAKH,CA9CmB,CAgDpB;EACA;EACA;;EAEA;;;;;EAGa,OAANE,MAAM,CAACC,cAAD,EAA+B;IACxC,OAAO,IAAIV,WAAJ,CAAoC;MACvCK,IAAI,EAAEK,cAAc,CAACL,IADkB;MAEvCC,WAAW,EAAEI,cAAc,CAACC,OAAf,CAAuBC,GAAvB,CACRC,MAAD,IAAYA,MAAM,CAACC,YADV,CAF0B;MAKvCP,UAAU,EAAEG,cAAc,CAACH;IALY,CAApC,CAAP;EAOH;;AA/DmB","names":["TableUnique","constructor","options","Symbol","for","name","columnNames","deferrable","clone","create","uniqueMetadata","columns","map","column","databaseName"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\schema-builder\\table\\TableUnique.ts"],"sourcesContent":["import { TableUniqueOptions } from \"../options/TableUniqueOptions\"\nimport { UniqueMetadata } from \"../../metadata/UniqueMetadata\"\n\n/**\n * Database's table unique constraint stored in this class.\n */\nexport class TableUnique {\n    readonly \"@instanceof\" = Symbol.for(\"TableUnique\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string\n\n    /**\n     * Columns that contains this constraint.\n     */\n    columnNames: string[] = []\n\n    /**\n     * Set this foreign key constraint as \"DEFERRABLE\" e.g. check constraints at start\n     * or at the end of a transaction\n     */\n    deferrable?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableUniqueOptions) {\n        this.name = options.name\n        this.columnNames = options.columnNames\n        this.deferrable = options.deferrable\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone(): TableUnique {\n        return new TableUnique(<TableUniqueOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames],\n            deferrable: this.deferrable,\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates unique from the unique metadata object.\n     */\n    static create(uniqueMetadata: UniqueMetadata): TableUnique {\n        return new TableUnique(<TableUniqueOptions>{\n            name: uniqueMetadata.name,\n            columnNames: uniqueMetadata.columns.map(\n                (column) => column.databaseName,\n            ),\n            deferrable: uniqueMetadata.deferrable,\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}