{"ast":null,"code":"import shajs from \"sha.js\";\n/**\n * Converts string into camelCase.\n *\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n */\n\nexport function camelCase(str) {\n  let firstCapital = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function (match, p1, p2, offset) {\n    if (firstCapital === true && offset === 0) return p1;\n    if (p2) return p2.toUpperCase();\n    return p1.toLowerCase();\n  });\n}\n/**\n * Converts string into snake_case.\n *\n */\n\nexport function snakeCase(str) {\n  return str // ABc -> a_bc\n  .replace(/([A-Z])([A-Z])([a-z])/g, \"$1_$2$3\") // aC -> a_c\n  .replace(/([a-z0-9])([A-Z])/g, \"$1_$2\").toLowerCase();\n}\n/**\n * Converts string into Title Case.\n *\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n */\n\nexport function titleCase(str) {\n  return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}\n/**\n * Builds abbreviated string from given string;\n */\n\nexport function abbreviate(str) {\n  let abbrLettersCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  const words = str.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\").split(\" \");\n  return words.reduce((res, word) => {\n    res += word.substr(0, abbrLettersCount);\n    return res;\n  }, \"\");\n}\n/**\n * Shorten a given `input`. Useful for RDBMS imposing a limit on the\n * maximum length of aliases and column names in SQL queries.\n *\n * @param input String to be shortened.\n * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.\n *\n * @return Shortened `input`.\n *\n * @example\n * // returns: \"UsShCa__orde__mark__dire\"\n * shorten('UserShoppingCart__order__market__director')\n *\n * // returns: \"cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam\"\n * shorten(\n *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',\n *   { separator: '_', segmentLength: 3 }\n * )\n *\n * // equals: UsShCa__orde__mark_market_id\n * `${shorten('UserShoppingCart__order__market')}_market_id`\n */\n\nexport function shorten(input) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    segmentLength = 4,\n    separator = \"__\",\n    termLength = 2\n  } = options;\n  const segments = input.split(separator);\n  const shortSegments = segments.reduce((acc, val) => {\n    // split the given segment into many terms based on an eventual camel cased name\n    const segmentTerms = val.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0-\\xDF])/g, \"$1 $2\").split(\" \"); // \"OrderItemList\" becomes \"OrItLi\", while \"company\" becomes \"comp\"\n\n    const length = segmentTerms.length > 1 ? termLength : segmentLength;\n    const shortSegment = segmentTerms.map(term => term.substr(0, length)).join(\"\");\n    acc.push(shortSegment);\n    return acc;\n  }, []);\n  return shortSegments.join(separator);\n}\n/**\n * Returns a hashed input.\n *\n * @param input String to be hashed.\n * @param options.length Optionally, shorten the output to desired length.\n */\n\nexport function hash(input) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const hashFunction = shajs(\"sha256\");\n  hashFunction.update(input, \"utf8\");\n  const hashedInput = hashFunction.digest(\"hex\");\n\n  if (options.length) {\n    return hashedInput.slice(0, options.length);\n  }\n\n  return hashedInput;\n}","map":{"version":3,"mappings":"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","names":["shajs","camelCase","str","firstCapital","replace","match","p1","p2","offset","toUpperCase","toLowerCase","snakeCase","titleCase","txt","charAt","substr","abbreviate","abbrLettersCount","words","split","reduce","res","word","shorten","input","options","segmentLength","separator","termLength","segments","shortSegments","acc","val","segmentTerms","length","shortSegment","map","term","join","push","hash","hashFunction","update","hashedInput","digest","slice"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\util\\StringUtils.ts"],"sourcesContent":["import shajs from \"sha.js\"\n\n/**\n * Converts string into camelCase.\n *\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n */\nexport function camelCase(str: string, firstCapital: boolean = false): string {\n    return str.replace(\n        /^([A-Z])|[\\s-_](\\w)/g,\n        function (match, p1, p2, offset) {\n            if (firstCapital === true && offset === 0) return p1\n            if (p2) return p2.toUpperCase()\n            return p1.toLowerCase()\n        },\n    )\n}\n\n/**\n * Converts string into snake_case.\n *\n */\nexport function snakeCase(str: string): string {\n    return (\n        str\n            // ABc -> a_bc\n            .replace(/([A-Z])([A-Z])([a-z])/g, \"$1_$2$3\")\n            // aC -> a_c\n            .replace(/([a-z0-9])([A-Z])/g, \"$1_$2\")\n            .toLowerCase()\n    )\n}\n\n/**\n * Converts string into Title Case.\n *\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n */\nexport function titleCase(str: string): string {\n    return str.replace(\n        /\\w\\S*/g,\n        (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase(),\n    )\n}\n\n/**\n * Builds abbreviated string from given string;\n */\nexport function abbreviate(str: string, abbrLettersCount: number = 1): string {\n    const words = str\n        .replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\")\n        .split(\" \")\n    return words.reduce((res, word) => {\n        res += word.substr(0, abbrLettersCount)\n        return res\n    }, \"\")\n}\n\nexport interface IShortenOptions {\n    /** String used to split \"segments\" of the alias/column name */\n    separator?: string\n    /** Maximum length of any \"segment\" */\n    segmentLength?: number\n    /** Length of any \"term\" in a \"segment\"; \"OrderItem\" is a segment, \"Order\" and \"Items\" are terms */\n    termLength?: number\n}\n\n/**\n * Shorten a given `input`. Useful for RDBMS imposing a limit on the\n * maximum length of aliases and column names in SQL queries.\n *\n * @param input String to be shortened.\n * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.\n *\n * @return Shortened `input`.\n *\n * @example\n * // returns: \"UsShCa__orde__mark__dire\"\n * shorten('UserShoppingCart__order__market__director')\n *\n * // returns: \"cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam\"\n * shorten(\n *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',\n *   { separator: '_', segmentLength: 3 }\n * )\n *\n * // equals: UsShCa__orde__mark_market_id\n * `${shorten('UserShoppingCart__order__market')}_market_id`\n */\nexport function shorten(input: string, options: IShortenOptions = {}): string {\n    const { segmentLength = 4, separator = \"__\", termLength = 2 } = options\n\n    const segments = input.split(separator)\n    const shortSegments = segments.reduce((acc: string[], val: string) => {\n        // split the given segment into many terms based on an eventual camel cased name\n        const segmentTerms = val\n            .replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0-\\xDF])/g, \"$1 $2\")\n            .split(\" \")\n        // \"OrderItemList\" becomes \"OrItLi\", while \"company\" becomes \"comp\"\n        const length = segmentTerms.length > 1 ? termLength : segmentLength\n        const shortSegment = segmentTerms\n            .map((term) => term.substr(0, length))\n            .join(\"\")\n\n        acc.push(shortSegment)\n        return acc\n    }, [])\n\n    return shortSegments.join(separator)\n}\n\ninterface IHashOptions {\n    length?: number\n}\n\n/**\n * Returns a hashed input.\n *\n * @param input String to be hashed.\n * @param options.length Optionally, shorten the output to desired length.\n */\nexport function hash(input: string, options: IHashOptions = {}): string {\n    const hashFunction = shajs(\"sha256\")\n\n    hashFunction.update(input, \"utf8\")\n\n    const hashedInput = hashFunction.digest(\"hex\")\n\n    if (options.length) {\n        return hashedInput.slice(0, options.length)\n    }\n\n    return hashedInput\n}\n"]},"metadata":{},"sourceType":"module"}