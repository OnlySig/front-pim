{"ast":null,"code":"import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { NativescriptQueryRunner } from \"./NativescriptQueryRunner\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\n/**\n * Organizes communication with sqlite DBMS within Nativescript.\n */\n\nexport class NativescriptDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection);\n    this.connection = connection;\n    this.options = connection.options;\n    this.database = this.options.database;\n    this.driver = this.options.driver; // validate options to make sure everything is set\n\n    if (!this.options.database) {\n      throw new DriverOptionNotSetError(\"database\");\n    } // load sqlite package\n\n\n    this.loadDependencies();\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Closes connection with database.\n   */\n\n\n  async disconnect() {\n    return new Promise((ok, fail) => {\n      this.queryRunner = undefined;\n      this.databaseConnection.close().then(ok).catch(fail);\n    });\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n\n\n  createQueryRunner(mode) {\n    if (!this.queryRunner) {\n      this.queryRunner = new NativescriptQueryRunner(this);\n    }\n\n    return this.queryRunner;\n  }\n\n  normalizeType(column) {\n    if (column.type === Buffer) {\n      return \"blob\";\n    }\n\n    return super.normalizeType(column);\n  } // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates connection with the database.\n   */\n\n\n  createDatabaseConnection() {\n    return new Promise((ok, fail) => {\n      const options = Object.assign({}, {\n        readOnly: this.options.readOnly,\n        key: this.options.key,\n        multithreading: this.options.multithreading,\n        migrate: this.options.migrate,\n        iosFlags: this.options.iosFlags,\n        androidFlags: this.options.androidFlags\n      }, this.options.extra || {});\n      new this.sqlite(this.options.database, options, (err, db) => {\n        if (err) return fail(err); // use object mode to work with TypeORM\n\n        db.resultType(this.sqlite.RESULTSASOBJECT); // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete work with sqlite.\n\n        db.execSQL(`PRAGMA foreign_keys = ON`, [], (err, result) => {\n          if (err) return fail(err); // We are all set\n\n          ok(db);\n        });\n      });\n    });\n  }\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n\n\n  loadDependencies() {\n    this.sqlite = this.driver;\n\n    if (!this.driver) {\n      throw new DriverPackageNotInstalledError(\"Nativescript\", \"nativescript-sqlite\");\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["AbstractSqliteDriver","NativescriptQueryRunner","DriverOptionNotSetError","DriverPackageNotInstalledError","NativescriptDriver","constructor","connection","options","database","driver","loadDependencies","disconnect","Promise","ok","fail","queryRunner","undefined","databaseConnection","close","then","catch","createQueryRunner","mode","normalizeType","column","type","Buffer","createDatabaseConnection","Object","assign","readOnly","key","multithreading","migrate","iosFlags","androidFlags","extra","sqlite","err","db","resultType","RESULTSASOBJECT","execSQL","result"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\driver\\nativescript\\NativescriptDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { NativescriptConnectionOptions } from \"./NativescriptConnectionOptions\"\nimport { NativescriptQueryRunner } from \"./NativescriptQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\n\n/**\n * Organizes communication with sqlite DBMS within Nativescript.\n */\nexport class NativescriptDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: NativescriptConnectionOptions\n\n    /**\n     * Nativescript driver module\n     * this is most likely `nativescript-sqlite`\n     * but user can pass his own\n     */\n    driver: any\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        this.connection = connection\n        this.options = connection.options as NativescriptConnectionOptions\n        this.database = this.options.database\n        this.driver = this.options.driver\n\n        // validate options to make sure everything is set\n        if (!this.options.database) {\n            throw new DriverOptionNotSetError(\"database\")\n        }\n\n        // load sqlite package\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined\n            this.databaseConnection.close().then(ok).catch(fail)\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) {\n            this.queryRunner = new NativescriptQueryRunner(this)\n        }\n\n        return this.queryRunner\n    }\n\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if ((column.type as any) === Buffer) {\n            return \"blob\"\n        }\n\n        return super.normalizeType(column)\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const options = Object.assign(\n                {},\n                {\n                    readOnly: this.options.readOnly,\n                    key: this.options.key,\n                    multithreading: this.options.multithreading,\n                    migrate: this.options.migrate,\n                    iosFlags: this.options.iosFlags,\n                    androidFlags: this.options.androidFlags,\n                },\n                this.options.extra || {},\n            )\n\n            new this.sqlite(\n                this.options.database,\n                options,\n                (err: Error, db: any): any => {\n                    if (err) return fail(err)\n\n                    // use object mode to work with TypeORM\n                    db.resultType(this.sqlite.RESULTSASOBJECT)\n\n                    // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                    // working properly. this also makes onDelete work with sqlite.\n                    db.execSQL(\n                        `PRAGMA foreign_keys = ON`,\n                        [],\n                        (err: Error, result: any): any => {\n                            if (err) return fail(err)\n                            // We are all set\n                            ok(db)\n                        },\n                    )\n                },\n            )\n        })\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        this.sqlite = this.driver\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\n                \"Nativescript\",\n                \"nativescript-sqlite\",\n            )\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}