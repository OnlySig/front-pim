{"ast":null,"code":"/**\n * Helper utility functions for QueryBuilder.\n */\nexport class QueryBuilderUtils {\n  /**\n   * Checks if given value is a string representation of alias property,\n   * e.g. \"post.category\" or \"post.id\".\n   */\n  static isAliasProperty(str) {\n    // alias property must be a string and must have a dot separator\n    if (typeof str !== \"string\" || str.indexOf(\".\") === -1) return false; // extra alias and its property relation\n\n    const [aliasName, propertyName] = str.split(\".\"); // todo: what about relations in embedded?\n\n    if (!aliasName || !propertyName) return false; // alias and property must be represented in a special format\n    // const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\n    // if (!aliasNameRegexp.test(aliasName) || !aliasNameRegexp.test(propertyName))\n    //     return false;\n    // make sure string is not a subquery\n\n    if (str.indexOf(\"(\") !== -1 || str.indexOf(\")\") !== -1) return false;\n    return true;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;AAGA,OAAM,MAAOA,iBAAP,CAAwB;EAC1B;;;;EAIsB,OAAfC,eAAe,CAACC,GAAD,EAAS;IAC3B;IACA,IAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACC,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAArD,EAAwD,OAAO,KAAP,CAF7B,CAI3B;;IACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,GAAG,CAACI,KAAJ,CAAU,GAAV,CAAlC,CAL2B,CAKsB;;IACjD,IAAI,CAACF,SAAD,IAAc,CAACC,YAAnB,EAAiC,OAAO,KAAP,CANN,CAQ3B;IACA;IACA;IACA;IACA;;IACA,IAAIH,GAAG,CAACC,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAAtB,IAA2BD,GAAG,CAACC,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAArD,EAAwD,OAAO,KAAP;IAExD,OAAO,IAAP;EACH;;AArByB","names":["QueryBuilderUtils","isAliasProperty","str","indexOf","aliasName","propertyName","split"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\query-builder\\QueryBuilderUtils.ts"],"sourcesContent":["/**\n * Helper utility functions for QueryBuilder.\n */\nexport class QueryBuilderUtils {\n    /**\n     * Checks if given value is a string representation of alias property,\n     * e.g. \"post.category\" or \"post.id\".\n     */\n    static isAliasProperty(str: any): str is string {\n        // alias property must be a string and must have a dot separator\n        if (typeof str !== \"string\" || str.indexOf(\".\") === -1) return false\n\n        // extra alias and its property relation\n        const [aliasName, propertyName] = str.split(\".\") // todo: what about relations in embedded?\n        if (!aliasName || !propertyName) return false\n\n        // alias and property must be represented in a special format\n        // const aliasNameRegexp = /^[a-zA-Z0-9_-]+$/;\n        // if (!aliasNameRegexp.test(aliasName) || !aliasNameRegexp.test(propertyName))\n        //     return false;\n        // make sure string is not a subquery\n        if (str.indexOf(\"(\") !== -1 || str.indexOf(\")\") !== -1) return false\n\n        return true\n    }\n}\n"]},"metadata":{},"sourceType":"module"}