{"ast":null,"code":"import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { CapacitorQueryRunner } from \"./CapacitorQueryRunner\";\nimport { DriverOptionNotSetError, DriverPackageNotInstalledError } from \"../../error\";\nexport class CapacitorDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection);\n    this.database = this.options.database;\n    this.driver = this.options.driver; // validate options to make sure everything is set\n\n    if (!this.options.database) throw new DriverOptionNotSetError(\"database\");\n    if (!this.options.driver) throw new DriverOptionNotSetError(\"driver\"); // load sqlite package\n\n    this.sqlite = this.options.driver;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Performs connection to the database.\n   */\n\n\n  async connect() {\n    this.databaseConnection = this.createDatabaseConnection();\n    await this.databaseConnection;\n  }\n  /**\n   * Closes connection with database.\n   */\n\n\n  async disconnect() {\n    this.queryRunner = undefined;\n    const databaseConnection = await this.databaseConnection;\n    return databaseConnection.close().then(() => {\n      this.databaseConnection = undefined;\n    });\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n\n\n  createQueryRunner(mode) {\n    if (!this.queryRunner) this.queryRunner = new CapacitorQueryRunner(this);\n    return this.queryRunner;\n  } // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates connection with the database.\n   */\n\n\n  async createDatabaseConnection() {\n    const databaseMode = this.options.mode || \"no-encryption\";\n    const isDatabaseEncryted = databaseMode !== \"no-encryption\";\n    const databaseVersion = typeof this.options.version === \"undefined\" ? 1 : this.options.version;\n    const connection = await this.sqlite.createConnection(this.options.database, isDatabaseEncryted, databaseMode, databaseVersion);\n    await connection.open(); // we need to enable foreign keys in sqlite to make sure all foreign key related features\n    // working properly. this also makes onDelete to work with sqlite.\n\n    await connection.query(`PRAGMA foreign_keys = ON`);\n\n    if (this.options.journalMode && [\"DELETE\", \"TRUNCATE\", \"PERSIST\", \"MEMORY\", \"WAL\", \"OFF\"].indexOf(this.options.journalMode) !== -1) {\n      await connection.query(`PRAGMA journal_mode = ${this.options.journalMode}`);\n    }\n\n    return connection;\n  }\n\n  loadDependencies() {\n    this.sqlite = this.driver;\n\n    if (!this.driver) {\n      throw new DriverPackageNotInstalledError(\"Capacitor\", \"@capacitor-community/sqlite\");\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,oBAAT,QAAqC,yCAArC;AAEA,SAASC,oBAAT,QAAqC,wBAArC;AAGA,SACIC,uBADJ,EAEIC,8BAFJ,QAGO,aAHP;AAMA,OAAM,MAAOC,eAAP,SAA+BJ,oBAA/B,CAAmD;EAIrD;EACA;EACA;EAEAK,YAAYC,UAAZ,EAAkC;IAC9B,MAAMA,UAAN;IAEA,KAAKC,QAAL,GAAgB,KAAKC,OAAL,CAAaD,QAA7B;IACA,KAAKE,MAAL,GAAc,KAAKD,OAAL,CAAaC,MAA3B,CAJ8B,CAM9B;;IACA,IAAI,CAAC,KAAKD,OAAL,CAAaD,QAAlB,EACI,MAAM,IAAIL,uBAAJ,CAA4B,UAA5B,CAAN;IAEJ,IAAI,CAAC,KAAKM,OAAL,CAAaC,MAAlB,EAA0B,MAAM,IAAIP,uBAAJ,CAA4B,QAA5B,CAAN,CAVI,CAY9B;;IACA,KAAKQ,MAAL,GAAc,KAAKF,OAAL,CAAaC,MAA3B;EACH,CAtBoD,CAwBrD;EACA;EACA;;EAEA;;;;;EAGa,MAAPE,OAAO;IACT,KAAKC,kBAAL,GAA0B,KAAKC,wBAAL,EAA1B;IACA,MAAM,KAAKD,kBAAX;EACH;EAED;;;;;EAGgB,MAAVE,UAAU;IACZ,KAAKC,WAAL,GAAmBC,SAAnB;IACA,MAAMJ,kBAAkB,GAAG,MAAM,KAAKA,kBAAtC;IACA,OAAOA,kBAAkB,CAACK,KAAnB,GAA2BC,IAA3B,CAAgC,MAAK;MACxC,KAAKN,kBAAL,GAA0BI,SAA1B;IACH,CAFM,CAAP;EAGH;EAED;;;;;EAGAG,iBAAiB,CAACC,IAAD,EAAsB;IACnC,IAAI,CAAC,KAAKL,WAAV,EAAuB,KAAKA,WAAL,GAAmB,IAAId,oBAAJ,CAAyB,IAAzB,CAAnB;IAEvB,OAAO,KAAKc,WAAZ;EACH,CAtDoD,CAwDrD;EACA;EACA;;EAEA;;;;;EAGwC,MAAxBF,wBAAwB;IACpC,MAAMQ,YAAY,GAAG,KAAKb,OAAL,CAAaY,IAAb,IAAqB,eAA1C;IACA,MAAME,kBAAkB,GAAGD,YAAY,KAAK,eAA5C;IACA,MAAME,eAAe,GACjB,OAAO,KAAKf,OAAL,CAAagB,OAApB,KAAgC,WAAhC,GACM,CADN,GAEM,KAAKhB,OAAL,CAAagB,OAHvB;IAIA,MAAMlB,UAAU,GAAG,MAAM,KAAKI,MAAL,CAAYe,gBAAZ,CACrB,KAAKjB,OAAL,CAAaD,QADQ,EAErBe,kBAFqB,EAGrBD,YAHqB,EAIrBE,eAJqB,CAAzB;IAMA,MAAMjB,UAAU,CAACoB,IAAX,EAAN,CAboC,CAepC;IACA;;IACA,MAAMpB,UAAU,CAACqB,KAAX,CAAiB,0BAAjB,CAAN;;IAEA,IACI,KAAKnB,OAAL,CAAaoB,WAAb,IACA,CAAC,QAAD,EAAW,UAAX,EAAuB,SAAvB,EAAkC,QAAlC,EAA4C,KAA5C,EAAmD,KAAnD,EAA0DC,OAA1D,CACI,KAAKrB,OAAL,CAAaoB,WADjB,MAEM,CAAC,CAJX,EAKE;MACE,MAAMtB,UAAU,CAACqB,KAAX,CACF,yBAAyB,KAAKnB,OAAL,CAAaoB,WAAW,EAD/C,CAAN;IAGH;;IAED,OAAOtB,UAAP;EACH;;EAESwB,gBAAgB;IACtB,KAAKpB,MAAL,GAAc,KAAKD,MAAnB;;IACA,IAAI,CAAC,KAAKA,MAAV,EAAkB;MACd,MAAM,IAAIN,8BAAJ,CACF,WADE,EAEF,6BAFE,CAAN;IAIH;EACJ;;AAxGoD","names":["AbstractSqliteDriver","CapacitorQueryRunner","DriverOptionNotSetError","DriverPackageNotInstalledError","CapacitorDriver","constructor","connection","database","options","driver","sqlite","connect","databaseConnection","createDatabaseConnection","disconnect","queryRunner","undefined","close","then","createQueryRunner","mode","databaseMode","isDatabaseEncryted","databaseVersion","version","createConnection","open","query","journalMode","indexOf","loadDependencies"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\driver\\capacitor\\CapacitorDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { CapacitorConnectionOptions } from \"./CapacitorConnectionOptions\"\nimport { CapacitorQueryRunner } from \"./CapacitorQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport {\n    DriverOptionNotSetError,\n    DriverPackageNotInstalledError,\n} from \"../../error\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\n\nexport class CapacitorDriver extends AbstractSqliteDriver {\n    driver: any\n    options: CapacitorConnectionOptions\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        this.database = this.options.database\n        this.driver = this.options.driver\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\")\n\n        if (!this.options.driver) throw new DriverOptionNotSetError(\"driver\")\n\n        // load sqlite package\n        this.sqlite = this.options.driver\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = this.createDatabaseConnection()\n        await this.databaseConnection\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined\n        const databaseConnection = await this.databaseConnection\n        return databaseConnection.close().then(() => {\n            this.databaseConnection = undefined\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new CapacitorQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected async createDatabaseConnection() {\n        const databaseMode = this.options.mode || \"no-encryption\"\n        const isDatabaseEncryted = databaseMode !== \"no-encryption\"\n        const databaseVersion =\n            typeof this.options.version === \"undefined\"\n                ? 1\n                : this.options.version\n        const connection = await this.sqlite.createConnection(\n            this.options.database,\n            isDatabaseEncryted,\n            databaseMode,\n            databaseVersion,\n        )\n        await connection.open()\n\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete to work with sqlite.\n        await connection.query(`PRAGMA foreign_keys = ON`)\n\n        if (\n            this.options.journalMode &&\n            [\"DELETE\", \"TRUNCATE\", \"PERSIST\", \"MEMORY\", \"WAL\", \"OFF\"].indexOf(\n                this.options.journalMode,\n            ) !== -1\n        ) {\n            await connection.query(\n                `PRAGMA journal_mode = ${this.options.journalMode}`,\n            )\n        }\n\n        return connection\n    }\n\n    protected loadDependencies(): void {\n        this.sqlite = this.driver\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\n                \"Capacitor\",\n                \"@capacitor-community/sqlite\",\n            )\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}