{"ast":null,"code":"import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { ReactNativeQueryRunner } from \"./ReactNativeQueryRunner\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nexport class ReactNativeDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection);\n    this.database = this.options.database; // validate options to make sure everything is set\n\n    if (!this.options.database) throw new DriverOptionNotSetError(\"database\");\n    if (!this.options.location) throw new DriverOptionNotSetError(\"location\"); // load sqlite package\n\n    this.loadDependencies();\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Closes connection with database.\n   */\n\n\n  async disconnect() {\n    return new Promise((ok, fail) => {\n      this.queryRunner = undefined;\n      this.databaseConnection.close(ok, fail);\n    });\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n\n\n  createQueryRunner(mode) {\n    if (!this.queryRunner) this.queryRunner = new ReactNativeQueryRunner(this);\n    return this.queryRunner;\n  } // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates connection with the database.\n   */\n\n\n  createDatabaseConnection() {\n    return new Promise((ok, fail) => {\n      const options = Object.assign({}, {\n        name: this.options.database,\n        location: this.options.location\n      }, this.options.extra || {});\n      this.sqlite.openDatabase(options, db => {\n        const databaseConnection = db; // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete work with sqlite.\n\n        databaseConnection.executeSql(`PRAGMA foreign_keys = ON`, [], result => {\n          ok(databaseConnection);\n        }, error => {\n          fail(error);\n        });\n      }, error => {\n        fail(error);\n      });\n    });\n  }\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n\n\n  loadDependencies() {\n    try {\n      const sqlite = this.options.driver || require(\"react-native-sqlite-storage\");\n\n      this.sqlite = sqlite;\n    } catch (e) {\n      throw new DriverPackageNotInstalledError(\"React-Native\", \"react-native-sqlite-storage\");\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,oBAAT,QAAqC,yCAArC;AAEA,SAASC,sBAAT,QAAuC,0BAAvC;AAGA,SAASC,uBAAT,QAAwC,qCAAxC;AACA,SAASC,8BAAT,QAA+C,4CAA/C;AAGA,OAAM,MAAOC,iBAAP,SAAiCJ,oBAAjC,CAAqD;EAGvD;EACA;EACA;EAEAK,YAAYC,UAAZ,EAAkC;IAC9B,MAAMA,UAAN;IAEA,KAAKC,QAAL,GAAgB,KAAKC,OAAL,CAAaD,QAA7B,CAH8B,CAK9B;;IACA,IAAI,CAAC,KAAKC,OAAL,CAAaD,QAAlB,EACI,MAAM,IAAIL,uBAAJ,CAA4B,UAA5B,CAAN;IAEJ,IAAI,CAAC,KAAKM,OAAL,CAAaC,QAAlB,EACI,MAAM,IAAIP,uBAAJ,CAA4B,UAA5B,CAAN,CAV0B,CAY9B;;IACA,KAAKQ,gBAAL;EACH,CArBsD,CAuBvD;EACA;EACA;;EAEA;;;;;EAGgB,MAAVC,UAAU;IACZ,OAAO,IAAIC,OAAJ,CAAkB,CAACC,EAAD,EAAKC,IAAL,KAAa;MAClC,KAAKC,WAAL,GAAmBC,SAAnB;MACA,KAAKC,kBAAL,CAAwBC,KAAxB,CAA8BL,EAA9B,EAAkCC,IAAlC;IACH,CAHM,CAAP;EAIH;EAED;;;;;EAGAK,iBAAiB,CAACC,IAAD,EAAsB;IACnC,IAAI,CAAC,KAAKL,WAAV,EACI,KAAKA,WAAL,GAAmB,IAAId,sBAAJ,CAA2B,IAA3B,CAAnB;IAEJ,OAAO,KAAKc,WAAZ;EACH,CA7CsD,CA+CvD;EACA;EACA;;EAEA;;;;;EAGUM,wBAAwB;IAC9B,OAAO,IAAIT,OAAJ,CAAkB,CAACC,EAAD,EAAKC,IAAL,KAAa;MAClC,MAAMN,OAAO,GAAGc,MAAM,CAACC,MAAP,CACZ,EADY,EAEZ;QACIC,IAAI,EAAE,KAAKhB,OAAL,CAAaD,QADvB;QAEIE,QAAQ,EAAE,KAAKD,OAAL,CAAaC;MAF3B,CAFY,EAMZ,KAAKD,OAAL,CAAaiB,KAAb,IAAsB,EANV,CAAhB;MASA,KAAKC,MAAL,CAAYC,YAAZ,CACInB,OADJ,EAEKoB,EAAD,IAAY;QACR,MAAMX,kBAAkB,GAAGW,EAA3B,CADQ,CAGR;QACA;;QACAX,kBAAkB,CAACY,UAAnB,CACI,0BADJ,EAEI,EAFJ,EAGKC,MAAD,IAAgB;UACZjB,EAAE,CAACI,kBAAD,CAAF;QACH,CALL,EAMKc,KAAD,IAAe;UACXjB,IAAI,CAACiB,KAAD,CAAJ;QACH,CARL;MAUH,CAjBL,EAkBKA,KAAD,IAAe;QACXjB,IAAI,CAACiB,KAAD,CAAJ;MACH,CApBL;IAsBH,CAhCM,CAAP;EAiCH;EAED;;;;;EAGUrB,gBAAgB;IACtB,IAAI;MACA,MAAMgB,MAAM,GACR,KAAKlB,OAAL,CAAawB,MAAb,IAAuBC,OAAO,CAAC,6BAAD,CADlC;;MAEA,KAAKP,MAAL,GAAcA,MAAd;IACH,CAJD,CAIE,OAAOQ,CAAP,EAAU;MACR,MAAM,IAAI/B,8BAAJ,CACF,cADE,EAEF,6BAFE,CAAN;IAIH;EACJ;;AAxGsD","names":["AbstractSqliteDriver","ReactNativeQueryRunner","DriverOptionNotSetError","DriverPackageNotInstalledError","ReactNativeDriver","constructor","connection","database","options","location","loadDependencies","disconnect","Promise","ok","fail","queryRunner","undefined","databaseConnection","close","createQueryRunner","mode","createDatabaseConnection","Object","assign","name","extra","sqlite","openDatabase","db","executeSql","result","error","driver","require","e"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\driver\\react-native\\ReactNativeDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { ReactNativeConnectionOptions } from \"./ReactNativeConnectionOptions\"\nimport { ReactNativeQueryRunner } from \"./ReactNativeQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\n\nexport class ReactNativeDriver extends AbstractSqliteDriver {\n    options: ReactNativeConnectionOptions\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        this.database = this.options.database\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\")\n\n        if (!this.options.location)\n            throw new DriverOptionNotSetError(\"location\")\n\n        // load sqlite package\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined\n            this.databaseConnection.close(ok, fail)\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new ReactNativeQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const options = Object.assign(\n                {},\n                {\n                    name: this.options.database,\n                    location: this.options.location,\n                },\n                this.options.extra || {},\n            )\n\n            this.sqlite.openDatabase(\n                options,\n                (db: any) => {\n                    const databaseConnection = db\n\n                    // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                    // working properly. this also makes onDelete work with sqlite.\n                    databaseConnection.executeSql(\n                        `PRAGMA foreign_keys = ON`,\n                        [],\n                        (result: any) => {\n                            ok(databaseConnection)\n                        },\n                        (error: any) => {\n                            fail(error)\n                        },\n                    )\n                },\n                (error: any) => {\n                    fail(error)\n                },\n            )\n        })\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            const sqlite =\n                this.options.driver || require(\"react-native-sqlite-storage\")\n            this.sqlite = sqlite\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\n                \"React-Native\",\n                \"react-native-sqlite-storage\",\n            )\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}