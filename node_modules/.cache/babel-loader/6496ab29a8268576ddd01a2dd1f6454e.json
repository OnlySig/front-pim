{"ast":null,"code":"/**\n * Table's columns in the database represented in this class.\n */\nexport class TableColumn {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"TableColumn\");\n    /**\n     * Indicates if column is NULL, or is NOT NULL in the database.\n     */\n\n    this.isNullable = false;\n    /**\n     * Indicates if column is auto-generated sequence.\n     */\n\n    this.isGenerated = false;\n    /**\n     * Indicates if column is a primary key.\n     */\n\n    this.isPrimary = false;\n    /**\n     * Indicates if column has unique value.\n     */\n\n    this.isUnique = false;\n    /**\n     * Indicates if column stores array.\n     */\n\n    this.isArray = false;\n    /**\n     * Column type's length. Used only on some column types.\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n     */\n\n    this.length = \"\";\n    /**\n     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n     */\n\n    this.zerofill = false;\n    /**\n     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n     */\n\n    this.unsigned = false;\n\n    if (options) {\n      this.name = options.name;\n      this.type = options.type || \"\";\n      this.length = options.length || \"\";\n      this.width = options.width;\n      this.charset = options.charset;\n      this.collation = options.collation;\n      this.precision = options.precision;\n      this.scale = options.scale;\n      this.zerofill = options.zerofill || false;\n      this.unsigned = this.zerofill ? true : options.unsigned || false;\n      this.default = options.default;\n      this.onUpdate = options.onUpdate;\n      this.isNullable = options.isNullable || false;\n      this.isGenerated = options.isGenerated || false;\n      this.generationStrategy = options.generationStrategy;\n      this.generatedIdentity = options.generatedIdentity;\n      this.isPrimary = options.isPrimary || false;\n      this.isUnique = options.isUnique || false;\n      this.isArray = options.isArray || false;\n      this.comment = options.comment;\n      this.enum = options.enum;\n      this.enumName = options.enumName;\n      this.primaryKeyConstraintName = options.primaryKeyConstraintName;\n      this.asExpression = options.asExpression;\n      this.generatedType = options.generatedType;\n      this.spatialFeatureType = options.spatialFeatureType;\n      this.srid = options.srid;\n    }\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Clones this column to a new column with exact same properties as this column has.\n   */\n\n\n  clone() {\n    return new TableColumn({\n      name: this.name,\n      type: this.type,\n      length: this.length,\n      width: this.width,\n      charset: this.charset,\n      collation: this.collation,\n      precision: this.precision,\n      scale: this.scale,\n      zerofill: this.zerofill,\n      unsigned: this.unsigned,\n      enum: this.enum,\n      enumName: this.enumName,\n      primaryKeyConstraintName: this.primaryKeyConstraintName,\n      asExpression: this.asExpression,\n      generatedType: this.generatedType,\n      default: this.default,\n      onUpdate: this.onUpdate,\n      isNullable: this.isNullable,\n      isGenerated: this.isGenerated,\n      generationStrategy: this.generationStrategy,\n      generatedIdentity: this.generatedIdentity,\n      isPrimary: this.isPrimary,\n      isUnique: this.isUnique,\n      isArray: this.isArray,\n      comment: this.comment,\n      spatialFeatureType: this.spatialFeatureType,\n      srid: this.srid\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TableColumn","constructor","options","Symbol","for","name","type","length","width","charset","collation","precision","scale","zerofill","unsigned","default","onUpdate","isNullable","isGenerated","generationStrategy","generatedIdentity","isPrimary","isUnique","isArray","comment","enum","enumName","primaryKeyConstraintName","asExpression","generatedType","spatialFeatureType","srid","clone"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\schema-builder\\table\\TableColumn.ts"],"sourcesContent":["import { TableColumnOptions } from \"../options/TableColumnOptions\"\n\n/**\n * Table's columns in the database represented in this class.\n */\nexport class TableColumn {\n    readonly \"@instanceof\" = Symbol.for(\"TableColumn\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Column name.\n     */\n    name: string\n\n    /**\n     * Column type.\n     */\n    type: string\n\n    /**\n     * Column's default value.\n     */\n    default?: any\n\n    /**\n     * ON UPDATE trigger. Works only for MySQL.\n     */\n    onUpdate?: string\n\n    /**\n     * Indicates if column is NULL, or is NOT NULL in the database.\n     */\n    isNullable: boolean = false\n\n    /**\n     * Indicates if column is auto-generated sequence.\n     */\n    isGenerated: boolean = false\n\n    /**\n     * Specifies generation strategy if this column will use auto increment.\n     * `rowid` option supported only in CockroachDB.\n     */\n    generationStrategy?: \"uuid\" | \"increment\" | \"rowid\" | \"identity\"\n\n    /**\n     * Indicates if column is a primary key.\n     */\n    isPrimary: boolean = false\n\n    /**\n     * Indicates if column has unique value.\n     */\n    isUnique: boolean = false\n\n    /**\n     * Indicates if column stores array.\n     */\n    isArray: boolean = false\n\n    /**\n     * Column's comment.\n     */\n    comment?: string\n\n    /**\n     * Column type's length. Used only on some column types.\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\n     */\n    length: string = \"\"\n\n    /**\n     * Column type's display width. Used only on some column types in MySQL.\n     * For example, INT(4) specifies an INT with a display width of four digits.\n     */\n    width?: number\n\n    /**\n     * Defines column character set.\n     */\n    charset?: string\n\n    /**\n     * Defines column collation.\n     */\n    collation?: string\n\n    /**\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\n     * number of digits that are stored for the values.\n     */\n    precision?: number | null\n\n    /**\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\n     * of digits to the right of the decimal point and must not be greater than precision.\n     */\n    scale?: number\n\n    /**\n     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\n     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to the column\n     */\n    zerofill: boolean = false\n\n    /**\n     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\n     */\n    unsigned: boolean = false\n\n    /**\n     * Array of possible enumerated values.\n     */\n    enum?: string[]\n\n    /**\n     * Exact name of enum\n     */\n    enumName?: string\n\n    /**\n     * Name of the primary key constraint for primary column.\n     */\n    primaryKeyConstraintName?: string\n\n    /**\n     * Generated column expression.\n     */\n    asExpression?: string\n\n    /**\n     * Generated column type.\n     */\n    generatedType?: \"VIRTUAL\" | \"STORED\"\n\n    /**\n     * Identity column type. Supports only in Postgres 10+.\n     */\n    generatedIdentity?: \"ALWAYS\" | \"BY DEFAULT\"\n\n    /**\n     * Spatial Feature Type (Geometry, Point, Polygon, etc.)\n     */\n    spatialFeatureType?: string\n\n    /**\n     * SRID (Spatial Reference ID (EPSG code))\n     */\n    srid?: number\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: TableColumnOptions) {\n        if (options) {\n            this.name = options.name\n            this.type = options.type || \"\"\n            this.length = options.length || \"\"\n            this.width = options.width\n            this.charset = options.charset\n            this.collation = options.collation\n            this.precision = options.precision\n            this.scale = options.scale\n            this.zerofill = options.zerofill || false\n            this.unsigned = this.zerofill ? true : options.unsigned || false\n            this.default = options.default\n            this.onUpdate = options.onUpdate\n            this.isNullable = options.isNullable || false\n            this.isGenerated = options.isGenerated || false\n            this.generationStrategy = options.generationStrategy\n            this.generatedIdentity = options.generatedIdentity\n            this.isPrimary = options.isPrimary || false\n            this.isUnique = options.isUnique || false\n            this.isArray = options.isArray || false\n            this.comment = options.comment\n            this.enum = options.enum\n            this.enumName = options.enumName\n            this.primaryKeyConstraintName = options.primaryKeyConstraintName\n            this.asExpression = options.asExpression\n            this.generatedType = options.generatedType\n            this.spatialFeatureType = options.spatialFeatureType\n            this.srid = options.srid\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this column to a new column with exact same properties as this column has.\n     */\n    clone(): TableColumn {\n        return new TableColumn(<TableColumnOptions>{\n            name: this.name,\n            type: this.type,\n            length: this.length,\n            width: this.width,\n            charset: this.charset,\n            collation: this.collation,\n            precision: this.precision,\n            scale: this.scale,\n            zerofill: this.zerofill,\n            unsigned: this.unsigned,\n            enum: this.enum,\n            enumName: this.enumName,\n            primaryKeyConstraintName: this.primaryKeyConstraintName,\n            asExpression: this.asExpression,\n            generatedType: this.generatedType,\n            default: this.default,\n            onUpdate: this.onUpdate,\n            isNullable: this.isNullable,\n            isGenerated: this.isGenerated,\n            generationStrategy: this.generationStrategy,\n            generatedIdentity: this.generatedIdentity,\n            isPrimary: this.isPrimary,\n            isUnique: this.isUnique,\n            isArray: this.isArray,\n            comment: this.comment,\n            spatialFeatureType: this.spatialFeatureType,\n            srid: this.srid,\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}