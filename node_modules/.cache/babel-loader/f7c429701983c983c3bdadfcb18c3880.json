{"ast":null,"code":"import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryResult } from \"../../query-runner/QueryResult\";\n/**\n * Runs queries on a single sqlite database connection.\n */\n\nexport class ReactNativeQueryRunner extends AbstractSqliteQueryRunner {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(driver) {\n    super();\n    this.driver = driver;\n    this.connection = driver.connection;\n    this.broadcaster = new Broadcaster(this);\n  }\n  /**\n   * Called before migrations are run.\n   */\n\n\n  async beforeMigration() {\n    await this.query(`PRAGMA foreign_keys = OFF`);\n  }\n  /**\n   * Called after migrations are run.\n   */\n\n\n  async afterMigration() {\n    await this.query(`PRAGMA foreign_keys = ON`);\n  }\n  /**\n   * Executes a given SQL query.\n   */\n\n\n  query(query, parameters) {\n    let useStructuredResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n    return new Promise(async (ok, fail) => {\n      const databaseConnection = await this.connect();\n      this.driver.connection.logger.logQuery(query, parameters, this);\n      const queryStartTime = +new Date();\n      databaseConnection.executeSql(query, parameters, raw => {\n        // log slow queries if maxQueryExecution time is set\n        const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime;\n        const queryEndTime = +new Date();\n        const queryExecutionTime = queryEndTime - queryStartTime;\n        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n        const result = new QueryResult(); // return id of inserted row, if query was insert statement.\n\n        if (query.substr(0, 11) === \"INSERT INTO\") {\n          result.raw = raw.insertId;\n        }\n\n        if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"rowsAffected\")) {\n          result.affected = raw.rowsAffected;\n        }\n\n        if (raw === null || raw === void 0 ? void 0 : raw.hasOwnProperty(\"rows\")) {\n          let records = [];\n\n          for (let i = 0; i < raw.rows.length; i++) {\n            records.push(raw.rows.item(i));\n          }\n\n          result.raw = records;\n          result.records = records;\n        }\n\n        if (useStructuredResult) {\n          ok(result);\n        } else {\n          ok(result.raw);\n        }\n      }, err => {\n        this.driver.connection.logger.logQueryError(err, query, parameters, this);\n        fail(new QueryFailedError(query, parameters, err));\n      });\n    });\n  } // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Parametrizes given object of values. Used to create column=value queries.\n   */\n\n\n  parametrize(objectLiteral) {\n    let startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n  }\n\n}","map":{"version":3,"mappings":"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","names":["QueryRunnerAlreadyReleasedError","QueryFailedError","AbstractSqliteQueryRunner","Broadcaster","QueryResult","ReactNativeQueryRunner","constructor","driver","connection","broadcaster","beforeMigration","query","afterMigration","parameters","useStructuredResult","isReleased","Promise","ok","fail","databaseConnection","connect","logger","logQuery","queryStartTime","Date","executeSql","raw","maxQueryExecutionTime","options","queryEndTime","queryExecutionTime","logQuerySlow","result","substr","insertId","hasOwnProperty","affected","rowsAffected","records","i","rows","length","push","item","err","logQueryError","parametrize","objectLiteral","startIndex","Object","keys","map","key","index"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\driver\\react-native\\ReactNativeQueryRunner.ts"],"sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\nimport { ReactNativeDriver } from \"./ReactNativeDriver\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class ReactNativeQueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Database driver used by connection.\n     */\n    driver: ReactNativeDriver\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: ReactNativeDriver) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n    }\n\n    /**\n     * Called before migrations are run.\n     */\n    async beforeMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = OFF`)\n    }\n\n    /**\n     * Called after migrations are run.\n     */\n    async afterMigration(): Promise<void> {\n        await this.query(`PRAGMA foreign_keys = ON`)\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        return new Promise(async (ok, fail) => {\n            const databaseConnection = await this.connect()\n            this.driver.connection.logger.logQuery(query, parameters, this)\n            const queryStartTime = +new Date()\n            databaseConnection.executeSql(\n                query,\n                parameters,\n                (raw: any) => {\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime =\n                        this.driver.options.maxQueryExecutionTime\n                    const queryEndTime = +new Date()\n                    const queryExecutionTime = queryEndTime - queryStartTime\n                    if (\n                        maxQueryExecutionTime &&\n                        queryExecutionTime > maxQueryExecutionTime\n                    )\n                        this.driver.connection.logger.logQuerySlow(\n                            queryExecutionTime,\n                            query,\n                            parameters,\n                            this,\n                        )\n\n                    const result = new QueryResult()\n\n                    // return id of inserted row, if query was insert statement.\n                    if (query.substr(0, 11) === \"INSERT INTO\") {\n                        result.raw = raw.insertId\n                    }\n\n                    if (raw?.hasOwnProperty(\"rowsAffected\")) {\n                        result.affected = raw.rowsAffected\n                    }\n\n                    if (raw?.hasOwnProperty(\"rows\")) {\n                        let records = []\n                        for (let i = 0; i < raw.rows.length; i++) {\n                            records.push(raw.rows.item(i))\n                        }\n\n                        result.raw = records\n                        result.records = records\n                    }\n\n                    if (useStructuredResult) {\n                        ok(result)\n                    } else {\n                        ok(result.raw)\n                    }\n                },\n                (err: any) => {\n                    this.driver.connection.logger.logQueryError(\n                        err,\n                        query,\n                        parameters,\n                        this,\n                    )\n                    fail(new QueryFailedError(query, parameters, err))\n                },\n            )\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(\n        objectLiteral: ObjectLiteral,\n        startIndex: number = 0,\n    ): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\")\n    }\n}\n"]},"metadata":{},"sourceType":"module"}