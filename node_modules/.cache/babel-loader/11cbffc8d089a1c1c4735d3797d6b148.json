{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\n\nexport function JoinTable(options) {\n  return function (object, propertyName) {\n    options = options || {};\n    getMetadataArgsStorage().joinTables.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      name: options.name,\n      joinColumns: options && options.joinColumn ? [options.joinColumn] : options.joinColumns,\n      inverseJoinColumns: options && options.inverseJoinColumn ? [options.inverseJoinColumn] : options.inverseJoinColumns,\n      schema: options && options.schema ? options.schema : undefined,\n      database: options && options.database ? options.database : undefined\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,sBAAT,QAAuC,eAAvC;AAyBA;;;;;AAIA,OAAM,SAAUC,SAAV,CACFC,OADE,EAC0D;EAE5D,OAAO,UAAUC,MAAV,EAA0BC,YAA1B,EAA8C;IACjDF,OAAO,GACHA,OAAO,IACN,EAFL;IAGAF,sBAAsB,GAAGK,UAAzB,CAAoCC,IAApC,CAAyC;MACrCC,MAAM,EAAEJ,MAAM,CAACK,WADsB;MAErCJ,YAAY,EAAEA,YAFuB;MAGrCK,IAAI,EAAEP,OAAO,CAACO,IAHuB;MAIrCC,WAAW,EAAGR,OAAO,IAAKA,OAA4B,CAACS,UAAzC,GACR,CAAET,OAA4B,CAACS,UAA/B,CADQ,GAEPT,OAA2C,CACvCQ,WAP0B;MAQrCE,kBAAkB,EAAGV,OAAO,IAC3BA,OAA4B,CAACW,iBADT,GAEf,CAAEX,OAA4B,CAACW,iBAA/B,CAFe,GAGdX,OAA2C,CACvCU,kBAZ0B;MAarCE,MAAM,EAAEZ,OAAO,IAAIA,OAAO,CAACY,MAAnB,GAA4BZ,OAAO,CAACY,MAApC,GAA6CC,SAbhB;MAcrCC,QAAQ,EACJd,OAAO,IAAIA,OAAO,CAACc,QAAnB,GAA8Bd,OAAO,CAACc,QAAtC,GAAiDD;IAfhB,CAAzC;EAiBH,CArBD;AAsBH","names":["getMetadataArgsStorage","JoinTable","options","object","propertyName","joinTables","push","target","constructor","name","joinColumns","joinColumn","inverseJoinColumns","inverseJoinColumn","schema","undefined","database"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\decorator\\relations\\JoinTable.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { JoinTableMetadataArgs } from \"../../metadata-args/JoinTableMetadataArgs\"\nimport { JoinTableMultipleColumnsOptions } from \"../options/JoinTableMultipleColumnsOptions\"\nimport { JoinTableOptions } from \"../options/JoinTableOptions\"\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(): PropertyDecorator\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options: JoinTableOptions): PropertyDecorator\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(\n    options: JoinTableMultipleColumnsOptions,\n): PropertyDecorator\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(\n    options?: JoinTableOptions | JoinTableMultipleColumnsOptions,\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        options =\n            options ||\n            ({} as JoinTableOptions | JoinTableMultipleColumnsOptions)\n        getMetadataArgsStorage().joinTables.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            name: options.name,\n            joinColumns: (options && (options as JoinTableOptions).joinColumn\n                ? [(options as JoinTableOptions).joinColumn!]\n                : (options as JoinTableMultipleColumnsOptions)\n                      .joinColumns) as any,\n            inverseJoinColumns: (options &&\n            (options as JoinTableOptions).inverseJoinColumn\n                ? [(options as JoinTableOptions).inverseJoinColumn!]\n                : (options as JoinTableMultipleColumnsOptions)\n                      .inverseJoinColumns) as any,\n            schema: options && options.schema ? options.schema : undefined,\n            database:\n                options && options.database ? options.database : undefined,\n        } as JoinTableMetadataArgs)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}