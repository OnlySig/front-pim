{"ast":null,"code":"export class TypeORMError extends Error {\n  get name() {\n    return this.constructor.name;\n  }\n\n  constructor(message) {\n    super(message); // restore prototype chain because the base `Error` type\n    // will break the prototype chain a little\n\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(this, new.target.prototype);\n    } else {\n      ;\n      this.__proto__ = new.target.prototype;\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAM,MAAOA,YAAP,SAA4BC,KAA5B,CAAiC;EAC3B,IAAJC,IAAI;IACJ,OAAO,KAAKC,WAAL,CAAiBD,IAAxB;EACH;;EAEDC,YAAYC,OAAZ,EAA4B;IACxB,MAAMA,OAAN,EADwB,CAGxB;IACA;;IACA,IAAIC,MAAM,CAACC,cAAX,EAA2B;MACvBD,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BC,GAAG,CAACC,MAAJ,CAAWC,SAAvC;IACH,CAFD,MAEO;MACH;MAAE,KAAaC,SAAb,GAAyBH,GAAG,CAACC,MAAJ,CAAWC,SAApC;IACL;EACJ;;AAfkC","names":["TypeORMError","Error","name","constructor","message","Object","setPrototypeOf","new","target","prototype","__proto__"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\error\\TypeORMError.ts"],"sourcesContent":["export class TypeORMError extends Error {\n    get name() {\n        return this.constructor.name\n    }\n\n    constructor(message?: string) {\n        super(message)\n\n        // restore prototype chain because the base `Error` type\n        // will break the prototype chain a little\n        if (Object.setPrototypeOf) {\n            Object.setPrototypeOf(this, new.target.prototype)\n        } else {\n            ;(this as any).__proto__ = new.target.prototype\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}