{"ast":null,"code":"export class VersionUtils {\n  static isGreaterOrEqual(version, targetVersion) {\n    const v1 = parseVersion(version);\n    const v2 = parseVersion(targetVersion);\n    return v1[0] > v2[0] || v1[0] === v2[0] && v1[1] > v2[1] || v1[0] === v2[0] && v1[1] === v2[1] && v1[2] >= v2[2];\n  }\n\n}\n\nfunction parseVersion() {\n  let version = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  const v = [0, 0, 0];\n  version.split(\".\").forEach((value, i) => v[i] = parseInt(value, 10));\n  return v;\n}","map":{"version":3,"mappings":"AAEA,OAAM,MAAOA,YAAP,CAAmB;EACE,OAAhBC,gBAAgB,CAACC,OAAD,EAAkBC,aAAlB,EAAuC;IAC1D,MAAMC,EAAE,GAAGC,YAAY,CAACH,OAAD,CAAvB;IACA,MAAMI,EAAE,GAAGD,YAAY,CAACF,aAAD,CAAvB;IAEA,OACIC,EAAE,CAAC,CAAD,CAAF,GAAQE,EAAE,CAAC,CAAD,CAAV,IACCF,EAAE,CAAC,CAAD,CAAF,KAAUE,EAAE,CAAC,CAAD,CAAZ,IAAmBF,EAAE,CAAC,CAAD,CAAF,GAAQE,EAAE,CAAC,CAAD,CAD9B,IAECF,EAAE,CAAC,CAAD,CAAF,KAAUE,EAAE,CAAC,CAAD,CAAZ,IAAmBF,EAAE,CAAC,CAAD,CAAF,KAAUE,EAAE,CAAC,CAAD,CAA/B,IAAsCF,EAAE,CAAC,CAAD,CAAF,IAASE,EAAE,CAAC,CAAD,CAHtD;EAKH;;AAVoB;;AAazB,SAASD,YAAT,GAA0C;EAAA,IAApBH,OAAoB,uEAAF,EAAE;EACtC,MAAMK,CAAC,GAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB;EAEAL,OAAO,CAACM,KAAR,CAAc,GAAd,EAAmBC,OAAnB,CAA2B,CAACC,KAAD,EAAQC,CAAR,KAAeJ,CAAC,CAACI,CAAD,CAAD,GAAOC,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAAzD;EAEA,OAAOH,CAAP;AACH","names":["VersionUtils","isGreaterOrEqual","version","targetVersion","v1","parseVersion","v2","v","split","forEach","value","i","parseInt"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\util\\VersionUtils.ts"],"sourcesContent":["export type Version = [number, number, number]\n\nexport class VersionUtils {\n    static isGreaterOrEqual(version: string, targetVersion: string): boolean {\n        const v1 = parseVersion(version)\n        const v2 = parseVersion(targetVersion)\n\n        return (\n            v1[0] > v2[0] ||\n            (v1[0] === v2[0] && v1[1] > v2[1]) ||\n            (v1[0] === v2[0] && v1[1] === v2[1] && v1[2] >= v2[2])\n        )\n    }\n}\n\nfunction parseVersion(version: string = \"\"): Version {\n    const v: Version = [0, 0, 0]\n\n    version.split(\".\").forEach((value, i) => (v[i] = parseInt(value, 10)))\n\n    return v\n}\n"]},"metadata":{},"sourceType":"module"}