{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * Marks entity to work like a tree.\n * Tree pattern that will be used for the tree entity should be specified.\n * @TreeParent decorator must be used in tree entities.\n * TreeRepository can be used to manipulate with tree entities.\n */\n\nexport function Tree(type, options) {\n  return function (target) {\n    getMetadataArgsStorage().trees.push({\n      target: target,\n      type: type,\n      options: type === \"closure-table\" ? options : undefined\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,sBAAT,QAAuC,eAAvC;AAKA;;;;;;;AAMA,OAAM,SAAUC,IAAV,CACFC,IADE,EAEFC,OAFE,EAE0B;EAE5B,OAAO,UAAUC,MAAV,EAA0B;IAC7BJ,sBAAsB,GAAGK,KAAzB,CAA+BC,IAA/B,CAAoC;MAChCF,MAAM,EAAEA,MADwB;MAEhCF,IAAI,EAAEA,IAF0B;MAGhCC,OAAO,EAAED,IAAI,KAAK,eAAT,GAA2BC,OAA3B,GAAqCI;IAHd,CAApC;EAKH,CAND;AAOH","names":["getMetadataArgsStorage","Tree","type","options","target","trees","push","undefined"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\decorator\\tree\\Tree.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { TreeMetadataArgs } from \"../../metadata-args/TreeMetadataArgs\"\nimport { TreeType } from \"../../metadata/types/TreeTypes\"\nimport { ClosureTreeOptions } from \"../../metadata/types/ClosureTreeOptions\"\n\n/**\n * Marks entity to work like a tree.\n * Tree pattern that will be used for the tree entity should be specified.\n * @TreeParent decorator must be used in tree entities.\n * TreeRepository can be used to manipulate with tree entities.\n */\nexport function Tree(\n    type: TreeType,\n    options?: ClosureTreeOptions,\n): ClassDecorator {\n    return function (target: Function) {\n        getMetadataArgsStorage().trees.push({\n            target: target,\n            type: type,\n            options: type === \"closure-table\" ? options : undefined,\n        } as TreeMetadataArgs)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}