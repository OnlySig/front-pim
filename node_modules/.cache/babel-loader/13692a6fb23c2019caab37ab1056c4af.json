{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\n\nexport function Entity(nameOrOptions, maybeOptions) {\n  const options = (ObjectUtils.isObject(nameOrOptions) ? nameOrOptions : maybeOptions) || {};\n  const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n  return function (target) {\n    getMetadataArgsStorage().tables.push({\n      target: target,\n      name: name,\n      type: \"regular\",\n      orderBy: options.orderBy ? options.orderBy : undefined,\n      engine: options.engine ? options.engine : undefined,\n      database: options.database ? options.database : undefined,\n      schema: options.schema ? options.schema : undefined,\n      synchronize: options.synchronize,\n      withoutRowid: options.withoutRowid\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,sBAAT,QAAuC,eAAvC;AAGA,SAASC,WAAT,QAA4B,wBAA5B;AAcA;;;;;AAIA,OAAM,SAAUC,MAAV,CACFC,aADE,EAEFC,YAFE,EAE0B;EAE5B,MAAMC,OAAO,GACT,CAACJ,WAAW,CAACK,QAAZ,CAAqBH,aAArB,IACMA,aADN,GAEKC,YAFN,KAEuB,EAH3B;EAIA,MAAMG,IAAI,GACN,OAAOJ,aAAP,KAAyB,QAAzB,GAAoCA,aAApC,GAAoDE,OAAO,CAACE,IADhE;EAGA,OAAO,UAAUC,MAAV,EAAgB;IACnBR,sBAAsB,GAAGS,MAAzB,CAAgCC,IAAhC,CAAqC;MACjCF,MAAM,EAAEA,MADyB;MAEjCD,IAAI,EAAEA,IAF2B;MAGjCI,IAAI,EAAE,SAH2B;MAIjCC,OAAO,EAAEP,OAAO,CAACO,OAAR,GAAkBP,OAAO,CAACO,OAA1B,GAAoCC,SAJZ;MAKjCC,MAAM,EAAET,OAAO,CAACS,MAAR,GAAiBT,OAAO,CAACS,MAAzB,GAAkCD,SALT;MAMjCE,QAAQ,EAAEV,OAAO,CAACU,QAAR,GAAmBV,OAAO,CAACU,QAA3B,GAAsCF,SANf;MAOjCG,MAAM,EAAEX,OAAO,CAACW,MAAR,GAAiBX,OAAO,CAACW,MAAzB,GAAkCH,SAPT;MAQjCI,WAAW,EAAEZ,OAAO,CAACY,WARY;MASjCC,YAAY,EAAEb,OAAO,CAACa;IATW,CAArC;EAWH,CAZD;AAaH","names":["getMetadataArgsStorage","ObjectUtils","Entity","nameOrOptions","maybeOptions","options","isObject","name","target","tables","push","type","orderBy","undefined","engine","database","schema","synchronize","withoutRowid"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\decorator\\entity\\Entity.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { TableMetadataArgs } from \"../../metadata-args/TableMetadataArgs\"\nimport { EntityOptions } from \"../options/EntityOptions\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(options?: EntityOptions): ClassDecorator\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(name?: string, options?: EntityOptions): ClassDecorator\n\n/**\n * This decorator is used to mark classes that will be an entity (table or document depend on database type).\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function Entity(\n    nameOrOptions?: string | EntityOptions,\n    maybeOptions?: EntityOptions,\n): ClassDecorator {\n    const options =\n        (ObjectUtils.isObject(nameOrOptions)\n            ? (nameOrOptions as EntityOptions)\n            : maybeOptions) || {}\n    const name =\n        typeof nameOrOptions === \"string\" ? nameOrOptions : options.name\n\n    return function (target) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            type: \"regular\",\n            orderBy: options.orderBy ? options.orderBy : undefined,\n            engine: options.engine ? options.engine : undefined,\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n            synchronize: options.synchronize,\n            withoutRowid: options.withoutRowid,\n        } as TableMetadataArgs)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}