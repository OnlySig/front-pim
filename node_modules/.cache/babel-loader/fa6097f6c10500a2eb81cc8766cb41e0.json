{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\n\nexport function ViewEntity(nameOrOptions, maybeOptions) {\n  const options = (ObjectUtils.isObject(nameOrOptions) ? nameOrOptions : maybeOptions) || {};\n  const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n  return function (target) {\n    getMetadataArgsStorage().tables.push({\n      target: target,\n      name: name,\n      expression: options.expression,\n      dependsOn: options.dependsOn ? new Set(options.dependsOn) : undefined,\n      type: \"view\",\n      database: options.database ? options.database : undefined,\n      schema: options.schema ? options.schema : undefined,\n      synchronize: options.synchronize === false ? false : true,\n      materialized: !!options.materialized\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,sBAAT,QAAuC,eAAvC;AAGA,SAASC,WAAT,QAA4B,wBAA5B;AAiBA;;;;;AAIA,OAAM,SAAUC,UAAV,CACFC,aADE,EAEFC,YAFE,EAE8B;EAEhC,MAAMC,OAAO,GACT,CAACJ,WAAW,CAACK,QAAZ,CAAqBH,aAArB,IACMA,aADN,GAEKC,YAFN,KAEuB,EAH3B;EAIA,MAAMG,IAAI,GACN,OAAOJ,aAAP,KAAyB,QAAzB,GAAoCA,aAApC,GAAoDE,OAAO,CAACE,IADhE;EAGA,OAAO,UAAUC,MAAV,EAA0B;IAC7BR,sBAAsB,GAAGS,MAAzB,CAAgCC,IAAhC,CAAqC;MACjCF,MAAM,EAAEA,MADyB;MAEjCD,IAAI,EAAEA,IAF2B;MAGjCI,UAAU,EAAEN,OAAO,CAACM,UAHa;MAIjCC,SAAS,EAAEP,OAAO,CAACO,SAAR,GACL,IAAIC,GAAJ,CAAQR,OAAO,CAACO,SAAhB,CADK,GAELE,SAN2B;MAOjCC,IAAI,EAAE,MAP2B;MAQjCC,QAAQ,EAAEX,OAAO,CAACW,QAAR,GAAmBX,OAAO,CAACW,QAA3B,GAAsCF,SARf;MASjCG,MAAM,EAAEZ,OAAO,CAACY,MAAR,GAAiBZ,OAAO,CAACY,MAAzB,GAAkCH,SATT;MAUjCI,WAAW,EAAEb,OAAO,CAACa,WAAR,KAAwB,KAAxB,GAAgC,KAAhC,GAAwC,IAVpB;MAWjCC,YAAY,EAAE,CAAC,CAACd,OAAO,CAACc;IAXS,CAArC;EAaH,CAdD;AAeH","names":["getMetadataArgsStorage","ObjectUtils","ViewEntity","nameOrOptions","maybeOptions","options","isObject","name","target","tables","push","expression","dependsOn","Set","undefined","type","database","schema","synchronize","materialized"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\decorator\\entity-view\\ViewEntity.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { TableMetadataArgs } from \"../../metadata-args/TableMetadataArgs\"\nimport { ViewEntityOptions } from \"../options/ViewEntityOptions\"\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\n\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(options?: ViewEntityOptions): ClassDecorator\n\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(\n    name?: string,\n    options?: ViewEntityOptions,\n): ClassDecorator\n\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(\n    nameOrOptions?: string | ViewEntityOptions,\n    maybeOptions?: ViewEntityOptions,\n): ClassDecorator {\n    const options =\n        (ObjectUtils.isObject(nameOrOptions)\n            ? (nameOrOptions as ViewEntityOptions)\n            : maybeOptions) || {}\n    const name =\n        typeof nameOrOptions === \"string\" ? nameOrOptions : options.name\n\n    return function (target: Function) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            expression: options.expression,\n            dependsOn: options.dependsOn\n                ? new Set(options.dependsOn)\n                : undefined,\n            type: \"view\",\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n            synchronize: options.synchronize === false ? false : true,\n            materialized: !!options.materialized,\n        } as TableMetadataArgs)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}