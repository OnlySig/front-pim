{"ast":null,"code":"import { RelationIdAttribute } from \"./RelationIdAttribute\";\nexport class RelationIdMetadataToAttributeTransformer {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(expressionMap) {\n    this.expressionMap = expressionMap;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n\n  transform() {\n    // by example:\n    // post has relation id:\n    // @RelationId(post => post.categories) categoryIds\n    // category has relation id\n    // @RelationId(category => category.images) imageIds\n    // we load post and join category\n    // we expect post.categoryIds and post.category.imageIds to have relation ids\n    // first create relation id attributes for all relation id metadatas of the main selected object (post from example)\n    if (this.expressionMap.mainAlias) {\n      this.expressionMap.mainAlias.metadata.relationIds.forEach(relationId => {\n        const attribute = this.metadataToAttribute(this.expressionMap.mainAlias.name, relationId);\n        this.expressionMap.relationIdAttributes.push(attribute);\n      });\n    } // second create relation id attributes for all relation id metadatas of all joined objects (category from example)\n\n\n    this.expressionMap.joinAttributes.forEach(join => {\n      // ensure this join has a metadata, because relation id can only work for real orm entities\n      if (!join.metadata || join.metadata.isJunction) return;\n      join.metadata.relationIds.forEach(relationId => {\n        const attribute = this.metadataToAttribute(join.alias.name, relationId);\n        this.expressionMap.relationIdAttributes.push(attribute);\n      });\n    });\n  } // -------------------------------------------------------------------------\n  // Private Methods\n  // -------------------------------------------------------------------------\n\n\n  metadataToAttribute(parentAliasName, relationId) {\n    return new RelationIdAttribute(this.expressionMap, {\n      relationName: parentAliasName + \".\" + relationId.relation.propertyName,\n      mapToProperty: parentAliasName + \".\" + relationId.propertyName,\n      alias: relationId.alias,\n      queryBuilderFactory: relationId.queryBuilderFactory\n    });\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,mBAAT,QAAoC,uBAApC;AAIA,OAAM,MAAOC,wCAAP,CAA+C;EACjD;EACA;EACA;EAEAC,YAAsBC,aAAtB,EAAuD;IAAjC;EAAqC,CALV,CAOjD;EACA;EACA;;;EAEAC,SAAS;IACL;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA,IAAI,KAAKD,aAAL,CAAmBE,SAAvB,EAAkC;MAC9B,KAAKF,aAAL,CAAmBE,SAAnB,CAA6BC,QAA7B,CAAsCC,WAAtC,CAAkDC,OAAlD,CACKC,UAAD,IAAe;QACX,MAAMC,SAAS,GAAG,KAAKC,mBAAL,CACd,KAAKR,aAAL,CAAmBE,SAAnB,CAA8BO,IADhB,EAEdH,UAFc,CAAlB;QAIA,KAAKN,aAAL,CAAmBU,oBAAnB,CAAwCC,IAAxC,CAA6CJ,SAA7C;MACH,CAPL;IASH,CApBI,CAsBL;;;IACA,KAAKP,aAAL,CAAmBY,cAAnB,CAAkCP,OAAlC,CAA2CQ,IAAD,IAAS;MAC/C;MACA,IAAI,CAACA,IAAI,CAACV,QAAN,IAAkBU,IAAI,CAACV,QAAL,CAAcW,UAApC,EAAgD;MAEhDD,IAAI,CAACV,QAAL,CAAcC,WAAd,CAA0BC,OAA1B,CAAmCC,UAAD,IAAe;QAC7C,MAAMC,SAAS,GAAG,KAAKC,mBAAL,CACdK,IAAI,CAACE,KAAL,CAAWN,IADG,EAEdH,UAFc,CAAlB;QAIA,KAAKN,aAAL,CAAmBU,oBAAnB,CAAwCC,IAAxC,CAA6CJ,SAA7C;MACH,CAND;IAOH,CAXD;EAYH,CA9CgD,CAgDjD;EACA;EACA;;;EAEQC,mBAAmB,CACvBQ,eADuB,EAEvBV,UAFuB,EAEO;IAE9B,OAAO,IAAIT,mBAAJ,CAAwB,KAAKG,aAA7B,EAA4C;MAC/CiB,YAAY,EACRD,eAAe,GAAG,GAAlB,GAAwBV,UAAU,CAACY,QAAX,CAAoBC,YAFD;MAG/CC,aAAa,EAAEJ,eAAe,GAAG,GAAlB,GAAwBV,UAAU,CAACa,YAHH;MAI/CJ,KAAK,EAAET,UAAU,CAACS,KAJ6B;MAK/CM,mBAAmB,EAAEf,UAAU,CAACe;IALe,CAA5C,CAAP;EAOH;;AA/DgD","names":["RelationIdAttribute","RelationIdMetadataToAttributeTransformer","constructor","expressionMap","transform","mainAlias","metadata","relationIds","forEach","relationId","attribute","metadataToAttribute","name","relationIdAttributes","push","joinAttributes","join","isJunction","alias","parentAliasName","relationName","relation","propertyName","mapToProperty","queryBuilderFactory"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\query-builder\\relation-id\\RelationIdMetadataToAttributeTransformer.ts"],"sourcesContent":["import { RelationIdAttribute } from \"./RelationIdAttribute\"\nimport { QueryExpressionMap } from \"../QueryExpressionMap\"\nimport { RelationIdMetadata } from \"../../metadata/RelationIdMetadata\"\n\nexport class RelationIdMetadataToAttributeTransformer {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected expressionMap: QueryExpressionMap) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    transform() {\n        // by example:\n        // post has relation id:\n        // @RelationId(post => post.categories) categoryIds\n        // category has relation id\n        // @RelationId(category => category.images) imageIds\n        // we load post and join category\n        // we expect post.categoryIds and post.category.imageIds to have relation ids\n\n        // first create relation id attributes for all relation id metadatas of the main selected object (post from example)\n        if (this.expressionMap.mainAlias) {\n            this.expressionMap.mainAlias.metadata.relationIds.forEach(\n                (relationId) => {\n                    const attribute = this.metadataToAttribute(\n                        this.expressionMap.mainAlias!.name,\n                        relationId,\n                    )\n                    this.expressionMap.relationIdAttributes.push(attribute)\n                },\n            )\n        }\n\n        // second create relation id attributes for all relation id metadatas of all joined objects (category from example)\n        this.expressionMap.joinAttributes.forEach((join) => {\n            // ensure this join has a metadata, because relation id can only work for real orm entities\n            if (!join.metadata || join.metadata.isJunction) return\n\n            join.metadata.relationIds.forEach((relationId) => {\n                const attribute = this.metadataToAttribute(\n                    join.alias.name,\n                    relationId,\n                )\n                this.expressionMap.relationIdAttributes.push(attribute)\n            })\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private metadataToAttribute(\n        parentAliasName: string,\n        relationId: RelationIdMetadata,\n    ): RelationIdAttribute {\n        return new RelationIdAttribute(this.expressionMap, {\n            relationName:\n                parentAliasName + \".\" + relationId.relation.propertyName, // category.images\n            mapToProperty: parentAliasName + \".\" + relationId.propertyName, // category.imageIds\n            alias: relationId.alias,\n            queryBuilderFactory: relationId.queryBuilderFactory,\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}