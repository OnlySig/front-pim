{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\n\nexport function JoinColumn(optionsOrOptionsArray) {\n  return function (object, propertyName) {\n    const options = Array.isArray(optionsOrOptionsArray) ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];\n    options.forEach(options => {\n      getMetadataArgsStorage().joinColumns.push({\n        target: object.constructor,\n        propertyName: propertyName,\n        name: options.name,\n        referencedColumnName: options.referencedColumnName,\n        foreignKeyConstraintName: options.foreignKeyConstraintName\n      });\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,sBAAT,QAAuC,eAAvC;AAyBA;;;;;;AAKA,OAAM,SAAUC,UAAV,CACFC,qBADE,EAC6D;EAE/D,OAAO,UAAUC,MAAV,EAA0BC,YAA1B,EAA8C;IACjD,MAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcL,qBAAd,IACVA,qBADU,GAEV,CAACA,qBAAqB,IAAI,EAA1B,CAFN;IAGAG,OAAO,CAACG,OAAR,CAAiBH,OAAD,IAAY;MACxBL,sBAAsB,GAAGS,WAAzB,CAAqCC,IAArC,CAA0C;QACtCC,MAAM,EAAER,MAAM,CAACS,WADuB;QAEtCR,YAAY,EAAEA,YAFwB;QAGtCS,IAAI,EAAER,OAAO,CAACQ,IAHwB;QAItCC,oBAAoB,EAAET,OAAO,CAACS,oBAJQ;QAKtCC,wBAAwB,EAAEV,OAAO,CAACU;MALI,CAA1C;IAOH,CARD;EASH,CAbD;AAcH","names":["getMetadataArgsStorage","JoinColumn","optionsOrOptionsArray","object","propertyName","options","Array","isArray","forEach","joinColumns","push","target","constructor","name","referencedColumnName","foreignKeyConstraintName"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\decorator\\relations\\JoinColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { JoinColumnMetadataArgs } from \"../../metadata-args/JoinColumnMetadataArgs\"\nimport { JoinColumnOptions } from \"../options/JoinColumnOptions\"\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(): PropertyDecorator\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions): PropertyDecorator\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions[]): PropertyDecorator\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(\n    optionsOrOptionsArray?: JoinColumnOptions | JoinColumnOptions[],\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        const options = Array.isArray(optionsOrOptionsArray)\n            ? optionsOrOptionsArray\n            : [optionsOrOptionsArray || {}]\n        options.forEach((options) => {\n            getMetadataArgsStorage().joinColumns.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                name: options.name,\n                referencedColumnName: options.referencedColumnName,\n                foreignKeyConstraintName: options.foreignKeyConstraintName,\n            } as JoinColumnMetadataArgs)\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}