{"ast":null,"code":"import { TypeORMError } from \"../error\";\n/**\n * Updates entity with returning results in the entity insert and update operations.\n */\n\nexport class ReturningResultsEntityUpdator {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(queryRunner, expressionMap) {\n    this.queryRunner = queryRunner;\n    this.expressionMap = expressionMap;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Updates entities with a special columns after updation query execution.\n   */\n\n\n  async update(updateResult, entities) {\n    const metadata = this.expressionMap.mainAlias.metadata;\n    await Promise.all(entities.map(async (entity, entityIndex) => {\n      // if database supports returning/output statement then we already should have updating values in the raw data returned by insert query\n      if (this.queryRunner.connection.driver.isReturningSqlSupported(\"update\")) {\n        if (this.queryRunner.connection.driver.options.type === \"oracle\" && Array.isArray(updateResult.raw) && this.expressionMap.extraReturningColumns.length > 0) {\n          updateResult.raw = updateResult.raw.reduce((newRaw, rawItem, rawItemIndex) => {\n            newRaw[this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n            return newRaw;\n          }, {});\n        }\n\n        const result = Array.isArray(updateResult.raw) ? updateResult.raw[entityIndex] : updateResult.raw;\n        const returningColumns = this.queryRunner.connection.driver.createGeneratedMap(metadata, result);\n\n        if (returningColumns) {\n          this.queryRunner.manager.merge(metadata.target, entity, returningColumns);\n          updateResult.generatedMaps.push(returningColumns);\n        }\n      } else {\n        // for driver which do not support returning/output statement we need to perform separate query and load what we need\n        const updationColumns = this.expressionMap.extraReturningColumns;\n\n        if (updationColumns.length > 0) {\n          // get entity id by which we will get needed data\n          const entityId = this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);\n          if (!entityId) throw new TypeORMError(`Cannot update entity because entity id is not set in the entity.`); // execute query to get needed data\n\n          const loadedReturningColumns = await this.queryRunner.manager.createQueryBuilder().select(metadata.primaryColumns.map(column => metadata.targetName + \".\" + column.propertyPath)).addSelect(updationColumns.map(column => metadata.targetName + \".\" + column.propertyPath)).from(metadata.target, metadata.targetName).where(entityId).withDeleted().setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties might be overridden by merge process\n          .getOne();\n\n          if (loadedReturningColumns) {\n            this.queryRunner.manager.merge(metadata.target, entity, loadedReturningColumns);\n            updateResult.generatedMaps.push(loadedReturningColumns);\n          }\n        }\n      }\n    }));\n  }\n  /**\n   * Updates entities with a special columns after insertion query execution.\n   */\n\n\n  async insert(insertResult, entities) {\n    const metadata = this.expressionMap.mainAlias.metadata;\n    let insertionColumns = metadata.getInsertionReturningColumns(); // to prevent extra select SQL execution for databases not supporting RETURNING\n    // in the case if we have generated column and it's value returned by underlying driver\n    // we remove this column from the insertionColumns list\n\n    const needToCheckGenerated = this.queryRunner.connection.driver.isReturningSqlSupported(\"insert\");\n    insertionColumns = insertionColumns.filter(column => {\n      if (!column.isGenerated) return true;\n      return needToCheckGenerated === true;\n    });\n    const generatedMaps = entities.map((entity, entityIndex) => {\n      if (this.queryRunner.connection.driver.options.type === \"oracle\" && Array.isArray(insertResult.raw) && this.expressionMap.extraReturningColumns.length > 0) {\n        insertResult.raw = insertResult.raw.reduce((newRaw, rawItem, rawItemIndex) => {\n          newRaw[this.expressionMap.extraReturningColumns[rawItemIndex].databaseName] = rawItem[0];\n          return newRaw;\n        }, {});\n      } // get all values generated by a database for us\n\n\n      const result = Array.isArray(insertResult.raw) ? insertResult.raw[entityIndex] : insertResult.raw;\n      const generatedMap = this.queryRunner.connection.driver.createGeneratedMap(metadata, result, entityIndex, entities.length) || {};\n\n      if (entityIndex in this.expressionMap.locallyGenerated) {\n        this.queryRunner.manager.merge(metadata.target, generatedMap, this.expressionMap.locallyGenerated[entityIndex]);\n      }\n\n      this.queryRunner.manager.merge(metadata.target, entity, generatedMap);\n      return generatedMap;\n    }); // for postgres and mssql we use returning/output statement to get values of inserted default and generated values\n    // for other drivers we have to re-select this data from the database\n\n    if (insertionColumns.length > 0 && !this.queryRunner.connection.driver.isReturningSqlSupported(\"insert\")) {\n      const entityIds = entities.map(entity => {\n        const entityId = metadata.getEntityIdMap(entity); // We have to check for an empty `entityId` - if we don't, the query against the database\n        // effectively drops the `where` clause entirely and the first record will be returned -\n        // not what we want at all.\n\n        if (!entityId) throw new TypeORMError(`Cannot update entity because entity id is not set in the entity.`);\n        return entityId;\n      }); // to select just inserted entities we need a criteria to select by.\n      // for newly inserted entities in drivers which do not support returning statement\n      // row identifier can only be an increment column\n      // (since its the only thing that can be generated by those databases)\n      // or (and) other primary key which is defined by a user and inserted value has it\n\n      const returningResult = await this.queryRunner.manager.createQueryBuilder().select(metadata.primaryColumns.map(column => metadata.targetName + \".\" + column.propertyPath)).addSelect(insertionColumns.map(column => metadata.targetName + \".\" + column.propertyPath)).from(metadata.target, metadata.targetName).where(entityIds).setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties might be overridden by merge process\n      .getMany();\n      entities.forEach((entity, entityIndex) => {\n        this.queryRunner.manager.merge(metadata.target, generatedMaps[entityIndex], returningResult[entityIndex]);\n        this.queryRunner.manager.merge(metadata.target, entity, returningResult[entityIndex]);\n      });\n    }\n\n    entities.forEach((entity, entityIndex) => {\n      const entityId = metadata.getEntityIdMap(entity);\n      insertResult.identifiers.push(entityId);\n      insertResult.generatedMaps.push(generatedMaps[entityIndex]);\n    });\n  }\n  /**\n   * Columns we need to be returned from the database when we update entity.\n   */\n\n\n  getUpdationReturningColumns() {\n    return this.expressionMap.mainAlias.metadata.columns.filter(column => {\n      return column.isUpdateDate || column.isVersion;\n    });\n  }\n  /**\n   * Columns we need to be returned from the database when we soft delete and restore entity.\n   */\n\n\n  getSoftDeletionReturningColumns() {\n    return this.expressionMap.mainAlias.metadata.columns.filter(column => {\n      return column.isUpdateDate || column.isVersion || column.isDeleteDate;\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TypeORMError","ReturningResultsEntityUpdator","constructor","queryRunner","expressionMap","update","updateResult","entities","metadata","mainAlias","Promise","all","map","entity","entityIndex","connection","driver","isReturningSqlSupported","options","type","Array","isArray","raw","extraReturningColumns","length","reduce","newRaw","rawItem","rawItemIndex","databaseName","result","returningColumns","createGeneratedMap","manager","merge","target","generatedMaps","push","updationColumns","entityId","getEntityIdMap","loadedReturningColumns","createQueryBuilder","select","primaryColumns","column","targetName","propertyPath","addSelect","from","where","withDeleted","setOption","getOne","insert","insertResult","insertionColumns","getInsertionReturningColumns","needToCheckGenerated","filter","isGenerated","generatedMap","locallyGenerated","entityIds","returningResult","getMany","forEach","identifiers","getUpdationReturningColumns","columns","isUpdateDate","isVersion","getSoftDeletionReturningColumns","isDeleteDate"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\query-builder\\ReturningResultsEntityUpdator.ts"],"sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { QueryExpressionMap } from \"./QueryExpressionMap\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { UpdateResult } from \"./result/UpdateResult\"\nimport { InsertResult } from \"./result/InsertResult\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Updates entity with returning results in the entity insert and update operations.\n */\nexport class ReturningResultsEntityUpdator {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        protected queryRunner: QueryRunner,\n        protected expressionMap: QueryExpressionMap,\n    ) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Updates entities with a special columns after updation query execution.\n     */\n    async update(\n        updateResult: UpdateResult,\n        entities: ObjectLiteral[],\n    ): Promise<void> {\n        const metadata = this.expressionMap.mainAlias!.metadata\n\n        await Promise.all(\n            entities.map(async (entity, entityIndex) => {\n                // if database supports returning/output statement then we already should have updating values in the raw data returned by insert query\n                if (\n                    this.queryRunner.connection.driver.isReturningSqlSupported(\n                        \"update\",\n                    )\n                ) {\n                    if (\n                        this.queryRunner.connection.driver.options.type ===\n                            \"oracle\" &&\n                        Array.isArray(updateResult.raw) &&\n                        this.expressionMap.extraReturningColumns.length > 0\n                    ) {\n                        updateResult.raw = updateResult.raw.reduce(\n                            (newRaw, rawItem, rawItemIndex) => {\n                                newRaw[\n                                    this.expressionMap.extraReturningColumns[\n                                        rawItemIndex\n                                    ].databaseName\n                                ] = rawItem[0]\n                                return newRaw\n                            },\n                            {} as ObjectLiteral,\n                        )\n                    }\n                    const result = Array.isArray(updateResult.raw)\n                        ? updateResult.raw[entityIndex]\n                        : updateResult.raw\n                    const returningColumns =\n                        this.queryRunner.connection.driver.createGeneratedMap(\n                            metadata,\n                            result,\n                        )\n                    if (returningColumns) {\n                        this.queryRunner.manager.merge(\n                            metadata.target as any,\n                            entity,\n                            returningColumns,\n                        )\n                        updateResult.generatedMaps.push(returningColumns)\n                    }\n                } else {\n                    // for driver which do not support returning/output statement we need to perform separate query and load what we need\n                    const updationColumns =\n                        this.expressionMap.extraReturningColumns\n                    if (updationColumns.length > 0) {\n                        // get entity id by which we will get needed data\n                        const entityId =\n                            this.expressionMap.mainAlias!.metadata.getEntityIdMap(\n                                entity,\n                            )\n                        if (!entityId)\n                            throw new TypeORMError(\n                                `Cannot update entity because entity id is not set in the entity.`,\n                            )\n\n                        // execute query to get needed data\n                        const loadedReturningColumns =\n                            (await this.queryRunner.manager\n                                .createQueryBuilder()\n                                .select(\n                                    metadata.primaryColumns.map(\n                                        (column) =>\n                                            metadata.targetName +\n                                            \".\" +\n                                            column.propertyPath,\n                                    ),\n                                )\n                                .addSelect(\n                                    updationColumns.map(\n                                        (column) =>\n                                            metadata.targetName +\n                                            \".\" +\n                                            column.propertyPath,\n                                    ),\n                                )\n                                .from(metadata.target, metadata.targetName)\n                                .where(entityId)\n                                .withDeleted()\n                                .setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties might be overridden by merge process\n                                .getOne()) as any\n\n                        if (loadedReturningColumns) {\n                            this.queryRunner.manager.merge(\n                                metadata.target as any,\n                                entity,\n                                loadedReturningColumns,\n                            )\n                            updateResult.generatedMaps.push(\n                                loadedReturningColumns,\n                            )\n                        }\n                    }\n                }\n            }),\n        )\n    }\n\n    /**\n     * Updates entities with a special columns after insertion query execution.\n     */\n    async insert(\n        insertResult: InsertResult,\n        entities: ObjectLiteral[],\n    ): Promise<void> {\n        const metadata = this.expressionMap.mainAlias!.metadata\n        let insertionColumns = metadata.getInsertionReturningColumns()\n\n        // to prevent extra select SQL execution for databases not supporting RETURNING\n        // in the case if we have generated column and it's value returned by underlying driver\n        // we remove this column from the insertionColumns list\n        const needToCheckGenerated =\n            this.queryRunner.connection.driver.isReturningSqlSupported(\"insert\")\n        insertionColumns = insertionColumns.filter((column) => {\n            if (!column.isGenerated) return true\n            return needToCheckGenerated === true\n        })\n\n        const generatedMaps = entities.map((entity, entityIndex) => {\n            if (\n                this.queryRunner.connection.driver.options.type === \"oracle\" &&\n                Array.isArray(insertResult.raw) &&\n                this.expressionMap.extraReturningColumns.length > 0\n            ) {\n                insertResult.raw = insertResult.raw.reduce(\n                    (newRaw, rawItem, rawItemIndex) => {\n                        newRaw[\n                            this.expressionMap.extraReturningColumns[\n                                rawItemIndex\n                            ].databaseName\n                        ] = rawItem[0]\n                        return newRaw\n                    },\n                    {} as ObjectLiteral,\n                )\n            }\n            // get all values generated by a database for us\n            const result = Array.isArray(insertResult.raw)\n                ? insertResult.raw[entityIndex]\n                : insertResult.raw\n\n            const generatedMap =\n                this.queryRunner.connection.driver.createGeneratedMap(\n                    metadata,\n                    result,\n                    entityIndex,\n                    entities.length,\n                ) || {}\n\n            if (entityIndex in this.expressionMap.locallyGenerated) {\n                this.queryRunner.manager.merge(\n                    metadata.target as any,\n                    generatedMap,\n                    this.expressionMap.locallyGenerated[entityIndex],\n                )\n            }\n\n            this.queryRunner.manager.merge(\n                metadata.target as any,\n                entity,\n                generatedMap,\n            )\n\n            return generatedMap\n        })\n\n        // for postgres and mssql we use returning/output statement to get values of inserted default and generated values\n        // for other drivers we have to re-select this data from the database\n        if (\n            insertionColumns.length > 0 &&\n            !this.queryRunner.connection.driver.isReturningSqlSupported(\n                \"insert\",\n            )\n        ) {\n            const entityIds = entities.map((entity) => {\n                const entityId = metadata.getEntityIdMap(entity)!\n\n                // We have to check for an empty `entityId` - if we don't, the query against the database\n                // effectively drops the `where` clause entirely and the first record will be returned -\n                // not what we want at all.\n                if (!entityId)\n                    throw new TypeORMError(\n                        `Cannot update entity because entity id is not set in the entity.`,\n                    )\n\n                return entityId\n            })\n\n            // to select just inserted entities we need a criteria to select by.\n            // for newly inserted entities in drivers which do not support returning statement\n            // row identifier can only be an increment column\n            // (since its the only thing that can be generated by those databases)\n            // or (and) other primary key which is defined by a user and inserted value has it\n\n            const returningResult: any = await this.queryRunner.manager\n                .createQueryBuilder()\n                .select(\n                    metadata.primaryColumns.map(\n                        (column) =>\n                            metadata.targetName + \".\" + column.propertyPath,\n                    ),\n                )\n                .addSelect(\n                    insertionColumns.map(\n                        (column) =>\n                            metadata.targetName + \".\" + column.propertyPath,\n                    ),\n                )\n                .from(metadata.target, metadata.targetName)\n                .where(entityIds)\n                .setOption(\"create-pojo\") // use POJO because created object can contain default values, e.g. property = null and those properties might be overridden by merge process\n                .getMany()\n\n            entities.forEach((entity, entityIndex) => {\n                this.queryRunner.manager.merge(\n                    metadata.target as any,\n                    generatedMaps[entityIndex],\n                    returningResult[entityIndex],\n                )\n\n                this.queryRunner.manager.merge(\n                    metadata.target as any,\n                    entity,\n                    returningResult[entityIndex],\n                )\n            })\n        }\n\n        entities.forEach((entity, entityIndex) => {\n            const entityId = metadata.getEntityIdMap(entity)!\n            insertResult.identifiers.push(entityId)\n            insertResult.generatedMaps.push(generatedMaps[entityIndex])\n        })\n    }\n\n    /**\n     * Columns we need to be returned from the database when we update entity.\n     */\n    getUpdationReturningColumns(): ColumnMetadata[] {\n        return this.expressionMap.mainAlias!.metadata.columns.filter(\n            (column) => {\n                return column.isUpdateDate || column.isVersion\n            },\n        )\n    }\n\n    /**\n     * Columns we need to be returned from the database when we soft delete and restore entity.\n     */\n    getSoftDeletionReturningColumns(): ColumnMetadata[] {\n        return this.expressionMap.mainAlias!.metadata.columns.filter(\n            (column) => {\n                return (\n                    column.isUpdateDate ||\n                    column.isVersion ||\n                    column.isDeleteDate\n                )\n            },\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}