{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../globals\";\n/**\n * Special type of column that is available only for MongoDB database.\n * Marks your entity's column to be an object id.\n */\n\nexport function ObjectIdColumn(options) {\n  return function (object, propertyName) {\n    // if column options are not given then create a new empty options\n    if (!options) options = {};\n    options.primary = true;\n    if (!options.name) options.name = \"_id\"; // create and register a new column metadata\n\n    getMetadataArgsStorage().columns.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      mode: \"objectId\",\n      options: options\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,sBAAT,QAAuC,eAAvC;AAIA;;;;;AAIA,OAAM,SAAUC,cAAV,CAAyBC,OAAzB,EAAgD;EAClD,OAAO,UAAUC,MAAV,EAA0BC,YAA1B,EAA8C;IACjD;IACA,IAAI,CAACF,OAAL,EAAcA,OAAO,GAAG,EAAV;IACdA,OAAO,CAACG,OAAR,GAAkB,IAAlB;IACA,IAAI,CAACH,OAAO,CAACI,IAAb,EAAmBJ,OAAO,CAACI,IAAR,GAAe,KAAf,CAJ8B,CAMjD;;IACAN,sBAAsB,GAAGO,OAAzB,CAAiCC,IAAjC,CAAsC;MAClCC,MAAM,EAAEN,MAAM,CAACO,WADmB;MAElCN,YAAY,EAAEA,YAFoB;MAGlCO,IAAI,EAAE,UAH4B;MAIlCT,OAAO,EAAEA;IAJyB,CAAtC;EAMH,CAbD;AAcH","names":["getMetadataArgsStorage","ObjectIdColumn","options","object","propertyName","primary","name","columns","push","target","constructor","mode"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\decorator\\columns\\ObjectIdColumn.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\nimport { ColumnOptions } from \"../options/ColumnOptions\"\n\n/**\n * Special type of column that is available only for MongoDB database.\n * Marks your entity's column to be an object id.\n */\nexport function ObjectIdColumn(options?: ColumnOptions): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        // if column options are not given then create a new empty options\n        if (!options) options = {} as ColumnOptions\n        options.primary = true\n        if (!options.name) options.name = \"_id\"\n\n        // create and register a new column metadata\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"objectId\",\n            options: options,\n        } as ColumnMetadataArgs)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}