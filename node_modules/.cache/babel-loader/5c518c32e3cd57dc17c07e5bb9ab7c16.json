{"ast":null,"code":"import { getMetadataArgsStorage } from \"../globals\";\n/**\n * Marks a column to generate a value on entity insertion.\n * There are three types of generation strategy - increment, uuid and rowid (cockroachdb only).\n * Increment uses a number which increases by one on each insertion.\n * Uuid generates a special UUID token.\n * Rowid supports only in CockroachDB and uses `unique_rowid()` function\n *\n * Note, some databases do not support non-primary generation columns.\n */\n\nexport function Generated() {\n  let strategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"increment\";\n  return function (object, propertyName) {\n    getMetadataArgsStorage().generations.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      strategy: strategy\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,sBAAT,QAAuC,YAAvC;AAGA;;;;;;;;;;AASA,OAAM,SAAUC,SAAV,GACoD;EAAA,IAAtDC,QAAsD,uEAAX,WAAW;EAEtD,OAAO,UAAUC,MAAV,EAA0BC,YAA1B,EAA8C;IACjDJ,sBAAsB,GAAGK,WAAzB,CAAqCC,IAArC,CAA0C;MACtCC,MAAM,EAAEJ,MAAM,CAACK,WADuB;MAEtCJ,YAAY,EAAEA,YAFwB;MAGtCF,QAAQ,EAAEA;IAH4B,CAA1C;EAKH,CAND;AAOH","names":["getMetadataArgsStorage","Generated","strategy","object","propertyName","generations","push","target","constructor"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\decorator\\Generated.ts"],"sourcesContent":["import { getMetadataArgsStorage } from \"../globals\"\nimport { GeneratedMetadataArgs } from \"../metadata-args/GeneratedMetadataArgs\"\n\n/**\n * Marks a column to generate a value on entity insertion.\n * There are three types of generation strategy - increment, uuid and rowid (cockroachdb only).\n * Increment uses a number which increases by one on each insertion.\n * Uuid generates a special UUID token.\n * Rowid supports only in CockroachDB and uses `unique_rowid()` function\n *\n * Note, some databases do not support non-primary generation columns.\n */\nexport function Generated(\n    strategy: \"increment\" | \"uuid\" | \"rowid\" = \"increment\",\n): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        getMetadataArgsStorage().generations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            strategy: strategy,\n        } as GeneratedMetadataArgs)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}