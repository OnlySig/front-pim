{"ast":null,"code":"import { PlatformTools } from \"../platform/PlatformTools\";\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and use syntax highlighting.\n */\n\nexport class AdvancedConsoleLogger {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this.options = options;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Logs query and parameters used in it.\n   */\n\n\n  logQuery(query, parameters, queryRunner) {\n    if (this.options === \"all\" || this.options === true || Array.isArray(this.options) && this.options.indexOf(\"query\") !== -1) {\n      const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n      PlatformTools.logInfo(\"query:\", PlatformTools.highlightSql(sql));\n    }\n  }\n  /**\n   * Logs query that is failed.\n   */\n\n\n  logQueryError(error, query, parameters, queryRunner) {\n    if (this.options === \"all\" || this.options === true || Array.isArray(this.options) && this.options.indexOf(\"error\") !== -1) {\n      const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n      PlatformTools.logError(`query failed:`, PlatformTools.highlightSql(sql));\n      PlatformTools.logError(`error:`, error);\n    }\n  }\n  /**\n   * Logs query that is slow.\n   */\n\n\n  logQuerySlow(time, query, parameters, queryRunner) {\n    const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n    PlatformTools.logWarn(`query is slow:`, PlatformTools.highlightSql(sql));\n    PlatformTools.logWarn(`execution time:`, time);\n  }\n  /**\n   * Logs events from the schema build process.\n   */\n\n\n  logSchemaBuild(message, queryRunner) {\n    if (this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"schema\") !== -1) {\n      PlatformTools.log(message);\n    }\n  }\n  /**\n   * Logs events from the migration run process.\n   */\n\n\n  logMigration(message, queryRunner) {\n    PlatformTools.log(message);\n  }\n  /**\n   * Perform logging using given logger, or by default to the console.\n   * Log has its own level and message.\n   */\n\n\n  log(level, message, queryRunner) {\n    switch (level) {\n      case \"log\":\n        if (this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"log\") !== -1) PlatformTools.log(message);\n        break;\n\n      case \"info\":\n        if (this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"info\") !== -1) PlatformTools.logInfo(\"INFO:\", message);\n        break;\n\n      case \"warn\":\n        if (this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"warn\") !== -1) console.warn(PlatformTools.warn(message));\n        break;\n    }\n  } // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Converts parameters to a string.\n   * Sometimes parameters can have circular objects and therefore we are handle this case too.\n   */\n\n\n  stringifyParams(parameters) {\n    try {\n      return JSON.stringify(parameters);\n    } catch (error) {\n      // most probably circular objects in parameters\n      return parameters;\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["PlatformTools","AdvancedConsoleLogger","constructor","options","logQuery","query","parameters","queryRunner","Array","isArray","indexOf","sql","length","stringifyParams","logInfo","highlightSql","logQueryError","error","logError","logQuerySlow","time","logWarn","logSchemaBuild","message","log","logMigration","level","console","warn","JSON","stringify"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\logger\\AdvancedConsoleLogger.ts"],"sourcesContent":["import { LoggerOptions } from \"./LoggerOptions\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { Logger } from \"./Logger\"\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and use syntax highlighting.\n */\nexport class AdvancedConsoleLogger implements Logger {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private options?: LoggerOptions) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (\n            this.options === \"all\" ||\n            this.options === true ||\n            (Array.isArray(this.options) &&\n                this.options.indexOf(\"query\") !== -1)\n        ) {\n            const sql =\n                query +\n                (parameters && parameters.length\n                    ? \" -- PARAMETERS: \" + this.stringifyParams(parameters)\n                    : \"\")\n            PlatformTools.logInfo(\"query:\", PlatformTools.highlightSql(sql))\n        }\n    }\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(\n        error: string,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ) {\n        if (\n            this.options === \"all\" ||\n            this.options === true ||\n            (Array.isArray(this.options) &&\n                this.options.indexOf(\"error\") !== -1)\n        ) {\n            const sql =\n                query +\n                (parameters && parameters.length\n                    ? \" -- PARAMETERS: \" + this.stringifyParams(parameters)\n                    : \"\")\n            PlatformTools.logError(\n                `query failed:`,\n                PlatformTools.highlightSql(sql),\n            )\n            PlatformTools.logError(`error:`, error)\n        }\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(\n        time: number,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ) {\n        const sql =\n            query +\n            (parameters && parameters.length\n                ? \" -- PARAMETERS: \" + this.stringifyParams(parameters)\n                : \"\")\n        PlatformTools.logWarn(`query is slow:`, PlatformTools.highlightSql(sql))\n        PlatformTools.logWarn(`execution time:`, time)\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (\n            this.options === \"all\" ||\n            (Array.isArray(this.options) &&\n                this.options.indexOf(\"schema\") !== -1)\n        ) {\n            PlatformTools.log(message)\n        }\n    }\n\n    /**\n     * Logs events from the migration run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        PlatformTools.log(message)\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(\n        level: \"log\" | \"info\" | \"warn\",\n        message: any,\n        queryRunner?: QueryRunner,\n    ) {\n        switch (level) {\n            case \"log\":\n                if (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"log\") !== -1)\n                )\n                    PlatformTools.log(message)\n                break\n            case \"info\":\n                if (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"info\") !== -1)\n                )\n                    PlatformTools.logInfo(\"INFO:\", message)\n                break\n            case \"warn\":\n                if (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"warn\") !== -1)\n                )\n                    console.warn(PlatformTools.warn(message))\n                break\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefore we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters)\n        } catch (error) {\n            // most probably circular objects in parameters\n            return parameters\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}