{"ast":null,"code":"/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and does not use syntax highlighting.\n */\nexport class SimpleConsoleLogger {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this.options = options;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Logs query and parameters used in it.\n   */\n\n\n  logQuery(query, parameters, queryRunner) {\n    if (this.options === \"all\" || this.options === true || Array.isArray(this.options) && this.options.indexOf(\"query\") !== -1) {\n      const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n      console.log(\"query\" + \": \" + sql);\n    }\n  }\n  /**\n   * Logs query that is failed.\n   */\n\n\n  logQueryError(error, query, parameters, queryRunner) {\n    if (this.options === \"all\" || this.options === true || Array.isArray(this.options) && this.options.indexOf(\"error\") !== -1) {\n      const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n      console.log(`query failed: ` + sql);\n      console.log(`error:`, error);\n    }\n  }\n  /**\n   * Logs query that is slow.\n   */\n\n\n  logQuerySlow(time, query, parameters, queryRunner) {\n    const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n    console.log(`query is slow: ` + sql);\n    console.log(`execution time: ` + time);\n  }\n  /**\n   * Logs events from the schema build process.\n   */\n\n\n  logSchemaBuild(message, queryRunner) {\n    if (this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"schema\") !== -1) {\n      console.log(message);\n    }\n  }\n  /**\n   * Logs events from the migrations run process.\n   */\n\n\n  logMigration(message, queryRunner) {\n    console.log(message);\n  }\n  /**\n   * Perform logging using given logger, or by default to the console.\n   * Log has its own level and message.\n   */\n\n\n  log(level, message, queryRunner) {\n    switch (level) {\n      case \"log\":\n        if (this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"log\") !== -1) console.log(message);\n        break;\n\n      case \"info\":\n        if (this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"info\") !== -1) console.info(message);\n        break;\n\n      case \"warn\":\n        if (this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"warn\") !== -1) console.warn(message);\n        break;\n    }\n  } // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Converts parameters to a string.\n   * Sometimes parameters can have circular objects and therefor we are handle this case too.\n   */\n\n\n  stringifyParams(parameters) {\n    try {\n      return JSON.stringify(parameters);\n    } catch (error) {\n      // most probably circular objects in parameters\n      return parameters;\n    }\n  }\n\n}","map":{"version":3,"mappings":"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","names":["SimpleConsoleLogger","constructor","options","logQuery","query","parameters","queryRunner","Array","isArray","indexOf","sql","length","stringifyParams","console","log","logQueryError","error","logQuerySlow","time","logSchemaBuild","message","logMigration","level","info","warn","JSON","stringify"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\logger\\SimpleConsoleLogger.ts"],"sourcesContent":["import { LoggerOptions } from \"./LoggerOptions\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { Logger } from \"./Logger\"\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and does not use syntax highlighting.\n */\nexport class SimpleConsoleLogger implements Logger {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private options?: LoggerOptions) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (\n            this.options === \"all\" ||\n            this.options === true ||\n            (Array.isArray(this.options) &&\n                this.options.indexOf(\"query\") !== -1)\n        ) {\n            const sql =\n                query +\n                (parameters && parameters.length\n                    ? \" -- PARAMETERS: \" + this.stringifyParams(parameters)\n                    : \"\")\n            console.log(\"query\" + \": \" + sql)\n        }\n    }\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(\n        error: string,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ) {\n        if (\n            this.options === \"all\" ||\n            this.options === true ||\n            (Array.isArray(this.options) &&\n                this.options.indexOf(\"error\") !== -1)\n        ) {\n            const sql =\n                query +\n                (parameters && parameters.length\n                    ? \" -- PARAMETERS: \" + this.stringifyParams(parameters)\n                    : \"\")\n            console.log(`query failed: ` + sql)\n            console.log(`error:`, error)\n        }\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(\n        time: number,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ) {\n        const sql =\n            query +\n            (parameters && parameters.length\n                ? \" -- PARAMETERS: \" + this.stringifyParams(parameters)\n                : \"\")\n        console.log(`query is slow: ` + sql)\n        console.log(`execution time: ` + time)\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (\n            this.options === \"all\" ||\n            (Array.isArray(this.options) &&\n                this.options.indexOf(\"schema\") !== -1)\n        ) {\n            console.log(message)\n        }\n    }\n\n    /**\n     * Logs events from the migrations run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        console.log(message)\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(\n        level: \"log\" | \"info\" | \"warn\",\n        message: any,\n        queryRunner?: QueryRunner,\n    ) {\n        switch (level) {\n            case \"log\":\n                if (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"log\") !== -1)\n                )\n                    console.log(message)\n                break\n            case \"info\":\n                if (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"info\") !== -1)\n                )\n                    console.info(message)\n                break\n            case \"warn\":\n                if (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"warn\") !== -1)\n                )\n                    console.warn(message)\n                break\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters)\n        } catch (error) {\n            // most probably circular objects in parameters\n            return parameters\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}