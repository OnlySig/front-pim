{"ast":null,"code":"import { TypeORMError } from \"../error\";\n/**\n * Index metadata contains all information about table's index.\n */\n\nexport class IndexMetadata {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(options) {\n    /**\n     * Indicates if this index must be unique.\n     */\n    this.isUnique = false;\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n\n    this.isSpatial = false;\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n\n    this.isFulltext = false;\n    /**\n     * NULL_FILTERED indexes are particularly useful for indexing sparse columns, where most rows contain a NULL value.\n     * In these cases, the NULL_FILTERED index can be considerably smaller and more efficient to maintain than\n     * a normal index that includes NULL values.\n     *\n     * Works only in Spanner.\n     */\n\n    this.isNullFiltered = false;\n    /**\n     * Indicates if this index must synchronize with database index.\n     */\n\n    this.synchronize = true;\n    /**\n     * Indexed columns.\n     */\n\n    this.columns = [];\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n\n    this.columnNamesWithOrderingMap = {};\n    this.entityMetadata = options.entityMetadata;\n    this.embeddedMetadata = options.embeddedMetadata;\n    if (options.columns) this.columns = options.columns;\n\n    if (options.args) {\n      this.target = options.args.target;\n      if (options.args.synchronize !== null && options.args.synchronize !== undefined) this.synchronize = options.args.synchronize;\n      this.isUnique = !!options.args.unique;\n      this.isSpatial = !!options.args.spatial;\n      this.isFulltext = !!options.args.fulltext;\n      this.isNullFiltered = !!options.args.nullFiltered;\n      this.parser = options.args.parser;\n      this.where = options.args.where;\n      this.isSparse = options.args.sparse;\n      this.isBackground = options.args.background;\n      this.expireAfterSeconds = options.args.expireAfterSeconds;\n      this.givenName = options.args.name;\n      this.givenColumnNames = options.args.columns;\n    }\n  } // ---------------------------------------------------------------------\n  // Public Build Methods\n  // ---------------------------------------------------------------------\n\n  /**\n   * Builds some depend index properties.\n   * Must be called after all entity metadata's properties map, columns and relations are built.\n   */\n\n\n  build(namingStrategy) {\n    if (this.synchronize === false) {\n      this.name = this.givenName;\n      return this;\n    }\n\n    const map = {}; // if columns already an array of string then simply return it\n\n    if (this.givenColumnNames) {\n      let columnPropertyPaths = [];\n\n      if (Array.isArray(this.givenColumnNames)) {\n        columnPropertyPaths = this.givenColumnNames.map(columnName => {\n          if (this.embeddedMetadata) return this.embeddedMetadata.propertyPath + \".\" + columnName;\n          return columnName.trim();\n        });\n        columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);\n      } else {\n        // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n        // if columns is a function that returns array of field names then execute it and get columns names from it\n        const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n\n        if (Array.isArray(columnsFnResult)) {\n          columnPropertyPaths = columnsFnResult.map(i => String(i));\n          columnPropertyPaths.forEach(name => map[name] = 1);\n        } else {\n          columnPropertyPaths = Object.keys(columnsFnResult).map(i => String(i));\n          Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\n        }\n      }\n\n      this.columns = columnPropertyPaths.map(propertyPath => {\n        const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyPath);\n\n        if (columnWithSameName) {\n          return [columnWithSameName];\n        }\n\n        const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyPath);\n\n        if (relationWithSameName) {\n          return relationWithSameName.joinColumns;\n        }\n\n        const indexName = this.givenName ? '\"' + this.givenName + '\" ' : \"\";\n        const entityName = this.entityMetadata.targetName;\n        throw new TypeORMError(`Index ${indexName}contains column that is missing in the entity (${entityName}): ` + propertyPath);\n      }).reduce((a, b) => a.concat(b));\n    }\n\n    this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n      const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\n      if (column) updatedMap[column.databasePath] = map[key];\n      return updatedMap;\n    }, {});\n    this.name = this.givenName ? this.givenName : namingStrategy.indexName(this.entityMetadata.tableName, this.columns.map(column => column.databaseName), this.where);\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["TypeORMError","IndexMetadata","constructor","options","entityMetadata","embeddedMetadata","columns","args","target","synchronize","undefined","isUnique","unique","isSpatial","spatial","isFulltext","fulltext","isNullFiltered","nullFiltered","parser","where","isSparse","sparse","isBackground","background","expireAfterSeconds","givenName","name","givenColumnNames","build","namingStrategy","map","columnPropertyPaths","Array","isArray","columnName","propertyPath","trim","forEach","columnsFnResult","propertiesMap","i","String","Object","keys","columnWithSameName","find","column","relationWithSameName","relations","relation","isWithJoinColumn","propertyName","joinColumns","indexName","entityName","targetName","reduce","a","b","concat","columnNamesWithOrderingMap","updatedMap","key","databasePath","tableName","databaseName"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\metadata\\IndexMetadata.ts"],"sourcesContent":["import { EntityMetadata } from \"./EntityMetadata\"\nimport { IndexMetadataArgs } from \"../metadata-args/IndexMetadataArgs\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { ColumnMetadata } from \"./ColumnMetadata\"\nimport { EmbeddedMetadata } from \"./EmbeddedMetadata\"\nimport { TypeORMError } from \"../error\"\n\n/**\n * Index metadata contains all information about table's index.\n */\nexport class IndexMetadata {\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this index is applied.\n     */\n    entityMetadata: EntityMetadata\n\n    /**\n     * Embedded metadata if this index was applied on embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata\n\n    /**\n     * Indicates if this index must be unique.\n     */\n    isUnique: boolean = false\n\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n    isSpatial: boolean = false\n\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n    isFulltext: boolean = false\n\n    /**\n     * NULL_FILTERED indexes are particularly useful for indexing sparse columns, where most rows contain a NULL value.\n     * In these cases, the NULL_FILTERED index can be considerably smaller and more efficient to maintain than\n     * a normal index that includes NULL values.\n     *\n     * Works only in Spanner.\n     */\n    isNullFiltered: boolean = false\n\n    /**\n     * Fulltext parser.\n     * Works only in MySQL.\n     */\n    parser?: string\n\n    /**\n     * Indicates if this index must synchronize with database index.\n     */\n    synchronize: boolean = true\n\n    /**\n     * If true, the index only references documents with the specified field.\n     * These indexes use less space but behave differently in some situations (particularly sorts).\n     * This option is only supported for mongodb database.\n     */\n    isSparse?: boolean\n\n    /**\n     * Builds the index in the background so that building an index an does not block other database activities.\n     * This option is only supported for mongodb database.\n     */\n    isBackground?: boolean\n\n    /**\n     * Specifies a time to live, in seconds.\n     * This option is only supported for mongodb database.\n     */\n    expireAfterSeconds?: number\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function | string\n\n    /**\n     * Indexed columns.\n     */\n    columns: ColumnMetadata[] = []\n\n    /**\n     * User specified index name.\n     */\n    givenName?: string\n\n    /**\n     * User specified column names.\n     */\n    givenColumnNames?:\n        | ((object?: any) => any[] | { [key: string]: number })\n        | string[]\n\n    /**\n     * Final index name.\n     * If index name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If index name was not given then its generated.\n     */\n    name: string\n\n    /**\n     * Index filter condition.\n     */\n    where?: string\n\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    columnNamesWithOrderingMap: { [key: string]: number } = {}\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata\n        embeddedMetadata?: EmbeddedMetadata\n        columns?: ColumnMetadata[]\n        args?: IndexMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata\n        this.embeddedMetadata = options.embeddedMetadata\n        if (options.columns) this.columns = options.columns\n\n        if (options.args) {\n            this.target = options.args.target\n            if (\n                options.args.synchronize !== null &&\n                options.args.synchronize !== undefined\n            )\n                this.synchronize = options.args.synchronize\n            this.isUnique = !!options.args.unique\n            this.isSpatial = !!options.args.spatial\n            this.isFulltext = !!options.args.fulltext\n            this.isNullFiltered = !!options.args.nullFiltered\n            this.parser = options.args.parser\n            this.where = options.args.where\n            this.isSparse = options.args.sparse\n            this.isBackground = options.args.background\n            this.expireAfterSeconds = options.args.expireAfterSeconds\n            this.givenName = options.args.name\n            this.givenColumnNames = options.args.columns\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend index properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        if (this.synchronize === false) {\n            this.name = this.givenName!\n            return this\n        }\n\n        const map: { [key: string]: number } = {}\n\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths: string[] = []\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map(\n                    (columnName) => {\n                        if (this.embeddedMetadata)\n                            return (\n                                this.embeddedMetadata.propertyPath +\n                                \".\" +\n                                columnName\n                            )\n\n                        return columnName.trim()\n                    },\n                )\n                columnPropertyPaths.forEach(\n                    (propertyPath) => (map[propertyPath] = 1),\n                )\n            } else {\n                // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(\n                    this.entityMetadata.propertiesMap,\n                )\n                if (Array.isArray(columnsFnResult)) {\n                    columnPropertyPaths = columnsFnResult.map((i: any) =>\n                        String(i),\n                    )\n                    columnPropertyPaths.forEach((name) => (map[name] = 1))\n                } else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map(\n                        (i: any) => String(i),\n                    )\n                    Object.keys(columnsFnResult).forEach(\n                        (columnName) =>\n                            (map[columnName] = columnsFnResult[columnName]),\n                    )\n                }\n            }\n\n            this.columns = columnPropertyPaths\n                .map((propertyPath) => {\n                    const columnWithSameName = this.entityMetadata.columns.find(\n                        (column) => column.propertyPath === propertyPath,\n                    )\n                    if (columnWithSameName) {\n                        return [columnWithSameName]\n                    }\n                    const relationWithSameName =\n                        this.entityMetadata.relations.find(\n                            (relation) =>\n                                relation.isWithJoinColumn &&\n                                relation.propertyName === propertyPath,\n                        )\n                    if (relationWithSameName) {\n                        return relationWithSameName.joinColumns\n                    }\n                    const indexName = this.givenName\n                        ? '\"' + this.givenName + '\" '\n                        : \"\"\n                    const entityName = this.entityMetadata.targetName\n                    throw new TypeORMError(\n                        `Index ${indexName}contains column that is missing in the entity (${entityName}): ` +\n                            propertyPath,\n                    )\n                })\n                .reduce((a, b) => a.concat(b))\n        }\n\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce(\n            (updatedMap, key) => {\n                const column = this.entityMetadata.columns.find(\n                    (column) => column.propertyPath === key,\n                )\n                if (column) updatedMap[column.databasePath] = map[key]\n\n                return updatedMap\n            },\n            {} as { [key: string]: number },\n        )\n\n        this.name = this.givenName\n            ? this.givenName\n            : namingStrategy.indexName(\n                  this.entityMetadata.tableName,\n                  this.columns.map((column) => column.databaseName),\n                  this.where,\n              )\n        return this\n    }\n}\n"]},"metadata":{},"sourceType":"module"}