{"ast":null,"code":"/**\n * Foreign key from the database stored in this class.\n */\nexport class TableForeignKey {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"TableForeignKey\");\n    /**\n     * Column names which included by this foreign key.\n     */\n\n    this.columnNames = [];\n    /**\n     * Column names which included by this foreign key.\n     */\n\n    this.referencedColumnNames = [];\n    this.name = options.name;\n    this.columnNames = options.columnNames;\n    this.referencedColumnNames = options.referencedColumnNames;\n    this.referencedDatabase = options.referencedDatabase;\n    this.referencedSchema = options.referencedSchema;\n    this.referencedTableName = options.referencedTableName;\n    this.onDelete = options.onDelete;\n    this.onUpdate = options.onUpdate;\n    this.deferrable = options.deferrable;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates a new copy of this foreign key with exactly same properties.\n   */\n\n\n  clone() {\n    return new TableForeignKey({\n      name: this.name,\n      columnNames: [...this.columnNames],\n      referencedColumnNames: [...this.referencedColumnNames],\n      referencedDatabase: this.referencedDatabase,\n      referencedSchema: this.referencedSchema,\n      referencedTableName: this.referencedTableName,\n      onDelete: this.onDelete,\n      onUpdate: this.onUpdate,\n      deferrable: this.deferrable\n    });\n  } // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates a new table foreign key from the given foreign key metadata.\n   */\n\n\n  static create(metadata, driver) {\n    return new TableForeignKey({\n      name: metadata.name,\n      columnNames: metadata.columnNames,\n      referencedColumnNames: metadata.referencedColumnNames,\n      referencedDatabase: metadata.referencedEntityMetadata.database,\n      referencedSchema: metadata.referencedEntityMetadata.schema,\n      referencedTableName: metadata.referencedTablePath,\n      onDelete: metadata.onDelete,\n      onUpdate: metadata.onUpdate,\n      deferrable: metadata.deferrable\n    });\n  }\n\n}","map":{"version":3,"mappings":"AAIA;;;AAGA,OAAM,MAAOA,eAAP,CAAsB;EAuDxB;EACA;EACA;EAEAC,YAAYC,OAAZ,EAA2C;IA1DlC,sBAAgBC,MAAM,CAACC,GAAP,CAAW,iBAAX,CAAhB;IAWT;;;;IAGA,mBAAwB,EAAxB;IAiBA;;;;IAGA,6BAAkC,EAAlC;IAyBI,KAAKC,IAAL,GAAYH,OAAO,CAACG,IAApB;IACA,KAAKC,WAAL,GAAmBJ,OAAO,CAACI,WAA3B;IACA,KAAKC,qBAAL,GAA6BL,OAAO,CAACK,qBAArC;IACA,KAAKC,kBAAL,GAA0BN,OAAO,CAACM,kBAAlC;IACA,KAAKC,gBAAL,GAAwBP,OAAO,CAACO,gBAAhC;IACA,KAAKC,mBAAL,GAA2BR,OAAO,CAACQ,mBAAnC;IACA,KAAKC,QAAL,GAAgBT,OAAO,CAACS,QAAxB;IACA,KAAKC,QAAL,GAAgBV,OAAO,CAACU,QAAxB;IACA,KAAKC,UAAL,GAAkBX,OAAO,CAACW,UAA1B;EACH,CArEuB,CAuExB;EACA;EACA;;EAEA;;;;;EAGAC,KAAK;IACD,OAAO,IAAId,eAAJ,CAA4C;MAC/CK,IAAI,EAAE,KAAKA,IADoC;MAE/CC,WAAW,EAAE,CAAC,GAAG,KAAKA,WAAT,CAFkC;MAG/CC,qBAAqB,EAAE,CAAC,GAAG,KAAKA,qBAAT,CAHwB;MAI/CC,kBAAkB,EAAE,KAAKA,kBAJsB;MAK/CC,gBAAgB,EAAE,KAAKA,gBALwB;MAM/CC,mBAAmB,EAAE,KAAKA,mBANqB;MAO/CC,QAAQ,EAAE,KAAKA,QAPgC;MAQ/CC,QAAQ,EAAE,KAAKA,QARgC;MAS/CC,UAAU,EAAE,KAAKA;IAT8B,CAA5C,CAAP;EAWH,CA1FuB,CA4FxB;EACA;EACA;;EAEA;;;;;EAGa,OAANE,MAAM,CACTC,QADS,EAETC,MAFS,EAEK;IAEd,OAAO,IAAIjB,eAAJ,CAA4C;MAC/CK,IAAI,EAAEW,QAAQ,CAACX,IADgC;MAE/CC,WAAW,EAAEU,QAAQ,CAACV,WAFyB;MAG/CC,qBAAqB,EAAES,QAAQ,CAACT,qBAHe;MAI/CC,kBAAkB,EAAEQ,QAAQ,CAACE,wBAAT,CAAkCC,QAJP;MAK/CV,gBAAgB,EAAEO,QAAQ,CAACE,wBAAT,CAAkCE,MALL;MAM/CV,mBAAmB,EAAEM,QAAQ,CAACK,mBANiB;MAO/CV,QAAQ,EAAEK,QAAQ,CAACL,QAP4B;MAQ/CC,QAAQ,EAAEI,QAAQ,CAACJ,QAR4B;MAS/CC,UAAU,EAAEG,QAAQ,CAACH;IAT0B,CAA5C,CAAP;EAWH;;AAlHuB","names":["TableForeignKey","constructor","options","Symbol","for","name","columnNames","referencedColumnNames","referencedDatabase","referencedSchema","referencedTableName","onDelete","onUpdate","deferrable","clone","create","metadata","driver","referencedEntityMetadata","database","schema","referencedTablePath"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\schema-builder\\table\\TableForeignKey.ts"],"sourcesContent":["import { ForeignKeyMetadata } from \"../../metadata/ForeignKeyMetadata\"\nimport { TableForeignKeyOptions } from \"../options/TableForeignKeyOptions\"\nimport { Driver } from \"../../driver/Driver\"\n\n/**\n * Foreign key from the database stored in this class.\n */\nexport class TableForeignKey {\n    readonly \"@instanceof\" = Symbol.for(\"TableForeignKey\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Name of the foreign key constraint.\n     */\n    name?: string\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    columnNames: string[] = []\n\n    /**\n     * Database of Table referenced in the foreign key.\n     */\n    referencedDatabase?: string\n\n    /**\n     * Database of Table referenced in the foreign key.\n     */\n    referencedSchema?: string\n\n    /**\n     * Table referenced in the foreign key.\n     */\n    referencedTableName: string\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    referencedColumnNames: string[] = []\n\n    /**\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being deleted.\n     */\n    onDelete?: string\n\n    /**\n     * \"ON UPDATE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being updated.\n     */\n    onUpdate?: string\n\n    /**\n     * Set this foreign key constraint as \"DEFERRABLE\" e.g. check constraints at start\n     * or at the end of a transaction\n     */\n    deferrable?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableForeignKeyOptions) {\n        this.name = options.name\n        this.columnNames = options.columnNames\n        this.referencedColumnNames = options.referencedColumnNames\n        this.referencedDatabase = options.referencedDatabase\n        this.referencedSchema = options.referencedSchema\n        this.referencedTableName = options.referencedTableName\n        this.onDelete = options.onDelete\n        this.onUpdate = options.onUpdate\n        this.deferrable = options.deferrable\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this foreign key with exactly same properties.\n     */\n    clone(): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames],\n            referencedColumnNames: [...this.referencedColumnNames],\n            referencedDatabase: this.referencedDatabase,\n            referencedSchema: this.referencedSchema,\n            referencedTableName: this.referencedTableName,\n            onDelete: this.onDelete,\n            onUpdate: this.onUpdate,\n            deferrable: this.deferrable,\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new table foreign key from the given foreign key metadata.\n     */\n    static create(\n        metadata: ForeignKeyMetadata,\n        driver: Driver,\n    ): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: metadata.name,\n            columnNames: metadata.columnNames,\n            referencedColumnNames: metadata.referencedColumnNames,\n            referencedDatabase: metadata.referencedEntityMetadata.database,\n            referencedSchema: metadata.referencedEntityMetadata.schema,\n            referencedTableName: metadata.referencedTablePath,\n            onDelete: metadata.onDelete,\n            onUpdate: metadata.onUpdate,\n            deferrable: metadata.deferrable,\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}