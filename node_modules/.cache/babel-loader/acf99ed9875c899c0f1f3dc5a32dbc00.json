{"ast":null,"code":"import { hash, shorten } from \"../util/StringUtils\";\nimport { VersionUtils } from \"../util/VersionUtils\";\n/**\n * Common driver utility functions.\n */\n\nexport class DriverUtils {\n  // -------------------------------------------------------------------------\n  // Public Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Returns true if given driver is SQLite-based driver.\n   */\n  static isSQLiteFamily(driver) {\n    return [\"sqlite\", \"cordova\", \"react-native\", \"nativescript\", \"sqljs\", \"expo\", \"better-sqlite3\", \"capacitor\"].includes(driver.options.type);\n  }\n  /**\n   * Returns true if given driver is MySQL-based driver.\n   */\n\n\n  static isMySQLFamily(driver) {\n    return [\"mysql\", \"mariadb\"].includes(driver.options.type);\n  }\n\n  static isReleaseVersionOrGreater(driver, version) {\n    return driver.version != null && VersionUtils.isGreaterOrEqual(driver.version, version);\n  }\n\n  static isPostgresFamily(driver) {\n    return [\"postgres\", \"aurora-postgres\"].includes(driver.options.type);\n  }\n  /**\n   * Normalizes and builds a new driver options.\n   * Extracts settings from connection url and sets to a new options object.\n   */\n\n\n  static buildDriverOptions(options, buildOptions) {\n    if (options.url) {\n      const urlDriverOptions = this.parseConnectionUrl(options.url);\n\n      if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\n        urlDriverOptions.sid = urlDriverOptions.database;\n      }\n\n      for (const key of Object.keys(urlDriverOptions)) {\n        if (typeof urlDriverOptions[key] === \"undefined\") {\n          delete urlDriverOptions[key];\n        }\n      }\n\n      return Object.assign({}, options, urlDriverOptions);\n    }\n\n    return Object.assign({}, options);\n  }\n  /**\n   * buildDriverOptions for MongodDB only to support replica set\n   */\n\n\n  static buildMongoDBDriverOptions(options, buildOptions) {\n    if (options.url) {\n      const urlDriverOptions = this.parseMongoDBConnectionUrl(options.url);\n\n      if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\n        urlDriverOptions.sid = urlDriverOptions.database;\n      }\n\n      for (const key of Object.keys(urlDriverOptions)) {\n        if (typeof urlDriverOptions[key] === \"undefined\") {\n          delete urlDriverOptions[key];\n        }\n      }\n\n      return Object.assign({}, options, urlDriverOptions);\n    }\n\n    return Object.assign({}, options);\n  }\n  /**\n   * Joins and shortens alias if needed.\n   *\n   * If the alias length is greater than the limit allowed by the current\n   * driver, replaces it with a shortend string, if the shortend string\n   * is still too long, it will then hash the alias.\n   *\n   * @param driver Current `Driver`.\n   * @param buildOptions Optional settings.\n   * @param alias Alias parts.\n   *\n   * @return An alias that is no longer than the divers max alias length.\n   */\n\n\n  static buildAlias(_ref, buildOptions) {\n    let {\n      maxAliasLength\n    } = _ref;\n\n    for (var _len = arguments.length, alias = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      alias[_key - 2] = arguments[_key];\n    }\n\n    if (typeof buildOptions === \"string\") {\n      alias.unshift(buildOptions);\n      buildOptions = {\n        shorten: false,\n        joiner: \"_\"\n      };\n    } else {\n      buildOptions = Object.assign({\n        shorten: false,\n        joiner: \"_\"\n      }, buildOptions);\n    }\n\n    const newAlias = alias.length === 1 ? alias[0] : alias.join(buildOptions.joiner);\n\n    if (maxAliasLength && maxAliasLength > 0 && newAlias.length > maxAliasLength) {\n      if (buildOptions.shorten === true) {\n        const shortenedAlias = shorten(newAlias);\n\n        if (shortenedAlias.length < maxAliasLength) {\n          return shortenedAlias;\n        }\n      }\n\n      return hash(newAlias, {\n        length: maxAliasLength\n      });\n    }\n\n    return newAlias;\n  }\n  /**\n   * @deprecated use `buildAlias` instead.\n   */\n\n\n  static buildColumnAlias(_ref2, buildOptions) {\n    let {\n      maxAliasLength\n    } = _ref2;\n\n    for (var _len2 = arguments.length, alias = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      alias[_key2 - 2] = arguments[_key2];\n    }\n\n    return this.buildAlias({\n      maxAliasLength\n    }, buildOptions, ...alias);\n  } // -------------------------------------------------------------------------\n  // Private Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Extracts connection data from the connection url.\n   */\n\n\n  static parseConnectionUrl(url) {\n    const type = url.split(\":\")[0];\n    const firstSlashes = url.indexOf(\"//\");\n    const preBase = url.substr(firstSlashes + 2);\n    const secondSlash = preBase.indexOf(\"/\");\n    const base = secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;\n    let afterBase = secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined; // remove mongodb query params\n\n    if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n      afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n    }\n\n    const lastAtSign = base.lastIndexOf(\"@\");\n    const usernameAndPassword = base.substr(0, lastAtSign);\n    const hostAndPort = base.substr(lastAtSign + 1);\n    let username = usernameAndPassword;\n    let password = \"\";\n    const firstColon = usernameAndPassword.indexOf(\":\");\n\n    if (firstColon !== -1) {\n      username = usernameAndPassword.substr(0, firstColon);\n      password = usernameAndPassword.substr(firstColon + 1);\n    }\n\n    const [host, port] = hostAndPort.split(\":\");\n    return {\n      type: type,\n      host: host,\n      username: decodeURIComponent(username),\n      password: decodeURIComponent(password),\n      port: port ? parseInt(port) : undefined,\n      database: afterBase || undefined\n    };\n  }\n  /**\n   * Extracts connection data from the connection url for MongoDB to support replica set.\n   */\n\n\n  static parseMongoDBConnectionUrl(url) {\n    const type = url.split(\":\")[0];\n    const firstSlashes = url.indexOf(\"//\");\n    const preBase = url.substr(firstSlashes + 2);\n    const secondSlash = preBase.indexOf(\"/\");\n    const base = secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;\n    let afterBase = secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined;\n    let afterQuestionMark = \"\";\n    let host = undefined;\n    let port = undefined;\n    let hostReplicaSet = undefined;\n    let replicaSet = undefined;\n    let optionsObject = {};\n\n    if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n      // split params\n      afterQuestionMark = afterBase.substr(afterBase.indexOf(\"?\") + 1, afterBase.length);\n      const optionsList = afterQuestionMark.split(\"&\");\n      let optionKey;\n      let optionValue; // create optionsObject for merge with connectionUrl object before return\n\n      optionsList.forEach(optionItem => {\n        optionKey = optionItem.split(\"=\")[0];\n        optionValue = optionItem.split(\"=\")[1];\n        optionsObject[optionKey] = optionValue;\n      }); // specific replicaSet value to set options about hostReplicaSet\n\n      replicaSet = optionsObject[\"replicaSet\"];\n      afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n    }\n\n    const lastAtSign = base.lastIndexOf(\"@\");\n    const usernameAndPassword = base.substr(0, lastAtSign);\n    const hostAndPort = base.substr(lastAtSign + 1);\n    let username = usernameAndPassword;\n    let password = \"\";\n    const firstColon = usernameAndPassword.indexOf(\":\");\n\n    if (firstColon !== -1) {\n      username = usernameAndPassword.substr(0, firstColon);\n      password = usernameAndPassword.substr(firstColon + 1);\n    } // If replicaSet have value set It as hostlist, If not set like standalone host\n\n\n    if (replicaSet) {\n      hostReplicaSet = hostAndPort;\n    } else {\n      ;\n      [host, port] = hostAndPort.split(\":\");\n    }\n\n    let connectionUrl = {\n      type: type,\n      host: host,\n      hostReplicaSet: hostReplicaSet,\n      username: decodeURIComponent(username),\n      password: decodeURIComponent(password),\n      port: port ? parseInt(port) : undefined,\n      database: afterBase || undefined\n    }; // Loop to set every options in connectionUrl to object\n\n    for (const [key, value] of Object.entries(optionsObject)) {\n      connectionUrl[key] = value;\n    }\n\n    return connectionUrl;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["hash","shorten","VersionUtils","DriverUtils","isSQLiteFamily","driver","includes","options","type","isMySQLFamily","isReleaseVersionOrGreater","version","isGreaterOrEqual","isPostgresFamily","buildDriverOptions","buildOptions","url","urlDriverOptions","parseConnectionUrl","useSid","database","sid","key","Object","keys","assign","buildMongoDBDriverOptions","parseMongoDBConnectionUrl","buildAlias","maxAliasLength","alias","unshift","joiner","newAlias","length","join","shortenedAlias","buildColumnAlias","split","firstSlashes","indexOf","preBase","substr","secondSlash","base","afterBase","undefined","lastAtSign","lastIndexOf","usernameAndPassword","hostAndPort","username","password","firstColon","host","port","decodeURIComponent","parseInt","afterQuestionMark","hostReplicaSet","replicaSet","optionsObject","optionsList","optionKey","optionValue","forEach","optionItem","connectionUrl","value","entries"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\driver\\DriverUtils.ts"],"sourcesContent":["import { Driver } from \"./Driver\"\nimport { hash, shorten } from \"../util/StringUtils\"\nimport { VersionUtils } from \"../util/VersionUtils\"\n\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns true if given driver is SQLite-based driver.\n     */\n    static isSQLiteFamily(driver: Driver): boolean {\n        return [\n            \"sqlite\",\n            \"cordova\",\n            \"react-native\",\n            \"nativescript\",\n            \"sqljs\",\n            \"expo\",\n            \"better-sqlite3\",\n            \"capacitor\",\n        ].includes(driver.options.type)\n    }\n\n    /**\n     * Returns true if given driver is MySQL-based driver.\n     */\n    static isMySQLFamily(driver: Driver): boolean {\n        return [\"mysql\", \"mariadb\"].includes(driver.options.type)\n    }\n\n    static isReleaseVersionOrGreater(driver: Driver, version: string): boolean {\n        return (\n            driver.version != null &&\n            VersionUtils.isGreaterOrEqual(driver.version, version)\n        )\n    }\n\n    static isPostgresFamily(driver: Driver): boolean {\n        return [\"postgres\", \"aurora-postgres\"].includes(driver.options.type)\n    }\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseConnectionUrl(options.url) as {\n                [key: string]: any\n            }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * buildDriverOptions for MongodDB only to support replica set\n     */\n    static buildMongoDBDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseMongoDBConnectionUrl(\n                options.url,\n            ) as { [key: string]: any }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * Joins and shortens alias if needed.\n     *\n     * If the alias length is greater than the limit allowed by the current\n     * driver, replaces it with a shortend string, if the shortend string\n     * is still too long, it will then hash the alias.\n     *\n     * @param driver Current `Driver`.\n     * @param buildOptions Optional settings.\n     * @param alias Alias parts.\n     *\n     * @return An alias that is no longer than the divers max alias length.\n     */\n    static buildAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | string,\n        ...alias: string[]\n    ): string {\n        if (typeof buildOptions === \"string\") {\n            alias.unshift(buildOptions)\n            buildOptions = { shorten: false, joiner: \"_\" }\n        } else {\n            buildOptions = Object.assign(\n                { shorten: false, joiner: \"_\" },\n                buildOptions,\n            )\n        }\n\n        const newAlias =\n            alias.length === 1 ? alias[0] : alias.join(buildOptions.joiner)\n        if (\n            maxAliasLength &&\n            maxAliasLength > 0 &&\n            newAlias.length > maxAliasLength\n        ) {\n            if (buildOptions.shorten === true) {\n                const shortenedAlias = shorten(newAlias)\n                if (shortenedAlias.length < maxAliasLength) {\n                    return shortenedAlias\n                }\n            }\n\n            return hash(newAlias, { length: maxAliasLength })\n        }\n\n        return newAlias\n    }\n\n    /**\n     * @deprecated use `buildAlias` instead.\n     */\n    static buildColumnAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | string,\n        ...alias: string[]\n    ) {\n        return this.buildAlias(\n            { maxAliasLength } as Driver,\n            buildOptions,\n            ...alias,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        // remove mongodb query params\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n        const [host, port] = hostAndPort.split(\":\")\n\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n    }\n\n    /**\n     * Extracts connection data from the connection url for MongoDB to support replica set.\n     */\n    private static parseMongoDBConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        let afterQuestionMark = \"\"\n        let host = undefined\n        let port = undefined\n        let hostReplicaSet = undefined\n        let replicaSet = undefined\n\n        let optionsObject: any = {}\n\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            // split params\n            afterQuestionMark = afterBase.substr(\n                afterBase.indexOf(\"?\") + 1,\n                afterBase.length,\n            )\n\n            const optionsList = afterQuestionMark.split(\"&\")\n            let optionKey: string\n            let optionValue: string\n\n            // create optionsObject for merge with connectionUrl object before return\n            optionsList.forEach((optionItem) => {\n                optionKey = optionItem.split(\"=\")[0]\n                optionValue = optionItem.split(\"=\")[1]\n                optionsObject[optionKey] = optionValue\n            })\n\n            // specific replicaSet value to set options about hostReplicaSet\n            replicaSet = optionsObject[\"replicaSet\"]\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n\n        // If replicaSet have value set It as hostlist, If not set like standalone host\n        if (replicaSet) {\n            hostReplicaSet = hostAndPort\n        } else {\n            ;[host, port] = hostAndPort.split(\":\")\n        }\n\n        let connectionUrl: any = {\n            type: type,\n            host: host,\n            hostReplicaSet: hostReplicaSet,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n\n        // Loop to set every options in connectionUrl to object\n        for (const [key, value] of Object.entries(optionsObject)) {\n            connectionUrl[key] = value\n        }\n\n        return connectionUrl\n    }\n}\n"]},"metadata":{},"sourceType":"module"}