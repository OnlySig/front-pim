{"ast":null,"code":"import { TypeORMError } from \"./TypeORMError\";\n/**\n * Thrown when a version check on an object that uses optimistic locking through a version field fails.\n */\n\nexport class OptimisticLockVersionMismatchError extends TypeORMError {\n  constructor(entity, expectedVersion, actualVersion) {\n    super(`The optimistic lock on entity ${entity} failed, version ${expectedVersion} was expected, but is actually ${actualVersion}.`);\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAA6B,gBAA7B;AAEA;;;;AAGA,OAAM,MAAOC,kCAAP,SAAkDD,YAAlD,CAA8D;EAChEE,YACIC,MADJ,EAEIC,eAFJ,EAGIC,aAHJ,EAGgC;IAE5B,MACI,iCAAiCF,MAAM,oBAAoBC,eAAe,kCAAkCC,aAAa,GAD7H;EAGH;;AAT+D","names":["TypeORMError","OptimisticLockVersionMismatchError","constructor","entity","expectedVersion","actualVersion"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\error\\OptimisticLockVersionMismatchError.ts"],"sourcesContent":["import { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when a version check on an object that uses optimistic locking through a version field fails.\n */\nexport class OptimisticLockVersionMismatchError extends TypeORMError {\n    constructor(\n        entity: string,\n        expectedVersion: number | Date,\n        actualVersion: number | Date,\n    ) {\n        super(\n            `The optimistic lock on entity ${entity} failed, version ${expectedVersion} was expected, but is actually ${actualVersion}.`,\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}