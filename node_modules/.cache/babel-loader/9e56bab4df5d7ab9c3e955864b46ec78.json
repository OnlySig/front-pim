{"ast":null,"code":"import { RandomGenerator } from \"../util/RandomGenerator\";\nimport { camelCase, snakeCase, titleCase } from \"../util/StringUtils\";\n/**\n * Naming strategy that is used by default.\n */\n\nexport class DefaultNamingStrategy {\n  constructor() {\n    this.nestedSetColumnNames = {\n      left: \"nsleft\",\n      right: \"nsright\"\n    };\n    this.materializedPathColumnName = \"mpath\";\n  }\n\n  getTableName(tableOrName) {\n    if (typeof tableOrName !== \"string\") {\n      tableOrName = tableOrName.name;\n    }\n\n    return tableOrName.split(\".\").pop();\n  }\n  /**\n   * Normalizes table name.\n   *\n   * @param targetName Name of the target entity that can be used to generate a table name.\n   * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n   */\n\n\n  tableName(targetName, userSpecifiedName) {\n    return userSpecifiedName ? userSpecifiedName : snakeCase(targetName);\n  }\n  /**\n   * Creates a table name for a junction table of a closure table.\n   *\n   * @param originalClosureTableName Name of the closure table which owns this junction table.\n   */\n\n\n  closureJunctionTableName(originalClosureTableName) {\n    return originalClosureTableName + \"_closure\";\n  }\n\n  columnName(propertyName, customName, embeddedPrefixes) {\n    const name = customName || propertyName;\n    if (embeddedPrefixes.length) return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name);\n    return name;\n  }\n\n  relationName(propertyName) {\n    return propertyName;\n  }\n\n  primaryKeyName(tableOrName, columnNames) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    const clonedColumnNames = [...columnNames];\n    clonedColumnNames.sort();\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n    return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27);\n  }\n\n  uniqueConstraintName(tableOrName, columnNames) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    const clonedColumnNames = [...columnNames];\n    clonedColumnNames.sort();\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n    return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27);\n  }\n\n  relationConstraintName(tableOrName, columnNames, where) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    const clonedColumnNames = [...columnNames];\n    clonedColumnNames.sort();\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n    if (where) key += `_${where}`;\n    return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26);\n  }\n\n  defaultConstraintName(tableOrName, columnName) {\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    const key = `${replacedTableName}_${columnName}`;\n    return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27);\n  }\n\n  foreignKeyName(tableOrName, columnNames, _referencedTablePath, _referencedColumnNames) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    const clonedColumnNames = [...columnNames];\n    clonedColumnNames.sort();\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n    return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27);\n  }\n\n  indexName(tableOrName, columnNames, where) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    const clonedColumnNames = [...columnNames];\n    clonedColumnNames.sort();\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n    if (where) key += `_${where}`;\n    return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26);\n  }\n\n  checkConstraintName(tableOrName, expression, isEnum) {\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    const key = `${replacedTableName}_${expression}`;\n    const name = \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26);\n    return isEnum ? `${name}_ENUM` : name;\n  }\n\n  exclusionConstraintName(tableOrName, expression) {\n    const tableName = this.getTableName(tableOrName);\n    const replacedTableName = tableName.replace(\".\", \"_\");\n    const key = `${replacedTableName}_${expression}`;\n    return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26);\n  }\n\n  joinColumnName(relationName, referencedColumnName) {\n    return camelCase(relationName + \"_\" + referencedColumnName);\n  }\n\n  joinTableName(firstTableName, secondTableName, firstPropertyName, secondPropertyName) {\n    return snakeCase(firstTableName + \"_\" + firstPropertyName.replace(/\\./gi, \"_\") + \"_\" + secondTableName);\n  }\n\n  joinTableColumnDuplicationPrefix(columnName, index) {\n    return columnName + \"_\" + index;\n  }\n\n  joinTableColumnName(tableName, propertyName, columnName) {\n    return camelCase(tableName + \"_\" + (columnName ? columnName : propertyName));\n  }\n\n  joinTableInverseColumnName(tableName, propertyName, columnName) {\n    return this.joinTableColumnName(tableName, propertyName, columnName);\n  }\n  /**\n   * Adds globally set prefix to the table name.\n   * This method is executed no matter if prefix was set or not.\n   * Table name is either user's given table name, either name generated from entity target.\n   * Note that table name comes here already normalized by #tableName method.\n   */\n\n\n  prefixTableName(prefix, tableName) {\n    return prefix + tableName;\n  }\n\n  eagerJoinRelationAlias(alias, propertyPath) {\n    return alias + \"_\" + propertyPath.replace(\".\", \"_\");\n  }\n\n}","map":{"version":3,"mappings":"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","names":["RandomGenerator","camelCase","snakeCase","titleCase","DefaultNamingStrategy","constructor","left","right","getTableName","tableOrName","name","split","pop","tableName","targetName","userSpecifiedName","closureJunctionTableName","originalClosureTableName","columnName","propertyName","customName","embeddedPrefixes","length","join","relationName","primaryKeyName","columnNames","clonedColumnNames","sort","replacedTableName","replace","key","sha1","substr","uniqueConstraintName","relationConstraintName","where","defaultConstraintName","foreignKeyName","_referencedTablePath","_referencedColumnNames","indexName","checkConstraintName","expression","isEnum","exclusionConstraintName","joinColumnName","referencedColumnName","joinTableName","firstTableName","secondTableName","firstPropertyName","secondPropertyName","joinTableColumnDuplicationPrefix","index","joinTableColumnName","joinTableInverseColumnName","prefixTableName","prefix","eagerJoinRelationAlias","alias","propertyPath"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\naming-strategy\\DefaultNamingStrategy.ts"],"sourcesContent":["import { NamingStrategyInterface } from \"./NamingStrategyInterface\"\nimport { RandomGenerator } from \"../util/RandomGenerator\"\nimport { camelCase, snakeCase, titleCase } from \"../util/StringUtils\"\nimport { Table } from \"../schema-builder/table/Table\"\n\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\n    protected getTableName(tableOrName: Table | string): string {\n        if (typeof tableOrName !== \"string\") {\n            tableOrName = tableOrName.name\n        }\n\n        return tableOrName.split(\".\").pop()!\n    }\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(\n        targetName: string,\n        userSpecifiedName: string | undefined,\n    ): string {\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName)\n    }\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string {\n        return originalClosureTableName + \"_closure\"\n    }\n\n    columnName(\n        propertyName: string,\n        customName: string,\n        embeddedPrefixes: string[],\n    ): string {\n        const name = customName || propertyName\n\n        if (embeddedPrefixes.length)\n            return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name)\n\n        return name\n    }\n\n    relationName(propertyName: string): string {\n        return propertyName\n    }\n\n    primaryKeyName(tableOrName: Table | string, columnNames: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    uniqueConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    relationConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        if (where) key += `_${where}`\n\n        return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    defaultConstraintName(\n        tableOrName: Table | string,\n        columnName: string,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${columnName}`\n        return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    foreignKeyName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        _referencedTablePath?: string,\n        _referencedColumnNames?: string[],\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    indexName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        if (where) key += `_${where}`\n\n        return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    checkConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n        isEnum?: boolean,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${expression}`\n        const name = \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26)\n        return isEnum ? `${name}_ENUM` : name\n    }\n\n    exclusionConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${expression}`\n        return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    joinColumnName(relationName: string, referencedColumnName: string): string {\n        return camelCase(relationName + \"_\" + referencedColumnName)\n    }\n\n    joinTableName(\n        firstTableName: string,\n        secondTableName: string,\n        firstPropertyName: string,\n        secondPropertyName: string,\n    ): string {\n        return snakeCase(\n            firstTableName +\n                \"_\" +\n                firstPropertyName.replace(/\\./gi, \"_\") +\n                \"_\" +\n                secondTableName,\n        )\n    }\n\n    joinTableColumnDuplicationPrefix(\n        columnName: string,\n        index: number,\n    ): string {\n        return columnName + \"_\" + index\n    }\n\n    joinTableColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string {\n        return camelCase(\n            tableName + \"_\" + (columnName ? columnName : propertyName),\n        )\n    }\n\n    joinTableInverseColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string {\n        return this.joinTableColumnName(tableName, propertyName, columnName)\n    }\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string {\n        return prefix + tableName\n    }\n\n    eagerJoinRelationAlias(alias: string, propertyPath: string): string {\n        return alias + \"_\" + propertyPath.replace(\".\", \"_\")\n    }\n\n    nestedSetColumnNames = { left: \"nsleft\", right: \"nsright\" }\n    materializedPathColumnName = \"mpath\"\n}\n"]},"metadata":{},"sourceType":"module"}