{"ast":null,"code":"import { PostgresDriver } from \"../postgres/PostgresDriver\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { AuroraPostgresQueryRunner } from \"./AuroraPostgresQueryRunner\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { DriverUtils } from \"../DriverUtils\";\n\nclass PostgresWrapper extends PostgresDriver {}\n\nexport class AuroraPostgresDriver extends PostgresWrapper {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super();\n    /**\n     * Represent transaction support by this driver\n     */\n\n    this.transactionSupport = \"nested\";\n    this.connection = connection;\n    this.options = connection.options;\n    this.isReplicated = false; // load data-api package\n\n    this.loadDependencies();\n    this.client = new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions);\n    this.database = DriverUtils.buildDriverOptions(this.options).database;\n  } // -------------------------------------------------------------------------\n  // Public Implemented Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Performs connection to the database.\n   * Based on pooling options, it can either create connection immediately,\n   * either create a pool and create connection when needed.\n   */\n\n\n  async connect() {}\n  /**\n   * Closes connection with database.\n   */\n\n\n  async disconnect() {}\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n\n\n  createQueryRunner(mode) {\n    return new AuroraPostgresQueryRunner(this, new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, (query, parameters) => this.connection.logger.logQuery(query, parameters), this.options.serviceConfigOptions, this.options.formatOptions), mode);\n  }\n  /**\n   * Prepares given value to a value to be persisted, based on its column type and metadata.\n   */\n\n\n  preparePersistentValue(value, columnMetadata) {\n    if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\n      return super.preparePersistentValue(value, columnMetadata);\n    }\n\n    if (columnMetadata.transformer) value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n    return this.client.preparePersistentValue(value, columnMetadata);\n  }\n  /**\n   * Prepares given value to a value to be persisted, based on its column type and metadata.\n   */\n\n\n  prepareHydratedValue(value, columnMetadata) {\n    if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\n      return super.prepareHydratedValue(value, columnMetadata);\n    }\n\n    if (columnMetadata.transformer) value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n    return this.client.prepareHydratedValue(value, columnMetadata);\n  } // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n\n\n  loadDependencies() {\n    const driver = this.options.driver || PlatformTools.load(\"typeorm-aurora-data-api-driver\");\n    const {\n      pg\n    } = driver;\n    this.DataApiDriver = pg;\n  }\n  /**\n   * Executes given query.\n   */\n\n\n  executeQuery(connection, query) {\n    return this.connection.query(query);\n  }\n  /**\n   * Makes any action after connection (e.g. create extensions in Postgres driver).\n   */\n\n\n  async afterConnect() {\n    const extensionsMetadata = await this.checkMetadataForExtensions();\n\n    if (extensionsMetadata.hasExtensions) {\n      await this.enableExtensions(extensionsMetadata, this.connection);\n    }\n\n    return Promise.resolve();\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAASA,cAAT,QAA+B,4BAA/B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AAGA,SAASC,yBAAT,QAA0C,6BAA1C;AAGA,SAASC,sBAAT,QAAuC,mCAAvC;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAEA,MAAeC,eAAf,SAAuCL,cAAvC,CAAqD;;AAMrD,OAAM,MAAOM,oBAAP,SAAoCD,eAApC,CAAmD;EAoCrD;EACA;EACA;EAEAE,YAAYC,UAAZ,EAAkC;IAC9B;IAxBJ;;;;IAGA,0BAAqB,QAArB;IAsBI,KAAKA,UAAL,GAAkBA,UAAlB;IACA,KAAKC,OAAL,GAAeD,UAAU,CAACC,OAA1B;IACA,KAAKC,YAAL,GAAoB,KAApB,CAJ8B,CAM9B;;IACA,KAAKC,gBAAL;IAEA,KAAKC,MAAL,GAAc,IAAI,KAAKC,aAAT,CACV,KAAKJ,OAAL,CAAaK,MADH,EAEV,KAAKL,OAAL,CAAaM,SAFH,EAGV,KAAKN,OAAL,CAAaO,WAHH,EAIV,KAAKP,OAAL,CAAaQ,QAJH,EAKV,CAACC,KAAD,EAAgBC,UAAhB,KACI,KAAKX,UAAL,CAAgBY,MAAhB,CAAuBC,QAAvB,CAAgCH,KAAhC,EAAuCC,UAAvC,CANM,EAOV,KAAKV,OAAL,CAAaa,oBAPH,EAQV,KAAKb,OAAL,CAAac,aARH,CAAd;IAWA,KAAKN,QAAL,GAAgBb,WAAW,CAACoB,kBAAZ,CAA+B,KAAKf,OAApC,EAA6CQ,QAA7D;EACH,CA7DoD,CA+DrD;EACA;EACA;;EAEA;;;;;;;EAKa,MAAPQ,OAAO,IAAoB;EAEjC;;;;;EAGgB,MAAVC,UAAU,IAAoB;EAEpC;;;;;EAGAC,iBAAiB,CAACC,IAAD,EAAsB;IACnC,OAAO,IAAI1B,yBAAJ,CACH,IADG,EAEH,IAAI,KAAKW,aAAT,CACI,KAAKJ,OAAL,CAAaK,MADjB,EAEI,KAAKL,OAAL,CAAaM,SAFjB,EAGI,KAAKN,OAAL,CAAaO,WAHjB,EAII,KAAKP,OAAL,CAAaQ,QAJjB,EAKI,CAACC,KAAD,EAAgBC,UAAhB,KACI,KAAKX,UAAL,CAAgBY,MAAhB,CAAuBC,QAAvB,CAAgCH,KAAhC,EAAuCC,UAAvC,CANR,EAOI,KAAKV,OAAL,CAAaa,oBAPjB,EAQI,KAAKb,OAAL,CAAac,aARjB,CAFG,EAYHK,IAZG,CAAP;EAcH;EAED;;;;;EAGAC,sBAAsB,CAACC,KAAD,EAAaC,cAAb,EAA2C;IAC7D,IACI,KAAKtB,OAAL,CAAac,aAAb,IACA,KAAKd,OAAL,CAAac,aAAb,CAA2BS,cAA3B,KAA8C,KAFlD,EAGE;MACE,OAAO,MAAMH,sBAAN,CAA6BC,KAA7B,EAAoCC,cAApC,CAAP;IACH;;IAED,IAAIA,cAAc,CAACE,WAAnB,EACIH,KAAK,GAAG3B,sBAAsB,CAAC+B,WAAvB,CACJH,cAAc,CAACE,WADX,EAEJH,KAFI,CAAR;IAKJ,OAAO,KAAKlB,MAAL,CAAYiB,sBAAZ,CAAmCC,KAAnC,EAA0CC,cAA1C,CAAP;EACH;EAED;;;;;EAGAI,oBAAoB,CAACL,KAAD,EAAaC,cAAb,EAA2C;IAC3D,IACI,KAAKtB,OAAL,CAAac,aAAb,IACA,KAAKd,OAAL,CAAac,aAAb,CAA2BS,cAA3B,KAA8C,KAFlD,EAGE;MACE,OAAO,MAAMG,oBAAN,CAA2BL,KAA3B,EAAkCC,cAAlC,CAAP;IACH;;IAED,IAAIA,cAAc,CAACE,WAAnB,EACIH,KAAK,GAAG3B,sBAAsB,CAACiC,aAAvB,CACJL,cAAc,CAACE,WADX,EAEJH,KAFI,CAAR;IAKJ,OAAO,KAAKlB,MAAL,CAAYuB,oBAAZ,CAAiCL,KAAjC,EAAwCC,cAAxC,CAAP;EACH,CAzIoD,CA2IrD;EACA;EACA;;EAEA;;;;;EAGUpB,gBAAgB;IACtB,MAAM0B,MAAM,GACR,KAAK5B,OAAL,CAAa4B,MAAb,IACApC,aAAa,CAACqC,IAAd,CAAmB,gCAAnB,CAFJ;IAGA,MAAM;MAAEC;IAAF,IAASF,MAAf;IAEA,KAAKxB,aAAL,GAAqB0B,EAArB;EACH;EAED;;;;;EAGUC,YAAY,CAAChC,UAAD,EAAkBU,KAAlB,EAA+B;IACjD,OAAO,KAAKV,UAAL,CAAgBU,KAAhB,CAAsBA,KAAtB,CAAP;EACH;EAED;;;;;EAGkB,MAAZuB,YAAY;IACd,MAAMC,kBAAkB,GAAG,MAAM,KAAKC,0BAAL,EAAjC;;IAEA,IAAID,kBAAkB,CAACE,aAAvB,EAAsC;MAClC,MAAM,KAAKC,gBAAL,CAAsBH,kBAAtB,EAA0C,KAAKlC,UAA/C,CAAN;IACH;;IAED,OAAOsC,OAAO,CAACC,OAAR,EAAP;EACH;;AA7KoD","names":["PostgresDriver","PlatformTools","AuroraPostgresQueryRunner","ApplyValueTransformers","DriverUtils","PostgresWrapper","AuroraPostgresDriver","constructor","connection","options","isReplicated","loadDependencies","client","DataApiDriver","region","secretArn","resourceArn","database","query","parameters","logger","logQuery","serviceConfigOptions","formatOptions","buildDriverOptions","connect","disconnect","createQueryRunner","mode","preparePersistentValue","value","columnMetadata","castParameters","transformer","transformTo","prepareHydratedValue","transformFrom","driver","load","pg","executeQuery","afterConnect","extensionsMetadata","checkMetadataForExtensions","hasExtensions","enableExtensions","Promise","resolve"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\driver\\aurora-postgres\\AuroraPostgresDriver.ts"],"sourcesContent":["import { Driver } from \"../Driver\"\nimport { PostgresDriver } from \"../postgres/PostgresDriver\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { AuroraPostgresConnectionOptions } from \"./AuroraPostgresConnectionOptions\"\nimport { AuroraPostgresQueryRunner } from \"./AuroraPostgresQueryRunner\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { DriverUtils } from \"../DriverUtils\"\n\nabstract class PostgresWrapper extends PostgresDriver {\n    options: any\n\n    abstract createQueryRunner(mode: ReplicationMode): any\n}\n\nexport class AuroraPostgresDriver extends PostgresWrapper implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: DataSource\n\n    /**\n     * Aurora Data API underlying library.\n     */\n    DataApiDriver: any\n\n    client: any\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport = \"nested\" as const\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: AuroraPostgresConnectionOptions\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super()\n        this.connection = connection\n        this.options = connection.options as AuroraPostgresConnectionOptions\n        this.isReplicated = false\n\n        // load data-api package\n        this.loadDependencies()\n\n        this.client = new this.DataApiDriver(\n            this.options.region,\n            this.options.secretArn,\n            this.options.resourceArn,\n            this.options.database,\n            (query: string, parameters?: any[]) =>\n                this.connection.logger.logQuery(query, parameters),\n            this.options.serviceConfigOptions,\n            this.options.formatOptions,\n        )\n\n        this.database = DriverUtils.buildDriverOptions(this.options).database\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {}\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {}\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new AuroraPostgresQueryRunner(\n            this,\n            new this.DataApiDriver(\n                this.options.region,\n                this.options.secretArn,\n                this.options.resourceArn,\n                this.options.database,\n                (query: string, parameters?: any[]) =>\n                    this.connection.logger.logQuery(query, parameters),\n                this.options.serviceConfigOptions,\n                this.options.formatOptions,\n            ),\n            mode,\n        )\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (\n            this.options.formatOptions &&\n            this.options.formatOptions.castParameters === false\n        ) {\n            return super.preparePersistentValue(value, columnMetadata)\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return this.client.preparePersistentValue(value, columnMetadata)\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (\n            this.options.formatOptions &&\n            this.options.formatOptions.castParameters === false\n        ) {\n            return super.prepareHydratedValue(value, columnMetadata)\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return this.client.prepareHydratedValue(value, columnMetadata)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        const driver =\n            this.options.driver ||\n            PlatformTools.load(\"typeorm-aurora-data-api-driver\")\n        const { pg } = driver\n\n        this.DataApiDriver = pg\n    }\n\n    /**\n     * Executes given query.\n     */\n    protected executeQuery(connection: any, query: string) {\n        return this.connection.query(query)\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    async afterConnect(): Promise<void> {\n        const extensionsMetadata = await this.checkMetadataForExtensions()\n\n        if (extensionsMetadata.hasExtensions) {\n            await this.enableExtensions(extensionsMetadata, this.connection)\n        }\n\n        return Promise.resolve()\n    }\n}\n"]},"metadata":{},"sourceType":"module"}