{"ast":null,"code":"import { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Find Operator used in Find Conditions.\n */\n\nexport class FindOperator {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(type, value) {\n    let useParameter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let multipleParameters = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let getSql = arguments.length > 4 ? arguments[4] : undefined;\n    let objectLiteralParameters = arguments.length > 5 ? arguments[5] : undefined;\n    this[\"@instanceof\"] = Symbol.for(\"FindOperator\");\n    this._type = type;\n    this._value = value;\n    this._useParameter = useParameter;\n    this._multipleParameters = multipleParameters;\n    this._getSql = getSql;\n    this._objectLiteralParameters = objectLiteralParameters;\n  } // -------------------------------------------------------------------------\n  // Accessors\n  // -------------------------------------------------------------------------\n\n  /**\n   * Indicates if parameter is used or not for this operator.\n   * Extracts final value if value is another find operator.\n   */\n\n\n  get useParameter() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.useParameter;\n    return this._useParameter;\n  }\n  /**\n   * Indicates if multiple parameters must be used for this operator.\n   * Extracts final value if value is another find operator.\n   */\n\n\n  get multipleParameters() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.multipleParameters;\n    return this._multipleParameters;\n  }\n  /**\n   * Gets the Type of this FindOperator\n   */\n\n\n  get type() {\n    return this._type;\n  }\n  /**\n   * Gets the final value needs to be used as parameter value.\n   */\n\n\n  get value() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.value;\n    return this._value;\n  }\n  /**\n   * Gets ObjectLiteral parameters.\n   */\n\n\n  get objectLiteralParameters() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.objectLiteralParameters;\n    return this._objectLiteralParameters;\n  }\n  /**\n   * Gets the child FindOperator if it exists\n   */\n\n\n  get child() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value;\n    return undefined;\n  }\n  /**\n   * Gets the SQL generator\n   */\n\n\n  get getSql() {\n    if (InstanceChecker.isFindOperator(this._value)) return this._value.getSql;\n    return this._getSql;\n  }\n\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAT,QAAgC,yBAAhC;AAIA;;;;AAGA,OAAM,MAAOC,YAAP,CAAmB;EAqCrB;EACA;EACA;EAEAC,YACIC,IADJ,EAEIC,KAFJ,EAM2C;IAAA,IAHvCC,YAGuC,uEAHf,IAGe;IAAA,IAFvCC,kBAEuC,uEAFT,KAES;IAAA,IADvCC,MACuC;IAAA,IAAvCC,uBAAuC;IA9ClC,sBAAgBC,MAAM,CAACC,GAAP,CAAW,cAAX,CAAhB;IAgDL,KAAKC,KAAL,GAAaR,IAAb;IACA,KAAKS,MAAL,GAAcR,KAAd;IACA,KAAKS,aAAL,GAAqBR,YAArB;IACA,KAAKS,mBAAL,GAA2BR,kBAA3B;IACA,KAAKS,OAAL,GAAeR,MAAf;IACA,KAAKS,wBAAL,GAAgCR,uBAAhC;EACH,CAvDoB,CAyDrB;EACA;EACA;;EAEA;;;;;;EAIgB,IAAZH,YAAY;IACZ,IAAIL,eAAe,CAACiB,cAAhB,CAA+B,KAAKL,MAApC,CAAJ,EACI,OAAO,KAAKA,MAAL,CAAYP,YAAnB;IAEJ,OAAO,KAAKQ,aAAZ;EACH;EAED;;;;;;EAIsB,IAAlBP,kBAAkB;IAClB,IAAIN,eAAe,CAACiB,cAAhB,CAA+B,KAAKL,MAApC,CAAJ,EACI,OAAO,KAAKA,MAAL,CAAYN,kBAAnB;IAEJ,OAAO,KAAKQ,mBAAZ;EACH;EAED;;;;;EAGQ,IAAJX,IAAI;IACJ,OAAO,KAAKQ,KAAZ;EACH;EAED;;;;;EAGS,IAALP,KAAK;IACL,IAAIJ,eAAe,CAACiB,cAAhB,CAA+B,KAAKL,MAApC,CAAJ,EACI,OAAO,KAAKA,MAAL,CAAYR,KAAnB;IAEJ,OAAO,KAAKQ,MAAZ;EACH;EAED;;;;;EAG2B,IAAvBJ,uBAAuB;IACvB,IAAIR,eAAe,CAACiB,cAAhB,CAA+B,KAAKL,MAApC,CAAJ,EACI,OAAO,KAAKA,MAAL,CAAYJ,uBAAnB;IAEJ,OAAO,KAAKQ,wBAAZ;EACH;EAED;;;;;EAGS,IAALE,KAAK;IACL,IAAIlB,eAAe,CAACiB,cAAhB,CAA+B,KAAKL,MAApC,CAAJ,EAAiD,OAAO,KAAKA,MAAZ;IAEjD,OAAOO,SAAP;EACH;EAED;;;;;EAGU,IAANZ,MAAM;IACN,IAAIP,eAAe,CAACiB,cAAhB,CAA+B,KAAKL,MAApC,CAAJ,EACI,OAAO,KAAKA,MAAL,CAAYL,MAAnB;IAEJ,OAAO,KAAKQ,OAAZ;EACH;;AA/HoB","names":["InstanceChecker","FindOperator","constructor","type","value","useParameter","multipleParameters","getSql","objectLiteralParameters","Symbol","for","_type","_value","_useParameter","_multipleParameters","_getSql","_objectLiteralParameters","isFindOperator","child","undefined"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\find-options\\FindOperator.ts"],"sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { FindOperatorType } from \"./FindOperatorType\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\ntype SqlGeneratorType = (aliasPath: string) => string\n\n/**\n * Find Operator used in Find Conditions.\n */\nexport class FindOperator<T> {\n    readonly \"@instanceof\" = Symbol.for(\"FindOperator\")\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Operator type.\n     */\n    private _type: FindOperatorType\n\n    /**\n     * Parameter value.\n     */\n    private _value: T | FindOperator<T>\n\n    /**\n     * ObjectLiteral parameters.\n     */\n    private _objectLiteralParameters: ObjectLiteral | undefined\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     */\n    private _useParameter: boolean\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     */\n    private _multipleParameters: boolean\n\n    /**\n     * SQL generator\n     */\n    private _getSql: SqlGeneratorType | undefined\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        type: FindOperatorType,\n        value: T | FindOperator<T>,\n        useParameter: boolean = true,\n        multipleParameters: boolean = false,\n        getSql?: SqlGeneratorType,\n        objectLiteralParameters?: ObjectLiteral,\n    ) {\n        this._type = type\n        this._value = value\n        this._useParameter = useParameter\n        this._multipleParameters = multipleParameters\n        this._getSql = getSql\n        this._objectLiteralParameters = objectLiteralParameters\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get useParameter(): boolean {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.useParameter\n\n        return this._useParameter\n    }\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get multipleParameters(): boolean {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.multipleParameters\n\n        return this._multipleParameters\n    }\n\n    /**\n     * Gets the Type of this FindOperator\n     */\n    get type(): FindOperatorType {\n        return this._type\n    }\n\n    /**\n     * Gets the final value needs to be used as parameter value.\n     */\n    get value(): T {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.value\n\n        return this._value\n    }\n\n    /**\n     * Gets ObjectLiteral parameters.\n     */\n    get objectLiteralParameters(): ObjectLiteral | undefined {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.objectLiteralParameters\n\n        return this._objectLiteralParameters\n    }\n\n    /**\n     * Gets the child FindOperator if it exists\n     */\n    get child(): FindOperator<T> | undefined {\n        if (InstanceChecker.isFindOperator(this._value)) return this._value\n\n        return undefined\n    }\n\n    /**\n     * Gets the SQL generator\n     */\n    get getSql(): SqlGeneratorType | undefined {\n        if (InstanceChecker.isFindOperator(this._value))\n            return this._value.getSql\n\n        return this._getSql\n    }\n}\n"]},"metadata":{},"sourceType":"module"}