{"ast":null,"code":"import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { CordovaQueryRunner } from \"./CordovaQueryRunner\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nexport class CordovaDriver extends AbstractSqliteDriver {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    super(connection); // this.connection = connection;\n    // this.options = connection.options as CordovaConnectionOptions;\n\n    this.database = this.options.database; // validate options to make sure everything is set\n\n    if (!this.options.database) throw new DriverOptionNotSetError(\"database\");\n    if (!this.options.location) throw new DriverOptionNotSetError(\"location\"); // load sqlite package\n\n    this.loadDependencies();\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Closes connection with database.\n   */\n\n\n  async disconnect() {\n    this.queryRunner = undefined;\n    return new Promise((ok, fail) => {\n      this.databaseConnection.close(ok, fail);\n    });\n  }\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n\n\n  createQueryRunner(mode) {\n    if (!this.queryRunner) this.queryRunner = new CordovaQueryRunner(this);\n    return this.queryRunner;\n  } // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates connection with the database.\n   */\n\n\n  async createDatabaseConnection() {\n    const options = Object.assign({}, {\n      name: this.options.database,\n      location: this.options.location\n    }, this.options.extra || {});\n    const connection = await new Promise(resolve => {\n      this.sqlite.openDatabase(options, db => resolve(db));\n    });\n    await new Promise((ok, fail) => {\n      // we need to enable foreign keys in sqlite to make sure all foreign key related features\n      // working properly. this also makes onDelete to work with sqlite.\n      connection.executeSql(`PRAGMA foreign_keys = ON`, [], () => ok(), err => fail(err));\n    });\n    return connection;\n  }\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n\n\n  loadDependencies() {\n    try {\n      const sqlite = this.options.driver || window.sqlitePlugin;\n      this.sqlite = sqlite;\n    } catch (e) {\n      throw new DriverPackageNotInstalledError(\"Cordova-SQLite\", \"cordova-sqlite-storage\");\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,oBAAT,QAAqC,yCAArC;AAEA,SAASC,kBAAT,QAAmC,sBAAnC;AAGA,SAASC,uBAAT,QAAwC,qCAAxC;AACA,SAASC,8BAAT,QAA+C,4CAA/C;AAUA,OAAM,MAAOC,aAAP,SAA6BJ,oBAA7B,CAAiD;EAGnD;EACA;EACA;EAEAK,YAAYC,UAAZ,EAAkC;IAC9B,MAAMA,UAAN,EAD8B,CAG9B;IACA;;IACA,KAAKC,QAAL,GAAgB,KAAKC,OAAL,CAAaD,QAA7B,CAL8B,CAO9B;;IACA,IAAI,CAAC,KAAKC,OAAL,CAAaD,QAAlB,EACI,MAAM,IAAIL,uBAAJ,CAA4B,UAA5B,CAAN;IAEJ,IAAI,CAAC,KAAKM,OAAL,CAAaC,QAAlB,EACI,MAAM,IAAIP,uBAAJ,CAA4B,UAA5B,CAAN,CAZ0B,CAc9B;;IACA,KAAKQ,gBAAL;EACH,CAvBkD,CAyBnD;EACA;EACA;;EAEA;;;;;EAGgB,MAAVC,UAAU;IACZ,KAAKC,WAAL,GAAmBC,SAAnB;IAEA,OAAO,IAAIC,OAAJ,CAAkB,CAACC,EAAD,EAAKC,IAAL,KAAa;MAClC,KAAKC,kBAAL,CAAwBC,KAAxB,CAA8BH,EAA9B,EAAkCC,IAAlC;IACH,CAFM,CAAP;EAGH;EAED;;;;;EAGAG,iBAAiB,CAACC,IAAD,EAAsB;IACnC,IAAI,CAAC,KAAKR,WAAV,EAAuB,KAAKA,WAAL,GAAmB,IAAIX,kBAAJ,CAAuB,IAAvB,CAAnB;IAEvB,OAAO,KAAKW,WAAZ;EACH,CA/CkD,CAiDnD;EACA;EACA;;EAEA;;;;;EAGwC,MAAxBS,wBAAwB;IACpC,MAAMb,OAAO,GAAGc,MAAM,CAACC,MAAP,CACZ,EADY,EAEZ;MACIC,IAAI,EAAE,KAAKhB,OAAL,CAAaD,QADvB;MAEIE,QAAQ,EAAE,KAAKD,OAAL,CAAaC;IAF3B,CAFY,EAMZ,KAAKD,OAAL,CAAaiB,KAAb,IAAsB,EANV,CAAhB;IASA,MAAMnB,UAAU,GAAG,MAAM,IAAIQ,OAAJ,CAAkBY,OAAD,IAAY;MAClD,KAAKC,MAAL,CAAYC,YAAZ,CAAyBpB,OAAzB,EAAmCqB,EAAD,IAAaH,OAAO,CAACG,EAAD,CAAtD;IACH,CAFwB,CAAzB;IAIA,MAAM,IAAIf,OAAJ,CAAkB,CAACC,EAAD,EAAKC,IAAL,KAAa;MACjC;MACA;MACAV,UAAU,CAACwB,UAAX,CACI,0BADJ,EAEI,EAFJ,EAGI,MAAMf,EAAE,EAHZ,EAIKgB,GAAD,IAAcf,IAAI,CAACe,GAAD,CAJtB;IAMH,CATK,CAAN;IAWA,OAAOzB,UAAP;EACH;EAED;;;;;EAGUI,gBAAgB;IACtB,IAAI;MACA,MAAMiB,MAAM,GAAG,KAAKnB,OAAL,CAAawB,MAAb,IAAuBC,MAAM,CAACC,YAA7C;MACA,KAAKP,MAAL,GAAcA,MAAd;IACH,CAHD,CAGE,OAAOQ,CAAP,EAAU;MACR,MAAM,IAAIhC,8BAAJ,CACF,gBADE,EAEF,wBAFE,CAAN;IAIH;EACJ;;AAjGkD","names":["AbstractSqliteDriver","CordovaQueryRunner","DriverOptionNotSetError","DriverPackageNotInstalledError","CordovaDriver","constructor","connection","database","options","location","loadDependencies","disconnect","queryRunner","undefined","Promise","ok","fail","databaseConnection","close","createQueryRunner","mode","createDatabaseConnection","Object","assign","name","extra","resolve","sqlite","openDatabase","db","executeSql","err","driver","window","sqlitePlugin","e"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\driver\\cordova\\CordovaDriver.ts"],"sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\nimport { CordovaConnectionOptions } from \"./CordovaConnectionOptions\"\nimport { CordovaQueryRunner } from \"./CordovaQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { DataSource } from \"../../data-source/DataSource\"\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\n\n// needed for typescript compiler\ninterface Window {\n    sqlitePlugin: any\n}\n\ndeclare let window: Window\n\nexport class CordovaDriver extends AbstractSqliteDriver {\n    options: CordovaConnectionOptions\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n\n        // this.connection = connection;\n        // this.options = connection.options as CordovaConnectionOptions;\n        this.database = this.options.database\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\")\n\n        if (!this.options.location)\n            throw new DriverOptionNotSetError(\"location\")\n\n        // load sqlite package\n        this.loadDependencies()\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.close(ok, fail)\n        })\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) this.queryRunner = new CordovaQueryRunner(this)\n\n        return this.queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected async createDatabaseConnection() {\n        const options = Object.assign(\n            {},\n            {\n                name: this.options.database,\n                location: this.options.location,\n            },\n            this.options.extra || {},\n        )\n\n        const connection = await new Promise<any>((resolve) => {\n            this.sqlite.openDatabase(options, (db: any) => resolve(db))\n        })\n\n        await new Promise<void>((ok, fail) => {\n            // we need to enable foreign keys in sqlite to make sure all foreign key related features\n            // working properly. this also makes onDelete to work with sqlite.\n            connection.executeSql(\n                `PRAGMA foreign_keys = ON`,\n                [],\n                () => ok(),\n                (err: any) => fail(err),\n            )\n        })\n\n        return connection\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            const sqlite = this.options.driver || window.sqlitePlugin\n            this.sqlite = sqlite\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\n                \"Cordova-SQLite\",\n                \"cordova-sqlite-storage\",\n            )\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}