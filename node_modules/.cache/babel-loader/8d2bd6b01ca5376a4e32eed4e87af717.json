{"ast":null,"code":"import { RedisQueryResultCache } from \"./RedisQueryResultCache\";\nimport { DbQueryResultCache } from \"./DbQueryResultCache\";\nimport { TypeORMError } from \"../error/TypeORMError\";\n/**\n * Caches query result into Redis database.\n */\n\nexport class QueryResultCacheFactory {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(connection) {\n    this.connection = connection;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates a new query result cache based on connection options.\n   */\n\n\n  create() {\n    if (!this.connection.options.cache) throw new TypeORMError(`To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`);\n    const cache = this.connection.options.cache;\n\n    if (cache.provider && typeof cache.provider === \"function\") {\n      return cache.provider(this.connection);\n    }\n\n    if (cache.type === \"redis\" || cache.type === \"ioredis\" || cache.type === \"ioredis/cluster\") {\n      return new RedisQueryResultCache(this.connection, cache.type);\n    } else {\n      return new DbQueryResultCache(this.connection);\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,qBAAT,QAAsC,yBAAtC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AAGA,SAASC,YAAT,QAA6B,uBAA7B;AAEA;;;;AAGA,OAAM,MAAOC,uBAAP,CAA8B;EAChC;EACA;EACA;EAEAC,YAAsBC,UAAtB,EAA4C;IAAtB;EAA0B,CALhB,CAOhC;EACA;EACA;;EAEA;;;;;EAGAC,MAAM;IACF,IAAI,CAAC,KAAKD,UAAL,CAAgBE,OAAhB,CAAwBC,KAA7B,EACI,MAAM,IAAIN,YAAJ,CACF,uKADE,CAAN;IAIJ,MAAMM,KAAK,GAAQ,KAAKH,UAAL,CAAgBE,OAAhB,CAAwBC,KAA3C;;IAEA,IAAIA,KAAK,CAACC,QAAN,IAAkB,OAAOD,KAAK,CAACC,QAAb,KAA0B,UAAhD,EAA4D;MACxD,OAAOD,KAAK,CAACC,QAAN,CAAe,KAAKJ,UAApB,CAAP;IACH;;IAED,IACIG,KAAK,CAACE,IAAN,KAAe,OAAf,IACAF,KAAK,CAACE,IAAN,KAAe,SADf,IAEAF,KAAK,CAACE,IAAN,KAAe,iBAHnB,EAIE;MACE,OAAO,IAAIV,qBAAJ,CAA0B,KAAKK,UAA/B,EAA2CG,KAAK,CAACE,IAAjD,CAAP;IACH,CAND,MAMO;MACH,OAAO,IAAIT,kBAAJ,CAAuB,KAAKI,UAA5B,CAAP;IACH;EACJ;;AAnC+B","names":["RedisQueryResultCache","DbQueryResultCache","TypeORMError","QueryResultCacheFactory","constructor","connection","create","options","cache","provider","type"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\cache\\QueryResultCacheFactory.ts"],"sourcesContent":["import { RedisQueryResultCache } from \"./RedisQueryResultCache\"\nimport { DbQueryResultCache } from \"./DbQueryResultCache\"\nimport { QueryResultCache } from \"./QueryResultCache\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { TypeORMError } from \"../error/TypeORMError\"\n\n/**\n * Caches query result into Redis database.\n */\nexport class QueryResultCacheFactory {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: DataSource) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query result cache based on connection options.\n     */\n    create(): QueryResultCache {\n        if (!this.connection.options.cache)\n            throw new TypeORMError(\n                `To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`,\n            )\n\n        const cache: any = this.connection.options.cache\n\n        if (cache.provider && typeof cache.provider === \"function\") {\n            return cache.provider(this.connection)\n        }\n\n        if (\n            cache.type === \"redis\" ||\n            cache.type === \"ioredis\" ||\n            cache.type === \"ioredis/cluster\"\n        ) {\n            return new RedisQueryResultCache(this.connection, cache.type)\n        } else {\n            return new DbQueryResultCache(this.connection)\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}