{"ast":null,"code":"import { TypeORMError } from \"./TypeORMError\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { InstanceChecker } from \"../util/InstanceChecker\";\n/**\n * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.\n */\n\nexport class EntityNotFoundError extends TypeORMError {\n  constructor(entityClass, criteria) {\n    super();\n    this.message = `Could not find any entity of type \"${this.stringifyTarget(entityClass)}\" ` + `matching: ${this.stringifyCriteria(criteria)}`;\n  }\n\n  stringifyTarget(target) {\n    if (InstanceChecker.isEntitySchema(target)) {\n      return target.options.name;\n    } else if (typeof target === \"function\") {\n      return target.name;\n    } else if (ObjectUtils.isObject(target) && \"name\" in target) {\n      return target.name;\n    } else {\n      return target;\n    }\n  }\n\n  stringifyCriteria(criteria) {\n    try {\n      return JSON.stringify(criteria, null, 4);\n    } catch (e) {}\n\n    return \"\" + criteria;\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AAEA;;;;AAGA,OAAM,MAAOC,mBAAP,SAAmCH,YAAnC,CAA+C;EACjDI,YAAYC,WAAZ,EAA4CC,QAA5C,EAAyD;IACrD;IAEA,KAAKC,OAAL,GACI,sCAAsC,KAAKC,eAAL,CAClCH,WADkC,CAErC,IAFD,GAEQ,aAAa,KAAKI,iBAAL,CAAuBH,QAAvB,CAAgC,EAHzD;EAIH;;EAEOE,eAAe,CAACE,MAAD,EAA0B;IAC7C,IAAIR,eAAe,CAACS,cAAhB,CAA+BD,MAA/B,CAAJ,EAA4C;MACxC,OAAOA,MAAM,CAACE,OAAP,CAAeC,IAAtB;IACH,CAFD,MAEO,IAAI,OAAOH,MAAP,KAAkB,UAAtB,EAAkC;MACrC,OAAOA,MAAM,CAACG,IAAd;IACH,CAFM,MAEA,IAAIZ,WAAW,CAACa,QAAZ,CAAqBJ,MAArB,KAAgC,UAAWA,MAA/C,EAA+D;MAClE,OAAQA,MAAc,CAACG,IAAvB;IACH,CAFM,MAEA;MACH,OAAOH,MAAP;IACH;EACJ;;EAEOD,iBAAiB,CAACH,QAAD,EAAc;IACnC,IAAI;MACA,OAAOS,IAAI,CAACC,SAAL,CAAeV,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAAP;IACH,CAFD,CAEE,OAAOW,CAAP,EAAU,CAAE;;IACd,OAAO,KAAKX,QAAZ;EACH;;AA3BgD","names":["TypeORMError","ObjectUtils","InstanceChecker","EntityNotFoundError","constructor","entityClass","criteria","message","stringifyTarget","stringifyCriteria","target","isEntitySchema","options","name","isObject","JSON","stringify","e"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\error\\EntityNotFoundError.ts"],"sourcesContent":["import { EntityTarget } from \"../common/EntityTarget\"\nimport { TypeORMError } from \"./TypeORMError\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.\n */\nexport class EntityNotFoundError extends TypeORMError {\n    constructor(entityClass: EntityTarget<any>, criteria: any) {\n        super()\n\n        this.message =\n            `Could not find any entity of type \"${this.stringifyTarget(\n                entityClass,\n            )}\" ` + `matching: ${this.stringifyCriteria(criteria)}`\n    }\n\n    private stringifyTarget(target: EntityTarget<any>): string {\n        if (InstanceChecker.isEntitySchema(target)) {\n            return target.options.name\n        } else if (typeof target === \"function\") {\n            return target.name\n        } else if (ObjectUtils.isObject(target) && \"name\" in (target as any)) {\n            return (target as any).name\n        } else {\n            return target as any\n        }\n    }\n\n    private stringifyCriteria(criteria: any): string {\n        try {\n            return JSON.stringify(criteria, null, 4)\n        } catch (e) {}\n        return \"\" + criteria\n    }\n}\n"]},"metadata":{},"sourceType":"module"}