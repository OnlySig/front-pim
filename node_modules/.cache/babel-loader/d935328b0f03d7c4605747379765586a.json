{"ast":null,"code":"/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nexport class PlatformTools {\n  /**\n   * Gets global variable where global stuff can be stored.\n   */\n  static getGlobalVariable() {\n    if (typeof window !== \"undefined\") {\n      return window;\n    } else {\n      // NativeScript uses global, not window\n      return global;\n    }\n  }\n  /**\n   * Loads (\"require\"-s) given file or package.\n   * This operation only supports on node platform\n   */\n\n\n  static load(name) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n    return \"\";\n  }\n  /**\n   * Normalizes given path. Does \"path.normalize\".\n   */\n\n\n  static pathNormalize(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n    return \"\";\n  }\n  /**\n   * Gets file extension. Does \"path.extname\".\n   */\n\n\n  static pathExtname(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n    return \"\";\n  }\n  /**\n   * Resolved given path. Does \"path.resolve\".\n   */\n\n\n  static pathResolve(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n    return \"\";\n  }\n  /**\n   * Synchronously checks if file exist. Does \"fs.existsSync\".\n   */\n\n\n  static fileExist(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n    return false;\n  }\n\n  static dotenv(pathStr) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: \"${pathStr}\" }).`);\n  }\n  /**\n   * Gets environment variable.\n   */\n\n\n  static getEnvVariable(name) {\n    // if (this.type === \"browser\")\n    //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n    return undefined;\n  }\n\n  static readFileSync(filename) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"${filename}\").`);\n    return null;\n  }\n\n  static appendFileSync(filename, data) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"${filename}\").`);\n  }\n\n  static writeFile(path, data) {\n    if (this.type === \"browser\") throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"${path}\").`);\n    return Promise.reject(null);\n  }\n  /**\n   * Highlights sql string to be print in the console.\n   */\n\n\n  static highlightSql(sql) {\n    return sql;\n  }\n  /**\n   * Highlights json string to be print in the console.\n   */\n\n\n  static highlightJson(json) {\n    return json;\n  }\n  /**\n   * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n   */\n\n\n  static logInfo(prefix, info) {\n    console.info(prefix + \" \", info);\n  }\n\n  static logError(prefix, error) {\n    console.error(prefix + \" \", error);\n  }\n\n  static logWarn(prefix, warning) {\n    console.warn(prefix + \" \", warning);\n  }\n\n  static log(message) {\n    console.log(message);\n  }\n\n  static warn(message) {\n    return message;\n  }\n\n}\n/**\n * Type of the currently running platform.\n */\n\nPlatformTools.type = \"browser\";\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\n\nexport class EventEmitter {}\nexport class Readable {}\nexport class Writable {}\n\nif (typeof window !== \"undefined\") {\n  window.Buffer = require(\"buffer/\").Buffer;\n} // NativeScript uses global, not window\n\n\nif (typeof global !== \"undefined\") {\n  global.Buffer = require(\"buffer/\").Buffer;\n}","map":{"version":3,"mappings":"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","names":["PlatformTools","getGlobalVariable","window","global","load","name","type","Error","pathNormalize","pathStr","pathExtname","pathResolve","fileExist","dotenv","getEnvVariable","undefined","readFileSync","filename","appendFileSync","data","writeFile","path","Promise","reject","highlightSql","sql","highlightJson","json","logInfo","prefix","info","console","logError","error","logWarn","warning","warn","log","message","EventEmitter","Readable","Writable","Buffer","require"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\platform\\BrowserPlatformTools.ts"],"sourcesContent":["/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nexport class PlatformTools {\n\n    /**\n     * Type of the currently running platform.\n     */\n    static type: \"browser\"|\"node\" = \"browser\";\n\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    static getGlobalVariable(): any {\n        if (typeof window !== \"undefined\") {\n            return window\n        } else {\n            // NativeScript uses global, not window\n            return global\n        }\n    }\n\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    static load(name: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Normalizes given path. Does \"path.normalize\".\n     */\n    static pathNormalize(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    static pathExtname(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    static pathResolve(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    static fileExist(pathStr: string): boolean {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n\n        return false;\n    }\n\n    static dotenv(pathStr: string): void {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: \"${pathStr}\" }).`);\n    }\n\n    /**\n     * Gets environment variable.\n     */\n    static getEnvVariable(name: string): any {\n        // if (this.type === \"browser\")\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n        return undefined;\n    }\n\n    static readFileSync(filename: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"${filename}\").`);\n        return null;\n    }\n\n    static appendFileSync(filename: string, data: any) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"${filename}\").`);\n    }\n\n    static writeFile(path: string, data: any): Promise<void> {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"${path}\").`);\n        return Promise.reject(null);\n    }\n\n    /**\n     * Highlights sql string to be print in the console.\n     */\n    static highlightSql(sql: string) {\n        return sql;\n    }\n\n    /**\n     * Highlights json string to be print in the console.\n     */\n    static highlightJson(json: string) {\n        return json;\n    }\n\n    /**\n     * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n     */\n    static logInfo(prefix: string, info: any) {\n        console.info(prefix + \" \", info);\n    }\n\n    static logError(prefix: string, error: any) {\n        console.error(prefix + \" \", error);\n    }\n\n    static logWarn(prefix: string, warning: any) {\n        console.warn(prefix + \" \", warning);\n    }\n\n    static log(message: string) {\n        console.log(message);\n    }\n\n    static warn(message: string) {\n        return message;\n    }\n}\n\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\nexport class EventEmitter {}\n\nexport class Readable {}\n\nexport class Writable {}\n\nexport interface ReadStream {}\n\n/**\n * This loads a polyfill to enable Buffers in the browser.\n */\ninterface Window {\n    Buffer: any;\n}\n\ndeclare var window: Window;\nif (typeof window !== \"undefined\") {\n    window.Buffer = require(\"buffer/\").Buffer;\n}\n// NativeScript uses global, not window\nif (typeof global !== \"undefined\") {\n    global.Buffer = require(\"buffer/\").Buffer;\n}\n"]},"metadata":{},"sourceType":"module"}