{"ast":null,"code":"import { Subject } from \"../Subject\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\n\nexport class ManyToManySubjectBuilder {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  constructor(subjects) {\n    this.subjects = subjects;\n  } // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n\n  /**\n   * Builds operations for any changes in the many-to-many relations of the subjects.\n   */\n\n\n  build() {\n    this.subjects.forEach(subject => {\n      // if subject doesn't have entity then no need to find something that should be inserted or removed\n      if (!subject.entity) return; // go through all persistence enabled many-to-many relations and build subject operations for them\n\n      subject.metadata.manyToManyRelations.forEach(relation => {\n        // skip relations for which persistence is disabled\n        if (relation.persistenceEnabled === false) return;\n        this.buildForSubjectRelation(subject, relation);\n      });\n    });\n  }\n  /**\n   * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n   */\n\n\n  buildForAllRemoval(subject) {\n    // if subject does not have a database entity then it means it does not exist in the database\n    // if it does not exist in the database then we don't have anything for deletion\n    if (!subject.databaseEntity) return; // go through all persistence enabled many-to-many relations and build subject operations for them\n\n    subject.metadata.manyToManyRelations.forEach(relation => {\n      // skip relations for which persistence is disabled\n      if (relation.persistenceEnabled === false) return; // get all related entities (actually related entity relation ids) bind to this subject entity\n      // by example: returns category ids of the post we are currently working with (subject.entity is post)\n\n      const relatedEntityRelationIdsInDatabase = relation.getEntityValue(subject.databaseEntity); // go through all related entities and create a new junction subject for each row in junction table\n\n      relatedEntityRelationIdsInDatabase.forEach(relationId => {\n        const junctionSubject = new Subject({\n          metadata: relation.junctionEntityMetadata,\n          parentSubject: subject,\n          mustBeRemoved: true,\n          identifier: this.buildJunctionIdentifier(subject, relation, relationId)\n        }); // we use unshift because we need to perform those operations before post deletion is performed\n        // but post deletion was already added as an subject\n        // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n\n        this.subjects.push(junctionSubject);\n      });\n    });\n  } // ---------------------------------------------------------------------\n  // Protected Methods\n  // ---------------------------------------------------------------------\n\n  /**\n   * Builds operations for a given subject and relation.\n   *\n   * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n   */\n\n\n  buildForSubjectRelation(subject, relation) {\n    // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n    // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n    let databaseRelatedEntityIds = []; // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n    // and we don't need to remove something that is not exist\n\n    if (subject.databaseEntity) databaseRelatedEntityIds = relation.getEntityValue(subject.databaseEntity); // extract entity's relation value\n    // by example: categories inside our post (subject.entity is post)\n\n    let relatedEntities = relation.getEntityValue(subject.entity);\n    if (relatedEntities === null) // if value set to null its equal if we set it to empty array - all items must be removed from the database\n      relatedEntities = [];\n    if (!Array.isArray(relatedEntities)) return; // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n\n    relatedEntities.forEach(relatedEntity => {\n      // by example: relatedEntity is category from categories saved with post\n      // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n      // extract only relation id from the related entities, since we only need it for comparison\n      // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n      let relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n\n      const relatedEntitySubject = this.subjects.find(subject => {\n        return subject.entity === relatedEntity;\n      }); // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n\n      if (relatedEntitySubject) relatedEntityRelationIdMap = relatedEntitySubject.identifier; // if related entity relation id map is empty it means related entity is newly persisted\n\n      if (!relatedEntityRelationIdMap) {\n        // we decided to remove this error because it brings complications when saving object with non-saved entities\n        // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n        // in this persistence because he didn't pass this entity for save or he did not set cascades\n        // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n        // we decided to remove this error because it brings complications when saving object with non-saved entities\n        // if (!relatedEntitySubject)\n        //     throw new TypeORMError(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n        //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n        //         `Please setup cascade insertion or save entities before binding it.`);\n        if (!relatedEntitySubject) return;\n      } // try to find related entity in the database\n      // by example: find post's category in the database post's categories\n\n\n      const relatedEntityExistInDatabase = databaseRelatedEntityIds.find(databaseRelatedEntityRelationId => {\n        return OrmUtils.compareIds(databaseRelatedEntityRelationId, relatedEntityRelationIdMap);\n      }); // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n\n      if (relatedEntityExistInDatabase) return;\n      const ownerValue = relation.isOwning ? subject : relatedEntitySubject || relatedEntity; // by example: ownerEntityMap is post from subject here\n\n      const inverseValue = relation.isOwning ? relatedEntitySubject || relatedEntity : subject; // by example: inverseEntityMap is category from categories array here\n      // create a new subject for insert operation of junction rows\n\n      const junctionSubject = new Subject({\n        metadata: relation.junctionEntityMetadata,\n        parentSubject: subject,\n        canBeInserted: true\n      });\n      this.subjects.push(junctionSubject);\n      relation.junctionEntityMetadata.ownerColumns.forEach(column => {\n        junctionSubject.changeMaps.push({\n          column: column,\n          value: ownerValue // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(ownerEntityMap),\n\n        });\n      });\n      relation.junctionEntityMetadata.inverseColumns.forEach(column => {\n        junctionSubject.changeMaps.push({\n          column: column,\n          value: inverseValue // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(inverseEntityMap),\n\n        });\n      });\n    }); // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n\n    const changedInverseEntityRelationIds = [];\n    relatedEntities.forEach(relatedEntity => {\n      // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n      let relatedEntityRelationIdMap = relation.inverseEntityMetadata.getEntityIdMap(relatedEntity); // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n\n      const relatedEntitySubject = this.subjects.find(subject => {\n        return subject.entity === relatedEntity;\n      }); // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n\n      if (relatedEntitySubject) relatedEntityRelationIdMap = relatedEntitySubject.identifier;\n      if (relatedEntityRelationIdMap !== undefined && relatedEntityRelationIdMap !== null) changedInverseEntityRelationIds.push(relatedEntityRelationIdMap);\n    }); // now from all entities in the persisted entity find only those which aren't found in the db\n\n    const removedJunctionEntityIds = databaseRelatedEntityIds.filter(existRelationId => {\n      return !changedInverseEntityRelationIds.find(changedRelationId => {\n        return OrmUtils.compareIds(changedRelationId, existRelationId);\n      });\n    }); // finally create a new junction remove operations for missing related entities\n\n    removedJunctionEntityIds.forEach(removedEntityRelationId => {\n      const junctionSubject = new Subject({\n        metadata: relation.junctionEntityMetadata,\n        parentSubject: subject,\n        mustBeRemoved: true,\n        identifier: this.buildJunctionIdentifier(subject, relation, removedEntityRelationId)\n      });\n      this.subjects.push(junctionSubject);\n    });\n  }\n  /**\n   * Creates identifiers for junction table.\n   * Example: { postId: 1, categoryId: 2 }\n   */\n\n\n  buildJunctionIdentifier(subject, relation, relationId) {\n    const ownerEntityMap = relation.isOwning ? subject.entity : relationId;\n    const inverseEntityMap = relation.isOwning ? relationId : subject.entity;\n    const identifier = {};\n    relation.junctionEntityMetadata.ownerColumns.forEach(column => {\n      OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(ownerEntityMap)));\n    });\n    relation.junctionEntityMetadata.inverseColumns.forEach(column => {\n      OrmUtils.mergeDeep(identifier, column.createValueMap(column.referencedColumn.getEntityValue(inverseEntityMap)));\n    });\n    return identifier;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Subject","OrmUtils","ManyToManySubjectBuilder","constructor","subjects","build","forEach","subject","entity","metadata","manyToManyRelations","relation","persistenceEnabled","buildForSubjectRelation","buildForAllRemoval","databaseEntity","relatedEntityRelationIdsInDatabase","getEntityValue","relationId","junctionSubject","junctionEntityMetadata","parentSubject","mustBeRemoved","identifier","buildJunctionIdentifier","push","databaseRelatedEntityIds","relatedEntities","Array","isArray","relatedEntity","relatedEntityRelationIdMap","inverseEntityMetadata","getEntityIdMap","relatedEntitySubject","find","relatedEntityExistInDatabase","databaseRelatedEntityRelationId","compareIds","ownerValue","isOwning","inverseValue","canBeInserted","ownerColumns","column","changeMaps","value","inverseColumns","changedInverseEntityRelationIds","undefined","removedJunctionEntityIds","filter","existRelationId","changedRelationId","removedEntityRelationId","ownerEntityMap","inverseEntityMap","mergeDeep","createValueMap","referencedColumn"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\persistence\\subject-builder\\ManyToManySubjectBuilder.ts"],"sourcesContent":["import { Subject } from \"../Subject\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { RelationMetadata } from \"../../metadata/RelationMetadata\"\n\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\nexport class ManyToManySubjectBuilder {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected subjects: Subject[]) {}\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for any changes in the many-to-many relations of the subjects.\n     */\n    build(): void {\n        this.subjects.forEach((subject) => {\n            // if subject doesn't have entity then no need to find something that should be inserted or removed\n            if (!subject.entity) return\n\n            // go through all persistence enabled many-to-many relations and build subject operations for them\n            subject.metadata.manyToManyRelations.forEach((relation) => {\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false) return\n\n                this.buildForSubjectRelation(subject, relation)\n            })\n        })\n    }\n\n    /**\n     * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n     */\n    buildForAllRemoval(subject: Subject) {\n        // if subject does not have a database entity then it means it does not exist in the database\n        // if it does not exist in the database then we don't have anything for deletion\n        if (!subject.databaseEntity) return\n\n        // go through all persistence enabled many-to-many relations and build subject operations for them\n        subject.metadata.manyToManyRelations.forEach((relation) => {\n            // skip relations for which persistence is disabled\n            if (relation.persistenceEnabled === false) return\n\n            // get all related entities (actually related entity relation ids) bind to this subject entity\n            // by example: returns category ids of the post we are currently working with (subject.entity is post)\n            const relatedEntityRelationIdsInDatabase: ObjectLiteral[] =\n                relation.getEntityValue(subject.databaseEntity!)\n\n            // go through all related entities and create a new junction subject for each row in junction table\n            relatedEntityRelationIdsInDatabase.forEach((relationId) => {\n                const junctionSubject = new Subject({\n                    metadata: relation.junctionEntityMetadata!,\n                    parentSubject: subject,\n                    mustBeRemoved: true,\n                    identifier: this.buildJunctionIdentifier(\n                        subject,\n                        relation,\n                        relationId,\n                    ),\n                })\n\n                // we use unshift because we need to perform those operations before post deletion is performed\n                // but post deletion was already added as an subject\n                // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n                this.subjects.push(junctionSubject)\n            })\n        })\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    protected buildForSubjectRelation(\n        subject: Subject,\n        relation: RelationMetadata,\n    ) {\n        // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n        // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n        let databaseRelatedEntityIds: ObjectLiteral[] = []\n\n        // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n        // and we don't need to remove something that is not exist\n        if (subject.databaseEntity)\n            databaseRelatedEntityIds = relation.getEntityValue(\n                subject.databaseEntity,\n            )\n\n        // extract entity's relation value\n        // by example: categories inside our post (subject.entity is post)\n        let relatedEntities: ObjectLiteral[] = relation.getEntityValue(\n            subject.entity!,\n        )\n        if (relatedEntities === null)\n            // if value set to null its equal if we set it to empty array - all items must be removed from the database\n            relatedEntities = []\n        if (!Array.isArray(relatedEntities)) return\n\n        // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n        relatedEntities.forEach((relatedEntity) => {\n            // by example: relatedEntity is category from categories saved with post\n\n            // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n\n            // extract only relation id from the related entities, since we only need it for comparison\n            // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n            let relatedEntityRelationIdMap =\n                relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity\n            })\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier\n\n            // if related entity relation id map is empty it means related entity is newly persisted\n            if (!relatedEntityRelationIdMap) {\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n                // in this persistence because he didn't pass this entity for save or he did not set cascades\n                // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new TypeORMError(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject) return\n            }\n\n            // try to find related entity in the database\n            // by example: find post's category in the database post's categories\n            const relatedEntityExistInDatabase = databaseRelatedEntityIds.find(\n                (databaseRelatedEntityRelationId) => {\n                    return OrmUtils.compareIds(\n                        databaseRelatedEntityRelationId,\n                        relatedEntityRelationIdMap,\n                    )\n                },\n            )\n\n            // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n            if (relatedEntityExistInDatabase) return\n\n            const ownerValue = relation.isOwning\n                ? subject\n                : relatedEntitySubject || relatedEntity // by example: ownerEntityMap is post from subject here\n            const inverseValue = relation.isOwning\n                ? relatedEntitySubject || relatedEntity\n                : subject // by example: inverseEntityMap is category from categories array here\n\n            // create a new subject for insert operation of junction rows\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                canBeInserted: true,\n            })\n            this.subjects.push(junctionSubject)\n\n            relation.junctionEntityMetadata!.ownerColumns.forEach((column) => {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: ownerValue,\n                    // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(ownerEntityMap),\n                })\n            })\n\n            relation.junctionEntityMetadata!.inverseColumns.forEach(\n                (column) => {\n                    junctionSubject.changeMaps.push({\n                        column: column,\n                        value: inverseValue,\n                        // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(inverseEntityMap),\n                    })\n                },\n            )\n        })\n\n        // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n        const changedInverseEntityRelationIds: ObjectLiteral[] = []\n        relatedEntities.forEach((relatedEntity) => {\n            // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n            let relatedEntityRelationIdMap =\n                relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity\n            })\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier\n\n            if (\n                relatedEntityRelationIdMap !== undefined &&\n                relatedEntityRelationIdMap !== null\n            )\n                changedInverseEntityRelationIds.push(relatedEntityRelationIdMap)\n        })\n\n        // now from all entities in the persisted entity find only those which aren't found in the db\n        const removedJunctionEntityIds = databaseRelatedEntityIds.filter(\n            (existRelationId) => {\n                return !changedInverseEntityRelationIds.find(\n                    (changedRelationId) => {\n                        return OrmUtils.compareIds(\n                            changedRelationId,\n                            existRelationId,\n                        )\n                    },\n                )\n            },\n        )\n\n        // finally create a new junction remove operations for missing related entities\n        removedJunctionEntityIds.forEach((removedEntityRelationId) => {\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                mustBeRemoved: true,\n                identifier: this.buildJunctionIdentifier(\n                    subject,\n                    relation,\n                    removedEntityRelationId,\n                ),\n            })\n            this.subjects.push(junctionSubject)\n        })\n    }\n\n    /**\n     * Creates identifiers for junction table.\n     * Example: { postId: 1, categoryId: 2 }\n     */\n    protected buildJunctionIdentifier(\n        subject: Subject,\n        relation: RelationMetadata,\n        relationId: ObjectLiteral,\n    ) {\n        const ownerEntityMap = relation.isOwning ? subject.entity! : relationId\n        const inverseEntityMap = relation.isOwning\n            ? relationId\n            : subject.entity!\n\n        const identifier: ObjectLiteral = {}\n        relation.junctionEntityMetadata!.ownerColumns.forEach((column) => {\n            OrmUtils.mergeDeep(\n                identifier,\n                column.createValueMap(\n                    column.referencedColumn!.getEntityValue(ownerEntityMap),\n                ),\n            )\n        })\n        relation.junctionEntityMetadata!.inverseColumns.forEach((column) => {\n            OrmUtils.mergeDeep(\n                identifier,\n                column.createValueMap(\n                    column.referencedColumn!.getEntityValue(inverseEntityMap),\n                ),\n            )\n        })\n        return identifier\n    }\n}\n"]},"metadata":{},"sourceType":"module"}