{"ast":null,"code":"/**\n * View in the database represented in this class.\n */\nexport class View {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  constructor(options) {\n    this[\"@instanceof\"] = Symbol.for(\"View\");\n\n    if (options) {\n      this.database = options.database;\n      this.schema = options.schema;\n      this.name = options.name;\n      this.expression = options.expression;\n      this.materialized = !!options.materialized;\n    }\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Clones this table to a new table with all properties cloned.\n   */\n\n\n  clone() {\n    return new View({\n      database: this.database,\n      schema: this.schema,\n      name: this.name,\n      expression: this.expression,\n      materialized: this.materialized\n    });\n  } // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates view from a given entity metadata.\n   */\n\n\n  static create(entityMetadata, driver) {\n    const options = {\n      database: entityMetadata.database,\n      schema: entityMetadata.schema,\n      name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n      expression: entityMetadata.expression,\n      materialized: entityMetadata.tableMetadataArgs.materialized\n    };\n    return new View(options);\n  }\n\n}","map":{"version":3,"mappings":"AAGA;;;AAGA,OAAM,MAAOA,IAAP,CAAW;EAgCb;EACA;EACA;EAEAC,YAAYC,OAAZ,EAAiC;IAnCxB,sBAAgBC,MAAM,CAACC,GAAP,CAAW,MAAX,CAAhB;;IAoCL,IAAIF,OAAJ,EAAa;MACT,KAAKG,QAAL,GAAgBH,OAAO,CAACG,QAAxB;MACA,KAAKC,MAAL,GAAcJ,OAAO,CAACI,MAAtB;MACA,KAAKC,IAAL,GAAYL,OAAO,CAACK,IAApB;MACA,KAAKC,UAAL,GAAkBN,OAAO,CAACM,UAA1B;MACA,KAAKC,YAAL,GAAoB,CAAC,CAACP,OAAO,CAACO,YAA9B;IACH;EACJ,CA5CY,CA8Cb;EACA;EACA;;EAEA;;;;;EAGAC,KAAK;IACD,OAAO,IAAIV,IAAJ,CAAsB;MACzBK,QAAQ,EAAE,KAAKA,QADU;MAEzBC,MAAM,EAAE,KAAKA,MAFY;MAGzBC,IAAI,EAAE,KAAKA,IAHc;MAIzBC,UAAU,EAAE,KAAKA,UAJQ;MAKzBC,YAAY,EAAE,KAAKA;IALM,CAAtB,CAAP;EAOH,CA7DY,CA+Db;EACA;EACA;;EAEA;;;;;EAGa,OAANE,MAAM,CAACC,cAAD,EAAiCC,MAAjC,EAA+C;IACxD,MAAMX,OAAO,GAAgB;MACzBG,QAAQ,EAAEO,cAAc,CAACP,QADA;MAEzBC,MAAM,EAAEM,cAAc,CAACN,MAFE;MAGzBC,IAAI,EAAEM,MAAM,CAACC,cAAP,CACFF,cAAc,CAACG,SADb,EAEFH,cAAc,CAACN,MAFb,EAGFM,cAAc,CAACP,QAHb,CAHmB;MAQzBG,UAAU,EAAEI,cAAc,CAACJ,UARF;MASzBC,YAAY,EAAEG,cAAc,CAACI,iBAAf,CAAiCP;IATtB,CAA7B;IAYA,OAAO,IAAIT,IAAJ,CAASE,OAAT,CAAP;EACH;;AApFY","names":["View","constructor","options","Symbol","for","database","schema","name","expression","materialized","clone","create","entityMetadata","driver","buildTableName","tableName","tableMetadataArgs"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\schema-builder\\view\\View.ts"],"sourcesContent":["import { DataSource, Driver, EntityMetadata, SelectQueryBuilder } from \"../..\"\nimport { ViewOptions } from \"../options/ViewOptions\"\n\n/**\n * View in the database represented in this class.\n */\nexport class View {\n    readonly \"@instanceof\" = Symbol.for(\"View\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database name that this view resides in if it applies.\n     */\n    database?: string\n\n    /**\n     * Schema name that this view resides in if it applies.\n     */\n    schema?: string\n\n    /**\n     * View name\n     */\n    name: string\n\n    /**\n     * Indicates if view is materialized.\n     */\n    materialized: boolean\n\n    /**\n     * View definition.\n     */\n    expression: string | ((connection: DataSource) => SelectQueryBuilder<any>)\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: ViewOptions) {\n        if (options) {\n            this.database = options.database\n            this.schema = options.schema\n            this.name = options.name\n            this.expression = options.expression\n            this.materialized = !!options.materialized\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone(): View {\n        return new View(<ViewOptions>{\n            database: this.database,\n            schema: this.schema,\n            name: this.name,\n            expression: this.expression,\n            materialized: this.materialized,\n        })\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates view from a given entity metadata.\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver): View {\n        const options: ViewOptions = {\n            database: entityMetadata.database,\n            schema: entityMetadata.schema,\n            name: driver.buildTableName(\n                entityMetadata.tableName,\n                entityMetadata.schema,\n                entityMetadata.database,\n            ),\n            expression: entityMetadata.expression!,\n            materialized: entityMetadata.tableMetadataArgs.materialized,\n        }\n\n        return new View(options)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}