{"ast":null,"code":"import debug from \"debug\";\nimport { PlatformTools } from \"../platform/PlatformTools\";\n/**\n * Performs logging of the events in TypeORM via debug library.\n */\n\nexport class DebugLogger {\n  constructor() {\n    this.debugQueryLog = debug(\"typeorm:query:log\");\n    this.debugQueryError = debug(\"typeorm:query:error\");\n    this.debugQuerySlow = debug(\"typeorm:query:slow\");\n    this.debugSchemaBuild = debug(\"typeorm:schema\");\n    this.debugMigration = debug(\"typeorm:migration\");\n    this.debugLog = debug(\"typeorm:log\");\n    this.debugInfo = debug(\"typeorm:info\");\n    this.debugWarn = debug(\"typeorm:warn\");\n  }\n  /**\n   * Logs query and parameters used in it.\n   */\n\n\n  logQuery(query, parameters, queryRunner) {\n    if (this.debugQueryLog.enabled) {\n      this.debugQueryLog(PlatformTools.highlightSql(query) + \";\");\n\n      if (parameters && parameters.length) {\n        this.debugQueryLog(\"parameters:\", parameters);\n      }\n    }\n  }\n  /**\n   * Logs query that failed.\n   */\n\n\n  logQueryError(error, query, parameters, queryRunner) {\n    if (this.debugQueryError.enabled) {\n      this.debugQueryError(PlatformTools.highlightSql(query) + \";\");\n\n      if (parameters && parameters.length) {\n        this.debugQueryError(\"parameters:\", parameters);\n      }\n\n      this.debugQueryError(\"error: \", error);\n    }\n  }\n  /**\n   * Logs query that is slow.\n   */\n\n\n  logQuerySlow(time, query, parameters, queryRunner) {\n    if (this.debugQuerySlow.enabled) {\n      this.debugQuerySlow(PlatformTools.highlightSql(query) + \";\");\n\n      if (parameters && parameters.length) {\n        this.debugQuerySlow(\"parameters:\", parameters);\n      }\n\n      this.debugQuerySlow(\"execution time:\", time);\n    }\n  }\n  /**\n   * Logs events from the schema build process.\n   */\n\n\n  logSchemaBuild(message, queryRunner) {\n    if (this.debugSchemaBuild.enabled) {\n      this.debugSchemaBuild(message);\n    }\n  }\n  /**\n   * Logs events from the migration run process.\n   */\n\n\n  logMigration(message, queryRunner) {\n    if (this.debugMigration.enabled) {\n      this.debugMigration(message);\n    }\n  }\n  /**\n   * Perform logging using given logger.\n   * Log has its own level and message.\n   */\n\n\n  log(level, message, queryRunner) {\n    switch (level) {\n      case \"log\":\n        if (this.debugLog.enabled) {\n          this.debugLog(message);\n        }\n\n        break;\n\n      case \"info\":\n        if (this.debugInfo.enabled) {\n          this.debugInfo(message);\n        }\n\n        break;\n\n      case \"warn\":\n        if (this.debugWarn.enabled) {\n          this.debugWarn(message);\n        }\n\n        break;\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,aAAT,QAA8B,2BAA9B;AAEA;;;;AAGA,OAAM,MAAOC,WAAP,CAAkB;EAAxBC;IACY,qBAAgBH,KAAK,CAAC,mBAAD,CAArB;IACA,uBAAkBA,KAAK,CAAC,qBAAD,CAAvB;IACA,sBAAiBA,KAAK,CAAC,oBAAD,CAAtB;IACA,wBAAmBA,KAAK,CAAC,gBAAD,CAAxB;IACA,sBAAiBA,KAAK,CAAC,mBAAD,CAAtB;IAEA,gBAAWA,KAAK,CAAC,aAAD,CAAhB;IACA,iBAAYA,KAAK,CAAC,cAAD,CAAjB;IACA,iBAAYA,KAAK,CAAC,cAAD,CAAjB;EA+FX;EA7FG;;;;;EAGAI,QAAQ,CAACC,KAAD,EAAgBC,UAAhB,EAAoCC,WAApC,EAA6D;IACjE,IAAI,KAAKC,aAAL,CAAmBC,OAAvB,EAAgC;MAC5B,KAAKD,aAAL,CAAmBP,aAAa,CAACS,YAAd,CAA2BL,KAA3B,IAAoC,GAAvD;;MACA,IAAIC,UAAU,IAAIA,UAAU,CAACK,MAA7B,EAAqC;QACjC,KAAKH,aAAL,CAAmB,aAAnB,EAAkCF,UAAlC;MACH;IACJ;EACJ;EAED;;;;;EAGAM,aAAa,CACTC,KADS,EAETR,KAFS,EAGTC,UAHS,EAITC,WAJS,EAIgB;IAEzB,IAAI,KAAKO,eAAL,CAAqBL,OAAzB,EAAkC;MAC9B,KAAKK,eAAL,CAAqBb,aAAa,CAACS,YAAd,CAA2BL,KAA3B,IAAoC,GAAzD;;MACA,IAAIC,UAAU,IAAIA,UAAU,CAACK,MAA7B,EAAqC;QACjC,KAAKG,eAAL,CAAqB,aAArB,EAAoCR,UAApC;MACH;;MACD,KAAKQ,eAAL,CAAqB,SAArB,EAAgCD,KAAhC;IACH;EACJ;EAED;;;;;EAGAE,YAAY,CACRC,IADQ,EAERX,KAFQ,EAGRC,UAHQ,EAIRC,WAJQ,EAIiB;IAEzB,IAAI,KAAKU,cAAL,CAAoBR,OAAxB,EAAiC;MAC7B,KAAKQ,cAAL,CAAoBhB,aAAa,CAACS,YAAd,CAA2BL,KAA3B,IAAoC,GAAxD;;MACA,IAAIC,UAAU,IAAIA,UAAU,CAACK,MAA7B,EAAqC;QACjC,KAAKM,cAAL,CAAoB,aAApB,EAAmCX,UAAnC;MACH;;MACD,KAAKW,cAAL,CAAoB,iBAApB,EAAuCD,IAAvC;IACH;EACJ;EAED;;;;;EAGAE,cAAc,CAACC,OAAD,EAAkBZ,WAAlB,EAA2C;IACrD,IAAI,KAAKa,gBAAL,CAAsBX,OAA1B,EAAmC;MAC/B,KAAKW,gBAAL,CAAsBD,OAAtB;IACH;EACJ;EAED;;;;;EAGAE,YAAY,CAACF,OAAD,EAAkBZ,WAAlB,EAA2C;IACnD,IAAI,KAAKe,cAAL,CAAoBb,OAAxB,EAAiC;MAC7B,KAAKa,cAAL,CAAoBH,OAApB;IACH;EACJ;EAED;;;;;;EAIAI,GAAG,CACCC,KADD,EAECL,OAFD,EAGCZ,WAHD,EAG0B;IAEzB,QAAQiB,KAAR;MACI,KAAK,KAAL;QACI,IAAI,KAAKC,QAAL,CAAchB,OAAlB,EAA2B;UACvB,KAAKgB,QAAL,CAAcN,OAAd;QACH;;QACD;;MACJ,KAAK,MAAL;QACI,IAAI,KAAKO,SAAL,CAAejB,OAAnB,EAA4B;UACxB,KAAKiB,SAAL,CAAeP,OAAf;QACH;;QACD;;MACJ,KAAK,MAAL;QACI,IAAI,KAAKQ,SAAL,CAAelB,OAAnB,EAA4B;UACxB,KAAKkB,SAAL,CAAeR,OAAf;QACH;;QACD;IAfR;EAiBH;;AAvGmB","names":["debug","PlatformTools","DebugLogger","constructor","logQuery","query","parameters","queryRunner","debugQueryLog","enabled","highlightSql","length","logQueryError","error","debugQueryError","logQuerySlow","time","debugQuerySlow","logSchemaBuild","message","debugSchemaBuild","logMigration","debugMigration","log","level","debugLog","debugInfo","debugWarn"],"sources":["C:\\Users\\darkh\\node_modules\\typeorm\\browser\\src\\logger\\DebugLogger.ts"],"sourcesContent":["import debug from \"debug\"\nimport { Logger } from \"./Logger\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\n\n/**\n * Performs logging of the events in TypeORM via debug library.\n */\nexport class DebugLogger implements Logger {\n    private debugQueryLog = debug(\"typeorm:query:log\")\n    private debugQueryError = debug(\"typeorm:query:error\")\n    private debugQuerySlow = debug(\"typeorm:query:slow\")\n    private debugSchemaBuild = debug(\"typeorm:schema\")\n    private debugMigration = debug(\"typeorm:migration\")\n\n    private debugLog = debug(\"typeorm:log\")\n    private debugInfo = debug(\"typeorm:info\")\n    private debugWarn = debug(\"typeorm:warn\")\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.debugQueryLog.enabled) {\n            this.debugQueryLog(PlatformTools.highlightSql(query) + \";\")\n            if (parameters && parameters.length) {\n                this.debugQueryLog(\"parameters:\", parameters)\n            }\n        }\n    }\n\n    /**\n     * Logs query that failed.\n     */\n    logQueryError(\n        error: string,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ) {\n        if (this.debugQueryError.enabled) {\n            this.debugQueryError(PlatformTools.highlightSql(query) + \";\")\n            if (parameters && parameters.length) {\n                this.debugQueryError(\"parameters:\", parameters)\n            }\n            this.debugQueryError(\"error: \", error)\n        }\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(\n        time: number,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ) {\n        if (this.debugQuerySlow.enabled) {\n            this.debugQuerySlow(PlatformTools.highlightSql(query) + \";\")\n            if (parameters && parameters.length) {\n                this.debugQuerySlow(\"parameters:\", parameters)\n            }\n            this.debugQuerySlow(\"execution time:\", time)\n        }\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (this.debugSchemaBuild.enabled) {\n            this.debugSchemaBuild(message)\n        }\n    }\n\n    /**\n     * Logs events from the migration run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        if (this.debugMigration.enabled) {\n            this.debugMigration(message)\n        }\n    }\n\n    /**\n     * Perform logging using given logger.\n     * Log has its own level and message.\n     */\n    log(\n        level: \"log\" | \"info\" | \"warn\",\n        message: any,\n        queryRunner?: QueryRunner,\n    ) {\n        switch (level) {\n            case \"log\":\n                if (this.debugLog.enabled) {\n                    this.debugLog(message)\n                }\n                break\n            case \"info\":\n                if (this.debugInfo.enabled) {\n                    this.debugInfo(message)\n                }\n                break\n            case \"warn\":\n                if (this.debugWarn.enabled) {\n                    this.debugWarn(message)\n                }\n                break\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}