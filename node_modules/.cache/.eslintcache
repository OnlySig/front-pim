[{"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\index.tsx":"1","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\App.tsx":"2","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\routes.tsx":"3","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\components\\Header\\index.tsx":"4","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Users\\index.tsx":"5","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Users\\Form\\index.tsx":"6","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\services\\api.ts":"7","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Registros\\index.tsx":"8","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Users\\style.ts":"9","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Registros\\style.ts":"10","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Users\\Form\\style.ts":"11","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\landing page\\Home.jsx":"12","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\view\\index.tsx":"13","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\view\\style.ts":"14","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\landing page\\componentsPage\\footer.js":"15","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\landing page\\componentsPage\\header.js":"16","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\landing page\\componentsPage\\meio.js":"17","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\landing page\\componentsPage\\meio2.js":"18","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Login\\index.tsx":"19","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Login\\style.ts":"20","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\components\\Input\\index.tsx":"21","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\components\\Button\\index.tsx":"22","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\components\\Button\\style.ts":"23","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\components\\Input\\style.ts":"24"},{"size":271,"mtime":1665605787785,"results":"25","hashOfConfig":"26"},{"size":266,"mtime":1669080155311,"results":"27","hashOfConfig":"26"},{"size":819,"mtime":1669751704533,"results":"28","hashOfConfig":"26"},{"size":781,"mtime":1664986535331,"results":"29","hashOfConfig":"26"},{"size":3015,"mtime":1669258300765,"results":"30","hashOfConfig":"26"},{"size":5459,"mtime":1669258328958,"results":"31","hashOfConfig":"26"},{"size":213,"mtime":1669752128224,"results":"32","hashOfConfig":"26"},{"size":5593,"mtime":1669141221615,"results":"33","hashOfConfig":"26"},{"size":1352,"mtime":1669140905156,"results":"34","hashOfConfig":"26"},{"size":1245,"mtime":1669137016282,"results":"35","hashOfConfig":"26"},{"size":1246,"mtime":1669137257578,"results":"36","hashOfConfig":"26"},{"size":366,"mtime":1669242004945,"results":"37","hashOfConfig":"26"},{"size":2673,"mtime":1669758450476,"results":"38","hashOfConfig":"26"},{"size":1610,"mtime":1669253856319,"results":"39","hashOfConfig":"26"},{"size":1027,"mtime":1669146070361,"results":"40","hashOfConfig":"26"},{"size":1946,"mtime":1669160810660,"results":"41","hashOfConfig":"26"},{"size":3139,"mtime":1669249755866,"results":"42","hashOfConfig":"26"},{"size":6117,"mtime":1669247290917,"results":"43","hashOfConfig":"26"},{"size":1993,"mtime":1669772140555,"results":"44","hashOfConfig":"26"},{"size":1469,"mtime":1669751274047,"results":"45","hashOfConfig":"26"},{"size":783,"mtime":1669406596545,"results":"46","hashOfConfig":"26"},{"size":284,"mtime":1669405006637,"results":"47","hashOfConfig":"26"},{"size":793,"mtime":1669751599149,"results":"48","hashOfConfig":"26"},{"size":573,"mtime":1669751528647,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"1j3q76z",{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"53"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"53"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"53"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\index.tsx",[],[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\App.tsx",["132"],[],"import React from 'react';\nimport { BrowserRouter } from 'react-router-dom'\nimport Routes from './routes';\nimport Header from './components/Header';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n\n","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\routes.tsx",[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\components\\Header\\index.tsx",["133"],[],"import React from 'react';\r\nimport { Navbar, Container, Nav, NavDropdown } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header: React.FC = () => {\r\n    return(\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n        <Container>\r\n            <Navbar.Brand href=\"#home\">Usuários</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"me-auto\">\r\n                <Nav.Link as={Link} className=\"nav-Item\" to=\"/\" >Início</Nav.Link>\r\n                <Nav.Link as={Link} className=\"nav-Item\" to=\"/users\" >Usuários</Nav.Link>\r\n            </Nav>\r\n            </Navbar.Collapse>\r\n        </Container>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n",[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Users\\index.tsx",["134"],[],"//Paginas de usuários\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Table, Button } from 'react-bootstrap';\r\nimport {Layout, BodyLayout, BodyButton } from \"./style\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport api from '../../services/api';\r\nimport moment from 'moment';\r\n\r\n\r\ninterface IUsers{\r\n\r\n    id: number;\r\n    placa: string;\r\n    name: string;\r\n    status: string;\r\n    data: string;   \r\n    modelo: string;\r\n    pagamento: string;\r\n\r\n}\r\n\r\nconst Users: React.FC = () => {\r\n\r\n    const [users, setUsers] = useState<IUsers[]>([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        loadUsers()\r\n\r\n}, [])\r\n\r\nasync function loadUsers() {\r\n    const response = await api.get('/users')\r\n    console.log(response);\r\n    setUsers(response.data)\r\n\r\n}\r\n\r\nfunction formatDate(date: Date){\r\n    return moment(date).format('DD/MM/YYYY')\r\n}\r\n\r\nfunction viewTask(){\r\n    navigate(\"/view_users\")\r\n}\r\n\r\nfunction newTask(){\r\n    navigate(\"/users_cadastro\")\r\n}\r\n\r\nfunction editTask(id: number){        \r\n    navigate(\"/Registros/\"+id)\r\n    loadUsers()\r\n}\r\n\r\nasync function deleteTask(id: number){\r\n    await api.delete(\"/users/\"+id)\r\n    loadUsers()\r\n}\r\n\r\nreturn (\r\n    <>\r\n    <BodyLayout>\r\n        <Layout>\r\n    <div className=\"container\">\r\n        <br />\r\n        <div className=\"user-header\">\r\n        <h1>Página de Cliente</h1>\r\n        <BodyButton>\r\n            <Button size=\"sm\" variant=\"btn btn-outline-success\" onClick= { newTask } >Novo Cliente</Button>\r\n            <Button size=\"sm\" variant=\"btn btn-outline-success\" onClick={() => viewTask()}>Pesquisar</Button>{' '}\r\n        </BodyButton>\r\n    </div>\r\n        <br />\r\n        <Table striped bordered hover className=\"text-center\">\r\n            <thead>\r\n                <tr>\r\n                <th>id</th>\r\n                <th>Nº DA PLACA</th>\r\n                <th>NOME</th>             \r\n                <th>STATUS</th>\r\n                <th>DATA</th>\r\n                <th>MODELO</th>\r\n                <th>PAGAMENTO</th>\r\n                <th>AÇÕES</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    users.map(user => (\r\n                    <tr key={user.id}>\r\n                    <td>{user.id}</td>\r\n                    <td>{user.placa}</td>\r\n                    <td>{user.name}</td> \r\n                    <td>{user.status}</td>                \r\n                    <td>{user.data}</td>\r\n                    <td>{user.modelo}</td>\r\n                    <td>{user.pagamento}</td>\r\n                    <td>\r\n                    <Button size=\"sm\" variant=\"primary\" onClick={() => editTask(user.id)}>Editar</Button>{' '}\r\n                    <Button size=\"sm\" variant=\"danger\" onClick={() => deleteTask(user.id)}>Remover</Button>{' '} \r\n                    </td>\r\n                    </tr>\r\n                ))\r\n            }\r\n        </tbody>\r\n        </Table>\r\n    </div>\r\n        </Layout>\r\n    </BodyLayout>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default Users;","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Users\\Form\\index.tsx",["135","136","137","138"],[],"//Novo Usuário\r\nimport {Layout, BodyLayout } from \"./style\";\r\nimport React, { useState, ChangeEvent, useEffect } from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport api from '../../../services/api';\r\nimport './index.css';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\ninterface IUser{    \r\n    id: string;\r\n    placa: string;\r\n    name: string;\r\n    status: string;\r\n    data: string;    \r\n    modelo: string;    \r\n    pagamento: string;    \r\n}\r\n\r\nconst Users: React.FC = () => {\r\n    \r\n    const navigate = useNavigate()\r\n    const { id } = useParams<{ id: string }>()\r\n\r\n    const [model, setModel] = useState<IUser>({\r\n        id: '',\r\n        placa: '',\r\n        name: '',\r\n        status: '',\r\n        data: '',\r\n        modelo: '',\r\n        pagamento: ''\r\n    })\r\n    \r\n    useEffect(() => {\r\n        console.log(\"Valor de Id\"+id)\r\n        if (id != undefined) {\r\n            findUser(id)\r\n        }\r\n    }, [id])\r\n\r\n    function updatedModel(e: ChangeEvent<HTMLInputElement>) {\r\n        setModel({\r\n            ...model,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    async function onSubmit(e: ChangeEvent<HTMLFormElement>){\r\n        e.preventDefault()\r\n\r\n        if (id != undefined) {\r\n            const response = await api.put('/users/'+id, model)            \r\n        }\r\n        else{\r\n            const response = await api.post('/users', model)\r\n        }\r\n        back()\r\n    }\r\n\r\n    function back(){\r\n        navigate(-1);\r\n    }\r\n\r\n    async function findUser(id: string){\r\n        const response = await api.get('/users/'+id)    \r\n        console.log(response)\r\n        setModel({\r\n            id: response.data.id,\r\n            placa: response.data.placa,\r\n            name: response.data.name,\r\n            status: response.data.status,\r\n            data: response.data.data,\r\n            modelo: response.data.modelo,\r\n            pagamento: response.data.pagamento\r\n        })\r\n    }\r\n\r\n    return (\r\n    <>\r\n    <BodyLayout>\r\n    <Layout>\r\n        <div className=\"container\">\r\n            <br />\r\n                <h1>Cadastrar um novo Cliente</h1>\r\n                <Button variant=\"btn btn-outline-success\" size=\"sm\" onClick={back}>Voltar</Button>\r\n            <br />\r\n            <div className=\"container\">\r\n                <Form onSubmit={onSubmit}>\r\n                    <Form.Group>\r\n                        <Form.Label>Id</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            name=\"id\"\r\n                            value={model.id}\r\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                            <Form.Label>Placa</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                name=\"placa\"\r\n                                value={model.placa}\r\n                                onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>Nome</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={model.name}\r\n                                onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                        </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Status</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            name=\"status\"\r\n                            value={model.status}\r\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Data</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            name=\"data\"\r\n                            value={model.data}\r\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Modelo</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            name=\"modelo\"\r\n                            value={model.modelo}\r\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Pagamento</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            name=\"pagamento\"\r\n                            value={model.pagamento}\r\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                    </Form.Group>\r\n                    <br/>\r\n                    <Button variant=\"btn btn-outline-success\" type=\"submit\">\r\n                        Salvar\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    </Layout>\r\n    </BodyLayout>\r\n</>\r\n);\r\n}\r\n\r\nexport default Users;\r\n","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\services\\api.ts",[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Registros\\index.tsx",["139","140","141","142","143"],[],"//Editar Cliente\r\n\r\nimport React, { useState, ChangeEvent, useEffect } from 'react';\r\nimport { Layout, StyledInput, BodyLayout } from \"./style\";\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport api from '../../services/api';\r\nimport '../Users/Form/index.css';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\ninterface IUser{    \r\n    id: string;\r\n    placa: string;\r\n    name: string;\r\n    status: string;\r\n    data: string;    \r\n    modelo: string;    \r\n    pagamento: string;    \r\n}\r\n\r\nconst Users: React.FC = () => {\r\n    \r\n    const navigate = useNavigate()\r\n    const { id } = useParams<{ id: string }>()\r\n\r\n    const [model, setModel] = useState<IUser>({\r\n        id: '',\r\n        placa: '',\r\n        name: '',\r\n        status: '',\r\n        data: '',\r\n        modelo: '',\r\n        pagamento: ''\r\n    })\r\n    \r\n    useEffect(() => {\r\n        console.log(\"Valor de Id\"+id)\r\n        if (id != undefined) {\r\n            findUser(id)\r\n        }\r\n    }, [id])\r\n\r\n    function updatedModel(e: ChangeEvent<HTMLInputElement>) {\r\n        setModel({\r\n            ...model,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    async function onSubmit(e: ChangeEvent<HTMLFormElement>){\r\n        e.preventDefault()\r\n\r\n        if (id != undefined) {\r\n            const response = await api.put('/users/'+id, model)            \r\n        }\r\n        else{\r\n            const response = await api.post('/users', model)\r\n        }\r\n        back()\r\n    }\r\n\r\n    function back(){\r\n        navigate(-1);\r\n    }\r\n\r\n    async function findUser(id: string){\r\n        const response = await api.get('/users/'+id)    \r\n        console.log(response)\r\n        setModel({\r\n            id: response.data.id,\r\n            placa: response.data.placa,\r\n            name: response.data.name,\r\n            status: response.data.status,\r\n            data: response.data.data,\r\n            modelo: response.data.modelo,\r\n            pagamento: response.data.pagamento\r\n        })\r\n    }\r\n\r\n    return (\r\n    <>\r\n    <BodyLayout>\r\n    <Layout>\r\n      <div className=\"container\">\r\n            <br />\r\n            <div className=\"user-header\">\r\n                <h1>Editar Cliente {id} </h1>\r\n                <Button variant=\"btn btn-outline-success\" size=\"sm\" onClick={back}>Voltar</Button>\r\n            </div>\r\n            <br />\r\n            <div className=\"container\">\r\n                <Form onSubmit={onSubmit}>\r\n                  <Form.Group>\r\n                        <Form.Label>Id</Form.Label>\r\n                        <Form.Control\r\n                            disabled  \r\n                            type=\"text\"\r\n                            name=\"id\"\r\n                            value={model.id}\r\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                            <Form.Label>Placa</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                name=\"placa\"\r\n                                value={model.placa}\r\n                                onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group>\r\n                            <Form.Label>Nome</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={model.name}\r\n                                onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                        </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Status</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            name=\"status\"\r\n                            value={model.status}\r\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Data</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            name=\"data\"\r\n                            value={model.data}\r\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Modelo</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            name=\"modelo\"\r\n                            value={model.modelo}\r\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group>\r\n                        <Form.Label>Pagamento</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            name=\"pagamento\"\r\n                            value={model.pagamento}\r\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => updatedModel(e)}/>\r\n                    </Form.Group>\r\n                    <br/>\r\n                    <Button variant=\"btn btn-outline-success\" type=\"submit\">\r\n                        Salvar\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n        </Layout>\r\n        </BodyLayout>\r\n    </>\r\n    );\r\n}\r\nexport default Users;\r\n","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Users\\style.ts",[],[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Registros\\style.ts",[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Users\\Form\\style.ts",[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\landing page\\Home.jsx",[],[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\view\\index.tsx",["144","145","146","147"],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\view\\style.ts",[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\landing page\\componentsPage\\footer.js",["148","149","150","151","152","153","154","155"],[],"import React from 'react'\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n    <div className=\"principal\">\r\n      <div className=\"background1\">\r\n        <h2>\r\n          SafeCar\r\n        </h2>\r\n        <span>\r\n          (13) 991518147\r\n        </span>\r\n        <span className=\"contato\">\r\n          contato@safecar.com\r\n        </span>\r\n      </div>\r\n        <h2 className=\"menu1\">\r\n          Menu\r\n        </h2>\r\n        <div className=\"ancorasl\">\r\n          <a href=\"#\">Home</a>\r\n          <a href=\"#\">serviços</a>\r\n        </div>\r\n        <div className=\"ancorasl1\">\r\n          <a href=\"#\">Preços</a>\r\n          <a href=\"#\">Contato</a>\r\n        </div>\r\n        <h2 className=\"menu1\">\r\n          Social\r\n        </h2>\r\n        <div className=\"ancorasl\">\r\n          <a href=\"#\">Twitter</a>\r\n          <a href=\"#\">Instagram</a>\r\n        </div>\r\n        <div className=\"ancorasl1\">\r\n          <a href=\"#\">Facebook</a>\r\n          <a href=\"#\">Linkedin</a>\r\n        </div>\r\n    </div>\r\n  </footer>\r\n  )\r\n}\r\n\r\nexport { Footer }","C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\landing page\\componentsPage\\header.js",[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\landing page\\componentsPage\\meio.js",[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\landing page\\componentsPage\\meio2.js",[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Login\\index.tsx",["156"],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\pages\\Login\\style.ts",[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\components\\Input\\index.tsx",[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\components\\Button\\index.tsx",[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\components\\Button\\style.ts",[],[],"C:\\Users\\GabrielC\\Documents\\atvfrontend\\src\\components\\Input\\style.ts",[],[],{"ruleId":"157","severity":1,"message":"158","line":4,"column":8,"nodeType":"159","messageId":"160","endLine":4,"endColumn":14},{"ruleId":"157","severity":1,"message":"161","line":2,"column":34,"nodeType":"159","messageId":"160","endLine":2,"endColumn":45},{"ruleId":"157","severity":1,"message":"162","line":40,"column":10,"nodeType":"159","messageId":"160","endLine":40,"endColumn":20},{"ruleId":"163","severity":1,"message":"164","line":36,"column":16,"nodeType":"165","messageId":"166","endLine":36,"endColumn":18},{"ruleId":"163","severity":1,"message":"164","line":51,"column":16,"nodeType":"165","messageId":"166","endLine":51,"endColumn":18},{"ruleId":"157","severity":1,"message":"167","line":52,"column":19,"nodeType":"159","messageId":"160","endLine":52,"endColumn":27},{"ruleId":"157","severity":1,"message":"167","line":55,"column":19,"nodeType":"159","messageId":"160","endLine":55,"endColumn":27},{"ruleId":"157","severity":1,"message":"168","line":4,"column":18,"nodeType":"159","messageId":"160","endLine":4,"endColumn":29},{"ruleId":"163","severity":1,"message":"164","line":37,"column":16,"nodeType":"165","messageId":"166","endLine":37,"endColumn":18},{"ruleId":"163","severity":1,"message":"164","line":52,"column":16,"nodeType":"165","messageId":"166","endLine":52,"endColumn":18},{"ruleId":"157","severity":1,"message":"167","line":53,"column":19,"nodeType":"159","messageId":"160","endLine":53,"endColumn":27},{"ruleId":"157","severity":1,"message":"167","line":56,"column":19,"nodeType":"159","messageId":"160","endLine":56,"endColumn":27},{"ruleId":"157","severity":1,"message":"162","line":40,"column":10,"nodeType":"159","messageId":"160","endLine":40,"endColumn":20},{"ruleId":"157","severity":1,"message":"169","line":48,"column":10,"nodeType":"159","messageId":"160","endLine":48,"endColumn":17},{"ruleId":"157","severity":1,"message":"170","line":52,"column":10,"nodeType":"159","messageId":"160","endLine":52,"endColumn":18},{"ruleId":"157","severity":1,"message":"171","line":57,"column":16,"nodeType":"159","messageId":"160","endLine":57,"endColumn":26},{"ruleId":"172","severity":1,"message":"173","line":22,"column":11,"nodeType":"174","endLine":22,"endColumn":23},{"ruleId":"172","severity":1,"message":"173","line":23,"column":11,"nodeType":"174","endLine":23,"endColumn":23},{"ruleId":"172","severity":1,"message":"173","line":26,"column":11,"nodeType":"174","endLine":26,"endColumn":23},{"ruleId":"172","severity":1,"message":"173","line":27,"column":11,"nodeType":"174","endLine":27,"endColumn":23},{"ruleId":"172","severity":1,"message":"173","line":33,"column":11,"nodeType":"174","endLine":33,"endColumn":23},{"ruleId":"172","severity":1,"message":"173","line":34,"column":11,"nodeType":"174","endLine":34,"endColumn":23},{"ruleId":"172","severity":1,"message":"173","line":37,"column":11,"nodeType":"174","endLine":37,"endColumn":23},{"ruleId":"172","severity":1,"message":"173","line":38,"column":11,"nodeType":"174","endLine":38,"endColumn":23},{"ruleId":"157","severity":1,"message":"175","line":7,"column":29,"nodeType":"159","messageId":"160","endLine":7,"endColumn":36},"@typescript-eslint/no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'NavDropdown' is defined but never used.","'formatDate' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'response' is assigned a value but never used.","'StyledInput' is defined but never used.","'newTask' is defined but never used.","'editTask' is defined but never used.","'deleteTask' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'SpanCar' is defined but never used."]